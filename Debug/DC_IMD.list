
DC_IMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800aab8  0800aab8  0001aab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b028  0800b028  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b030  0800b030  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b034  0800b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200001d4  0800b20c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800b20c  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f03  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b17  00000000  00000000  0002a142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000634  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001524e  00000000  00000000  0002cab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aacb  00000000  00000000  00041d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007eea8  00000000  00000000  0004c7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031a8  00000000  00000000  000cb678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ce820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aaa0 	.word	0x0800aaa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800aaa0 	.word	0x0800aaa0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffee 	bl	8002624 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffe9 	bl	8002624 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 febb 	bl	80025e8 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fdb6 	bl	80025e8 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa63 	bl	80025e8 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 fa46 	bl	80025e8 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800ab50 	.word	0x0800ab50
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f977 	bl	80025e8 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f968 	bl	80025e8 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdf9 	bl	80025e8 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fdd1 	bl	80025e8 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd64 	bl	80025e8 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd56 	bl	80025e8 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc91 	bl	80025e8 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fb2a 	bl	80025e8 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f91a 	bl	80025e8 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8ef 	bl	80025e8 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_f2d>:
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	0242      	lsls	r2, r0, #9
 8002450:	0043      	lsls	r3, r0, #1
 8002452:	0fc4      	lsrs	r4, r0, #31
 8002454:	20fe      	movs	r0, #254	; 0xfe
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	0a55      	lsrs	r5, r2, #9
 800245c:	4208      	tst	r0, r1
 800245e:	d00c      	beq.n	800247a <__aeabi_f2d+0x2e>
 8002460:	21e0      	movs	r1, #224	; 0xe0
 8002462:	0089      	lsls	r1, r1, #2
 8002464:	468c      	mov	ip, r1
 8002466:	076d      	lsls	r5, r5, #29
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	4463      	add	r3, ip
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	4313      	orrs	r3, r2
 8002470:	07e4      	lsls	r4, r4, #31
 8002472:	4323      	orrs	r3, r4
 8002474:	0028      	movs	r0, r5
 8002476:	0019      	movs	r1, r3
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <__aeabi_f2d+0x5c>
 800247e:	2d00      	cmp	r5, #0
 8002480:	d01b      	beq.n	80024ba <__aeabi_f2d+0x6e>
 8002482:	0028      	movs	r0, r5
 8002484:	f000 f8b0 	bl	80025e8 <__clzsi2>
 8002488:	280a      	cmp	r0, #10
 800248a:	dc1c      	bgt.n	80024c6 <__aeabi_f2d+0x7a>
 800248c:	230b      	movs	r3, #11
 800248e:	002a      	movs	r2, r5
 8002490:	1a1b      	subs	r3, r3, r0
 8002492:	40da      	lsrs	r2, r3
 8002494:	0003      	movs	r3, r0
 8002496:	3315      	adds	r3, #21
 8002498:	409d      	lsls	r5, r3
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <__aeabi_f2d+0x88>)
 800249c:	0312      	lsls	r2, r2, #12
 800249e:	1a1b      	subs	r3, r3, r0
 80024a0:	055b      	lsls	r3, r3, #21
 80024a2:	0b12      	lsrs	r2, r2, #12
 80024a4:	0d5b      	lsrs	r3, r3, #21
 80024a6:	e7e1      	b.n	800246c <__aeabi_f2d+0x20>
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d009      	beq.n	80024c0 <__aeabi_f2d+0x74>
 80024ac:	0b13      	lsrs	r3, r2, #12
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	431a      	orrs	r2, r3
 80024b4:	076d      	lsls	r5, r5, #29
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <__aeabi_f2d+0x8c>)
 80024b8:	e7d8      	b.n	800246c <__aeabi_f2d+0x20>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2200      	movs	r2, #0
 80024be:	e7d5      	b.n	800246c <__aeabi_f2d+0x20>
 80024c0:	2200      	movs	r2, #0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <__aeabi_f2d+0x8c>)
 80024c4:	e7d2      	b.n	800246c <__aeabi_f2d+0x20>
 80024c6:	0003      	movs	r3, r0
 80024c8:	002a      	movs	r2, r5
 80024ca:	3b0b      	subs	r3, #11
 80024cc:	409a      	lsls	r2, r3
 80024ce:	2500      	movs	r5, #0
 80024d0:	e7e3      	b.n	800249a <__aeabi_f2d+0x4e>
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	00000389 	.word	0x00000389
 80024d8:	000007ff 	.word	0x000007ff

080024dc <__aeabi_d2f>:
 80024dc:	0002      	movs	r2, r0
 80024de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e0:	004b      	lsls	r3, r1, #1
 80024e2:	030d      	lsls	r5, r1, #12
 80024e4:	0f40      	lsrs	r0, r0, #29
 80024e6:	0d5b      	lsrs	r3, r3, #21
 80024e8:	0fcc      	lsrs	r4, r1, #31
 80024ea:	0a6d      	lsrs	r5, r5, #9
 80024ec:	493a      	ldr	r1, [pc, #232]	; (80025d8 <__aeabi_d2f+0xfc>)
 80024ee:	4305      	orrs	r5, r0
 80024f0:	1c58      	adds	r0, r3, #1
 80024f2:	00d7      	lsls	r7, r2, #3
 80024f4:	4208      	tst	r0, r1
 80024f6:	d00a      	beq.n	800250e <__aeabi_d2f+0x32>
 80024f8:	4938      	ldr	r1, [pc, #224]	; (80025dc <__aeabi_d2f+0x100>)
 80024fa:	1859      	adds	r1, r3, r1
 80024fc:	29fe      	cmp	r1, #254	; 0xfe
 80024fe:	dd16      	ble.n	800252e <__aeabi_d2f+0x52>
 8002500:	20ff      	movs	r0, #255	; 0xff
 8002502:	2200      	movs	r2, #0
 8002504:	05c0      	lsls	r0, r0, #23
 8002506:	4310      	orrs	r0, r2
 8002508:	07e4      	lsls	r4, r4, #31
 800250a:	4320      	orrs	r0, r4
 800250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <__aeabi_d2f+0x44>
 8002512:	433d      	orrs	r5, r7
 8002514:	d026      	beq.n	8002564 <__aeabi_d2f+0x88>
 8002516:	2205      	movs	r2, #5
 8002518:	0192      	lsls	r2, r2, #6
 800251a:	0a52      	lsrs	r2, r2, #9
 800251c:	b2d8      	uxtb	r0, r3
 800251e:	e7f1      	b.n	8002504 <__aeabi_d2f+0x28>
 8002520:	432f      	orrs	r7, r5
 8002522:	d0ed      	beq.n	8002500 <__aeabi_d2f+0x24>
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	03d2      	lsls	r2, r2, #15
 8002528:	20ff      	movs	r0, #255	; 0xff
 800252a:	432a      	orrs	r2, r5
 800252c:	e7ea      	b.n	8002504 <__aeabi_d2f+0x28>
 800252e:	2900      	cmp	r1, #0
 8002530:	dd1b      	ble.n	800256a <__aeabi_d2f+0x8e>
 8002532:	0192      	lsls	r2, r2, #6
 8002534:	1e50      	subs	r0, r2, #1
 8002536:	4182      	sbcs	r2, r0
 8002538:	00ed      	lsls	r5, r5, #3
 800253a:	0f7f      	lsrs	r7, r7, #29
 800253c:	432a      	orrs	r2, r5
 800253e:	433a      	orrs	r2, r7
 8002540:	0753      	lsls	r3, r2, #29
 8002542:	d047      	beq.n	80025d4 <__aeabi_d2f+0xf8>
 8002544:	230f      	movs	r3, #15
 8002546:	4013      	ands	r3, r2
 8002548:	2b04      	cmp	r3, #4
 800254a:	d000      	beq.n	800254e <__aeabi_d2f+0x72>
 800254c:	3204      	adds	r2, #4
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	04db      	lsls	r3, r3, #19
 8002552:	4013      	ands	r3, r2
 8002554:	d03e      	beq.n	80025d4 <__aeabi_d2f+0xf8>
 8002556:	1c48      	adds	r0, r1, #1
 8002558:	29fe      	cmp	r1, #254	; 0xfe
 800255a:	d0d1      	beq.n	8002500 <__aeabi_d2f+0x24>
 800255c:	0192      	lsls	r2, r2, #6
 800255e:	0a52      	lsrs	r2, r2, #9
 8002560:	b2c0      	uxtb	r0, r0
 8002562:	e7cf      	b.n	8002504 <__aeabi_d2f+0x28>
 8002564:	2000      	movs	r0, #0
 8002566:	2200      	movs	r2, #0
 8002568:	e7cc      	b.n	8002504 <__aeabi_d2f+0x28>
 800256a:	000a      	movs	r2, r1
 800256c:	3217      	adds	r2, #23
 800256e:	db2f      	blt.n	80025d0 <__aeabi_d2f+0xf4>
 8002570:	2680      	movs	r6, #128	; 0x80
 8002572:	0436      	lsls	r6, r6, #16
 8002574:	432e      	orrs	r6, r5
 8002576:	251e      	movs	r5, #30
 8002578:	1a6d      	subs	r5, r5, r1
 800257a:	2d1f      	cmp	r5, #31
 800257c:	dd11      	ble.n	80025a2 <__aeabi_d2f+0xc6>
 800257e:	2202      	movs	r2, #2
 8002580:	4252      	negs	r2, r2
 8002582:	1a52      	subs	r2, r2, r1
 8002584:	0031      	movs	r1, r6
 8002586:	40d1      	lsrs	r1, r2
 8002588:	2d20      	cmp	r5, #32
 800258a:	d004      	beq.n	8002596 <__aeabi_d2f+0xba>
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <__aeabi_d2f+0x104>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	409e      	lsls	r6, r3
 8002594:	4337      	orrs	r7, r6
 8002596:	003a      	movs	r2, r7
 8002598:	1e53      	subs	r3, r2, #1
 800259a:	419a      	sbcs	r2, r3
 800259c:	430a      	orrs	r2, r1
 800259e:	2100      	movs	r1, #0
 80025a0:	e7ce      	b.n	8002540 <__aeabi_d2f+0x64>
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <__aeabi_d2f+0x108>)
 80025a4:	0038      	movs	r0, r7
 80025a6:	4694      	mov	ip, r2
 80025a8:	4463      	add	r3, ip
 80025aa:	4098      	lsls	r0, r3
 80025ac:	003a      	movs	r2, r7
 80025ae:	1e41      	subs	r1, r0, #1
 80025b0:	4188      	sbcs	r0, r1
 80025b2:	409e      	lsls	r6, r3
 80025b4:	40ea      	lsrs	r2, r5
 80025b6:	4330      	orrs	r0, r6
 80025b8:	4302      	orrs	r2, r0
 80025ba:	2100      	movs	r1, #0
 80025bc:	0753      	lsls	r3, r2, #29
 80025be:	d1c1      	bne.n	8002544 <__aeabi_d2f+0x68>
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0013      	movs	r3, r2
 80025c4:	04c9      	lsls	r1, r1, #19
 80025c6:	2001      	movs	r0, #1
 80025c8:	400b      	ands	r3, r1
 80025ca:	420a      	tst	r2, r1
 80025cc:	d1c6      	bne.n	800255c <__aeabi_d2f+0x80>
 80025ce:	e7a3      	b.n	8002518 <__aeabi_d2f+0x3c>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e7a0      	b.n	8002516 <__aeabi_d2f+0x3a>
 80025d4:	000b      	movs	r3, r1
 80025d6:	e79f      	b.n	8002518 <__aeabi_d2f+0x3c>
 80025d8:	000007fe 	.word	0x000007fe
 80025dc:	fffffc80 	.word	0xfffffc80
 80025e0:	fffffca2 	.word	0xfffffca2
 80025e4:	fffffc82 	.word	0xfffffc82

080025e8 <__clzsi2>:
 80025e8:	211c      	movs	r1, #28
 80025ea:	2301      	movs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d301      	bcc.n	80025f6 <__clzsi2+0xe>
 80025f2:	0c00      	lsrs	r0, r0, #16
 80025f4:	3910      	subs	r1, #16
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d301      	bcc.n	8002600 <__clzsi2+0x18>
 80025fc:	0a00      	lsrs	r0, r0, #8
 80025fe:	3908      	subs	r1, #8
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0x22>
 8002606:	0900      	lsrs	r0, r0, #4
 8002608:	3904      	subs	r1, #4
 800260a:	a202      	add	r2, pc, #8	; (adr r2, 8002614 <__clzsi2+0x2c>)
 800260c:	5c10      	ldrb	r0, [r2, r0]
 800260e:	1840      	adds	r0, r0, r1
 8002610:	4770      	bx	lr
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	02020304 	.word	0x02020304
 8002618:	01010101 	.word	0x01010101
	...

08002624 <__clzdi2>:
 8002624:	b510      	push	{r4, lr}
 8002626:	2900      	cmp	r1, #0
 8002628:	d103      	bne.n	8002632 <__clzdi2+0xe>
 800262a:	f7ff ffdd 	bl	80025e8 <__clzsi2>
 800262e:	3020      	adds	r0, #32
 8002630:	e002      	b.n	8002638 <__clzdi2+0x14>
 8002632:	0008      	movs	r0, r1
 8002634:	f7ff ffd8 	bl	80025e8 <__clzsi2>
 8002638:	bd10      	pop	{r4, pc}
 800263a:	46c0      	nop			; (mov r8, r8)

0800263c <_write>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USER CODE BEGIN PV */

int _write(int file, char *ptr, int len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	b29a      	uxth	r2, r3
 800264c:	2301      	movs	r3, #1
 800264e:	425b      	negs	r3, r3
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	4804      	ldr	r0, [pc, #16]	; (8002664 <_write+0x28>)
 8002654:	f002 f8e0 	bl	8004818 <HAL_UART_Transmit>
	return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	20000278 	.word	0x20000278

08002668 <sendData>:
uint16_t Data[8];
char buffer[40];
int flag = 1;

void sendData (uint8_t *data)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);  // enable the transmission
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	0219      	lsls	r1, r3, #8
 8002674:	23a0      	movs	r3, #160	; 0xa0
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	2201      	movs	r2, #1
 800267a:	0018      	movs	r0, r3
 800267c:	f001 fa3f 	bl	8003afe <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart4, data, 8, 1000);
 8002680:	23fa      	movs	r3, #250	; 0xfa
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <sendData+0x4c>)
 8002688:	2208      	movs	r2, #8
 800268a:	f002 f8c5 	bl	8004818 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485_DE_GPIO_Port,RS485_DE_Pin , GPIO_PIN_RESET);  // stop the transmission
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	0219      	lsls	r1, r3, #8
 8002692:	23a0      	movs	r3, #160	; 0xa0
 8002694:	05db      	lsls	r3, r3, #23
 8002696:	2200      	movs	r2, #0
 8002698:	0018      	movs	r0, r3
 800269a:	f001 fa30 	bl	8003afe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET); // for led indication
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <sendData+0x50>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0018      	movs	r0, r3
 80026a6:	f001 fa2a 	bl	8003afe <HAL_GPIO_WritePin>
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	200001f0 	.word	0x200001f0
 80026b8:	50000800 	.word	0x50000800

080026bc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	000a      	movs	r2, r1
 80026c6:	1cbb      	adds	r3, r7, #2
 80026c8:	801a      	strh	r2, [r3, #0]
	Data[0] = RxData[3]<<8 | RxData[4];
 80026ca:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 80026d4:	791b      	ldrb	r3, [r3, #4]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21b      	sxth	r3, r3
 80026dc:	b29a      	uxth	r2, r3
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 80026e0:	801a      	strh	r2, [r3, #0]
	Data[1] = RxData[5]<<8 | RxData[6];
 80026e2:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 80026e4:	795b      	ldrb	r3, [r3, #5]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 80026ec:	799b      	ldrb	r3, [r3, #6]
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 80026f8:	805a      	strh	r2, [r3, #2]
	Data[2] = RxData[7]<<8 | RxData[8];
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 80026fc:	79db      	ldrb	r3, [r3, #7]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	b21a      	sxth	r2, r3
 8002702:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002704:	7a1b      	ldrb	r3, [r3, #8]
 8002706:	b21b      	sxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002710:	809a      	strh	r2, [r3, #4]
	Data[3] = RxData[9]<<8 | RxData[10];
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002714:	7a5b      	ldrb	r3, [r3, #9]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b21a      	sxth	r2, r3
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800271c:	7a9b      	ldrb	r3, [r3, #10]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002728:	80da      	strh	r2, [r3, #6]
	Data[4] = RxData[11]<<8 | RxData[12];
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800272c:	7adb      	ldrb	r3, [r3, #11]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002734:	7b1b      	ldrb	r3, [r3, #12]
 8002736:	b21b      	sxth	r3, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	b21b      	sxth	r3, r3
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002740:	811a      	strh	r2, [r3, #8]
	Data[5] = RxData[13]<<8 | RxData[14];
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002744:	7b5b      	ldrb	r3, [r3, #13]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	b21a      	sxth	r2, r3
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800274c:	7b9b      	ldrb	r3, [r3, #14]
 800274e:	b21b      	sxth	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b21b      	sxth	r3, r3
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002758:	815a      	strh	r2, [r3, #10]
	Data[6] = RxData[15]<<8 | RxData[16];
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800275c:	7bdb      	ldrb	r3, [r3, #15]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b21a      	sxth	r2, r3
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002764:	7c1b      	ldrb	r3, [r3, #16]
 8002766:	b21b      	sxth	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b21b      	sxth	r3, r3
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002770:	819a      	strh	r2, [r3, #12]
	Data[7] = RxData[17]<<8 | RxData[18];
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002774:	7c5b      	ldrb	r3, [r3, #17]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800277c:	7c9b      	ldrb	r3, [r3, #18]
 800277e:	b21b      	sxth	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b21b      	sxth	r3, r3
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002788:	81da      	strh	r2, [r3, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_UARTEx_RxEventCallback+0xec>)
 800278c:	2201      	movs	r2, #1
 800278e:	2102      	movs	r1, #2
 8002790:	0018      	movs	r0, r3
 8002792:	f001 f9b4 	bl	8003afe <HAL_GPIO_WritePin>
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b002      	add	sp, #8
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	20000348 	.word	0x20000348
 80027a4:	20000370 	.word	0x20000370
 80027a8:	50000400 	.word	0x50000400

080027ac <Insulation_Monitoring_ON>:

void Insulation_Monitoring_ON (void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	TxData[0] = 0x01;  // slave address
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x06;  // Function code for Read Holding Registers
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027b8:	2206      	movs	r2, #6
 80027ba:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x01;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027be:	2201      	movs	r2, #1
 80027c0:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x02;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027c4:	2202      	movs	r2, #2
 80027c6:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x11;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027d0:	2211      	movs	r2, #17
 80027d2:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0xE9;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027d6:	22e9      	movs	r2, #233	; 0xe9
 80027d8:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0xFA;
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027dc:	22fa      	movs	r2, #250	; 0xfa
 80027de:	71da      	strb	r2, [r3, #7]

	sendData(TxData);
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <Insulation_Monitoring_ON+0x44>)
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7ff ff40 	bl	8002668 <sendData>
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	20000368 	.word	0x20000368

080027f4 <Insulation_Resistance>:

	sendData(TxData);
}

void Insulation_Resistance (void)  // DC voltage measurement
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	TxData[0] = 0x01;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <Insulation_Resistance+0x44>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x03;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <Insulation_Resistance+0x44>)
 8002800:	2203      	movs	r2, #3
 8002802:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <Insulation_Resistance+0x44>)
 8002806:	2200      	movs	r2, #0
 8002808:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x10;
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <Insulation_Resistance+0x44>)
 800280c:	2210      	movs	r2, #16
 800280e:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <Insulation_Resistance+0x44>)
 8002812:	2200      	movs	r2, #0
 8002814:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x04;
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <Insulation_Resistance+0x44>)
 8002818:	2204      	movs	r2, #4
 800281a:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x45;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <Insulation_Resistance+0x44>)
 800281e:	2245      	movs	r2, #69	; 0x45
 8002820:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0xCC;
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <Insulation_Resistance+0x44>)
 8002824:	22cc      	movs	r2, #204	; 0xcc
 8002826:	71da      	strb	r2, [r3, #7]

	sendData(TxData);
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <Insulation_Resistance+0x44>)
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff ff1c 	bl	8002668 <sendData>
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	20000368 	.word	0x20000368

0800283c <Insulation_Monitoring_OFF>:

void Insulation_Monitoring_OFF (void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	TxData[0] = 0x01;
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x06;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 8002848:	2206      	movs	r2, #6
 800284a:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x01;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 800284e:	2201      	movs	r2, #1
 8002850:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x02;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 8002854:	2202      	movs	r2, #2
 8002856:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 800285a:	2200      	movs	r2, #0
 800285c:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 8002860:	2200      	movs	r2, #0
 8002862:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x29;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 8002866:	2229      	movs	r2, #41	; 0x29
 8002868:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0xF6;
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 800286c:	22f6      	movs	r2, #246	; 0xf6
 800286e:	71da      	strb	r2, [r3, #7]

	sendData(TxData);
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <Insulation_Monitoring_OFF+0x44>)
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fef8 	bl	8002668 <sendData>
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000368 	.word	0x20000368

08002884 <Isolation_Monitoring_OFF_BY_EM>:

void Isolation_Monitoring_OFF_BY_EM (void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET)
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <Isolation_Monitoring_OFF_BY_EM+0x30>)
 800288a:	2104      	movs	r1, #4
 800288c:	0018      	movs	r0, r3
 800288e:	f001 f919 	bl	8003ac4 <HAL_GPIO_ReadPin>
 8002892:	0003      	movs	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <Isolation_Monitoring_OFF_BY_EM+0x20>
	{
		Insulation_Monitoring_OFF ();
 8002898:	f7ff ffd0 	bl	800283c <Insulation_Monitoring_OFF>
		HAL_Delay(5);
 800289c:	2005      	movs	r0, #5
 800289e:	f000 fce3 	bl	8003268 <HAL_Delay>
	else
	{
		Insulation_Resistance();
	    HAL_Delay(20);
	}
}
 80028a2:	e004      	b.n	80028ae <Isolation_Monitoring_OFF_BY_EM+0x2a>
		Insulation_Resistance();
 80028a4:	f7ff ffa6 	bl	80027f4 <Insulation_Resistance>
	    HAL_Delay(20);
 80028a8:	2014      	movs	r0, #20
 80028aa:	f000 fcdd 	bl	8003268 <HAL_Delay>
}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	50000800 	.word	0x50000800

080028b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028be:	f000 fc63 	bl	8003188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028c2:	f000 f8bb 	bl	8002a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028c6:	f000 f993 	bl	8002bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 80028ca:	f000 f973 	bl	8002bb4 <MX_DMA_Init>
  MX_USART4_UART_Init();
 80028ce:	f000 f90f 	bl	8002af0 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 80028d2:	f000 f93f 	bl	8002b54 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UARTEx_ReceiveToIdle_IT(&huart4, RxData, 32);
 80028d6:	494d      	ldr	r1, [pc, #308]	; (8002a0c <main+0x154>)
 80028d8:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <main+0x158>)
 80028da:	2220      	movs	r2, #32
 80028dc:	0018      	movs	r0, r3
 80028de:	f003 fb45 	bl	8005f6c <HAL_UARTEx_ReceiveToIdle_IT>
//  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH

//  TxData[6] = 0x39;
//  TxData[7] = 0xFB;  // CRC HIGH // needed to set the baudrate I lost my 1 hour.. keep focus on your work.

    Insulation_Monitoring_ON ();
 80028e2:	f7ff ff63 	bl	80027ac <Insulation_Monitoring_ON>
    HAL_Delay(100);
 80028e6:	2064      	movs	r0, #100	; 0x64
 80028e8:	f000 fcbe 	bl	8003268 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UARTEx_ReceiveToIdle_IT(&huart4, RxData, 32);
 80028ec:	4947      	ldr	r1, [pc, #284]	; (8002a0c <main+0x154>)
 80028ee:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <main+0x158>)
 80028f0:	2220      	movs	r2, #32
 80028f2:	0018      	movs	r0, r3
 80028f4:	f003 fb3a 	bl	8005f6c <HAL_UARTEx_ReceiveToIdle_IT>

	  Isolation_Monitoring_OFF_BY_EM ();
 80028f8:	f7ff ffc4 	bl	8002884 <Isolation_Monitoring_OFF_BY_EM>

	  printf("***** IMD Values *****\n");
 80028fc:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <main+0x15c>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f004 fb46 	bl	8006f90 <puts>
	  printf("\n");
 8002904:	200a      	movs	r0, #10
 8002906:	f004 fae3 	bl	8006ed0 <putchar>
	  uint16_t DC_Voltage = Data[0]; // dc voltage reading
 800290a:	2126      	movs	r1, #38	; 0x26
 800290c:	187b      	adds	r3, r7, r1
 800290e:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <main+0x160>)
 8002910:	8812      	ldrh	r2, [r2, #0]
 8002912:	801a      	strh	r2, [r3, #0]
	  int Value = (int)DC_Voltage;   // Convert hexadecimal to integer
 8002914:	187b      	adds	r3, r7, r1
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	623b      	str	r3, [r7, #32]
	  float floatValue = Value / 10.0;  // Divide by 10 to get float value
 800291a:	6a38      	ldr	r0, [r7, #32]
 800291c:	f7ff fd40 	bl	80023a0 <__aeabi_i2d>
 8002920:	2200      	movs	r2, #0
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <main+0x164>)
 8002924:	f7fe faaa 	bl	8000e7c <__aeabi_ddiv>
 8002928:	0002      	movs	r2, r0
 800292a:	000b      	movs	r3, r1
 800292c:	0010      	movs	r0, r2
 800292e:	0019      	movs	r1, r3
 8002930:	f7ff fdd4 	bl	80024dc <__aeabi_d2f>
 8002934:	1c03      	adds	r3, r0, #0
 8002936:	61fb      	str	r3, [r7, #28]
	  sprintf(buffer, "DC_Voltage: %.2f\r\n", floatValue);
 8002938:	69f8      	ldr	r0, [r7, #28]
 800293a:	f7ff fd87 	bl	800244c <__aeabi_f2d>
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	4937      	ldr	r1, [pc, #220]	; (8002a20 <main+0x168>)
 8002944:	4837      	ldr	r0, [pc, #220]	; (8002a24 <main+0x16c>)
 8002946:	f004 fb2d 	bl	8006fa4 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)buffer, strlen(buffer), 100);  // Send the string over UART
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <main+0x16c>)
 800294c:	0018      	movs	r0, r3
 800294e:	f7fd fbdb 	bl	8000108 <strlen>
 8002952:	0003      	movs	r3, r0
 8002954:	b29a      	uxth	r2, r3
 8002956:	4933      	ldr	r1, [pc, #204]	; (8002a24 <main+0x16c>)
 8002958:	4833      	ldr	r0, [pc, #204]	; (8002a28 <main+0x170>)
 800295a:	2364      	movs	r3, #100	; 0x64
 800295c:	f001 ff5c 	bl	8004818 <HAL_UART_Transmit>

	  uint16_t Tot_Insulation_resistance = Data[1]; // total insulation resistance
 8002960:	211a      	movs	r1, #26
 8002962:	187b      	adds	r3, r7, r1
 8002964:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <main+0x160>)
 8002966:	8852      	ldrh	r2, [r2, #2]
 8002968:	801a      	strh	r2, [r3, #0]
	  int Value1 = (int)Tot_Insulation_resistance;   // Convert hexadecimal to integer
 800296a:	187b      	adds	r3, r7, r1
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	617b      	str	r3, [r7, #20]
	  sprintf(buffer, "Tot_Insulation_resistance: %d\r\n", Value1);
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	492e      	ldr	r1, [pc, #184]	; (8002a2c <main+0x174>)
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <main+0x16c>)
 8002976:	0018      	movs	r0, r3
 8002978:	f004 fb14 	bl	8006fa4 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)buffer, strlen(buffer), 100);  // Send the string over UART
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <main+0x16c>)
 800297e:	0018      	movs	r0, r3
 8002980:	f7fd fbc2 	bl	8000108 <strlen>
 8002984:	0003      	movs	r3, r0
 8002986:	b29a      	uxth	r2, r3
 8002988:	4926      	ldr	r1, [pc, #152]	; (8002a24 <main+0x16c>)
 800298a:	4827      	ldr	r0, [pc, #156]	; (8002a28 <main+0x170>)
 800298c:	2364      	movs	r3, #100	; 0x64
 800298e:	f001 ff43 	bl	8004818 <HAL_UART_Transmit>

	  uint16_t PosBus_Insulation_resistance = Data[2]; // Positive Bus insulation resistance
 8002992:	2112      	movs	r1, #18
 8002994:	187b      	adds	r3, r7, r1
 8002996:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <main+0x160>)
 8002998:	8892      	ldrh	r2, [r2, #4]
 800299a:	801a      	strh	r2, [r3, #0]
	  int Value2 = (int)PosBus_Insulation_resistance;   // Convert hexadecimal to integer
 800299c:	187b      	adds	r3, r7, r1
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
	  sprintf(buffer, "PosBus_Insulation_resistance: %d\r\n", Value2);
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4922      	ldr	r1, [pc, #136]	; (8002a30 <main+0x178>)
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <main+0x16c>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f004 fafb 	bl	8006fa4 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)buffer, strlen(buffer), 100);  // Send the string over UART
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <main+0x16c>)
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7fd fba9 	bl	8000108 <strlen>
 80029b6:	0003      	movs	r3, r0
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	491a      	ldr	r1, [pc, #104]	; (8002a24 <main+0x16c>)
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <main+0x170>)
 80029be:	2364      	movs	r3, #100	; 0x64
 80029c0:	f001 ff2a 	bl	8004818 <HAL_UART_Transmit>

	  uint16_t NegBus_Insulation_resistance = Data[3]; // Negative Bus insulation resistance
 80029c4:	210a      	movs	r1, #10
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <main+0x160>)
 80029ca:	88d2      	ldrh	r2, [r2, #6]
 80029cc:	801a      	strh	r2, [r3, #0]
	  int Value3 = (int)NegBus_Insulation_resistance;   // Convert hexadecimal to integer
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	607b      	str	r3, [r7, #4]
	  sprintf(buffer, "NegBus_Insulation_resistance: %d\r\n", Value3);
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4917      	ldr	r1, [pc, #92]	; (8002a34 <main+0x17c>)
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <main+0x16c>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f004 fae2 	bl	8006fa4 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)buffer, strlen(buffer), 100);  // Send the string over UART
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <main+0x16c>)
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fd fb90 	bl	8000108 <strlen>
 80029e8:	0003      	movs	r3, r0
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	490d      	ldr	r1, [pc, #52]	; (8002a24 <main+0x16c>)
 80029ee:	480e      	ldr	r0, [pc, #56]	; (8002a28 <main+0x170>)
 80029f0:	2364      	movs	r3, #100	; 0x64
 80029f2:	f001 ff11 	bl	8004818 <HAL_UART_Transmit>
	  printf("\n\n\n");
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <main+0x180>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f004 fac9 	bl	8006f90 <puts>

	  HAL_Delay(1000);
 80029fe:	23fa      	movs	r3, #250	; 0xfa
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fc30 	bl	8003268 <HAL_Delay>
  {
 8002a08:	e770      	b.n	80028ec <main+0x34>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000348 	.word	0x20000348
 8002a10:	200001f0 	.word	0x200001f0
 8002a14:	0800aab8 	.word	0x0800aab8
 8002a18:	20000370 	.word	0x20000370
 8002a1c:	40240000 	.word	0x40240000
 8002a20:	0800aad0 	.word	0x0800aad0
 8002a24:	20000380 	.word	0x20000380
 8002a28:	20000278 	.word	0x20000278
 8002a2c:	0800aae4 	.word	0x0800aae4
 8002a30:	0800ab04 	.word	0x0800ab04
 8002a34:	0800ab28 	.word	0x0800ab28
 8002a38:	0800ab4c 	.word	0x0800ab4c

08002a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b095      	sub	sp, #84	; 0x54
 8002a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a42:	2418      	movs	r4, #24
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	0018      	movs	r0, r3
 8002a48:	2338      	movs	r3, #56	; 0x38
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f004 fbbb 	bl	80071c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	0018      	movs	r0, r3
 8002a56:	2314      	movs	r3, #20
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f004 fbb4 	bl	80071c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <SystemClock_Config+0xac>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a21      	ldr	r2, [pc, #132]	; (8002aec <SystemClock_Config+0xb0>)
 8002a66:	401a      	ands	r2, r3
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <SystemClock_Config+0xac>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0109      	lsls	r1, r1, #4
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a72:	0021      	movs	r1, r4
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	0252      	lsls	r2, r2, #9
 8002a80:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	2202      	movs	r2, #2
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	0252      	lsls	r2, r2, #9
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	02d2      	lsls	r2, r2, #11
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	03d2      	lsls	r2, r2, #15
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f001 f86e 	bl	8003b84 <HAL_RCC_OscConfig>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d001      	beq.n	8002ab0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002aac:	f000 f966 	bl	8002d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2203      	movs	r2, #3
 8002aba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f001 fc2a 	bl	800432c <HAL_RCC_ClockConfig>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002adc:	f000 f94e 	bl	8002d7c <Error_Handler>
  }
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b015      	add	sp, #84	; 0x54
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	ffffe7ff 	.word	0xffffe7ff

08002af0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <MX_USART4_UART_Init+0x60>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002afc:	2296      	movs	r2, #150	; 0x96
 8002afe:	0192      	lsls	r2, r2, #6
 8002b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <MX_USART4_UART_Init+0x5c>)
 8002b34:	2300      	movs	r3, #0
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f003 f99f 	bl	8005e7c <HAL_RS485Ex_Init>
 8002b3e:	1e03      	subs	r3, r0, #0
 8002b40:	d001      	beq.n	8002b46 <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 8002b42:	f000 f91b 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200001f0 	.word	0x200001f0
 8002b50:	40004c00 	.word	0x40004c00

08002b54 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <MX_USART5_UART_Init+0x5c>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b60:	22e1      	movs	r2, #225	; 0xe1
 8002b62:	0252      	lsls	r2, r2, #9
 8002b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <MX_USART5_UART_Init+0x58>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f001 fde9 	bl	8004770 <HAL_UART_Init>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8002ba2:	f000 f8eb 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000278 	.word	0x20000278
 8002bb0:	40005000 	.word	0x40005000

08002bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MX_DMA_Init+0x38>)
 8002bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <MX_DMA_Init+0x38>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <MX_DMA_Init+0x38>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	200a      	movs	r0, #10
 8002bd8:	f000 fc16 	bl	8003408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f000 fc28 	bl	8003432 <HAL_NVIC_EnableIRQ>

}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b002      	add	sp, #8
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40021000 	.word	0x40021000

08002bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b08b      	sub	sp, #44	; 0x2c
 8002bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf6:	2414      	movs	r4, #20
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	2314      	movs	r3, #20
 8002bfe:	001a      	movs	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f004 fae1 	bl	80071c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c06:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	4b58      	ldr	r3, [pc, #352]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c12:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c1e:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c22:	4b52      	ldr	r3, [pc, #328]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c2a:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	2202      	movs	r2, #2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c54:	2110      	movs	r1, #16
 8002c56:	430a      	orrs	r2, r1
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c5a:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	2210      	movs	r2, #16
 8002c60:	4013      	ands	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6a:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <MX_GPIO_Init+0x17c>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <MX_GPIO_Init+0x180>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	2106      	movs	r1, #6
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 ff3a 	bl	8003afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <MX_GPIO_Init+0x184>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 ff34 	bl	8003afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8002c96:	23e0      	movs	r3, #224	; 0xe0
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4837      	ldr	r0, [pc, #220]	; (8002d78 <MX_GPIO_Init+0x188>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	f000 ff2d 	bl	8003afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	0192      	lsls	r2, r2, #6
 8002caa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2288      	movs	r2, #136	; 0x88
 8002cb0:	0352      	lsls	r2, r2, #13
 8002cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <MX_GPIO_Init+0x188>)
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	f000 fd81 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2204      	movs	r2, #4
 8002cca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <MX_GPIO_Init+0x188>)
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f000 fd72 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2206      	movs	r2, #6
 8002ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2201      	movs	r2, #1
 8002cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <MX_GPIO_Init+0x180>)
 8002d00:	0019      	movs	r1, r3
 8002d02:	0010      	movs	r0, r2
 8002d04:	f000 fd60 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	2201      	movs	r2, #1
 8002d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <MX_GPIO_Init+0x184>)
 8002d24:	0019      	movs	r1, r3
 8002d26:	0010      	movs	r0, r2
 8002d28:	f000 fd4e 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	22e0      	movs	r2, #224	; 0xe0
 8002d32:	0052      	lsls	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2201      	movs	r2, #1
 8002d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <MX_GPIO_Init+0x188>)
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	0010      	movs	r0, r2
 8002d50:	f000 fd3a 	bl	80037c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	2007      	movs	r0, #7
 8002d5a:	f000 fb55 	bl	8003408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002d5e:	2007      	movs	r0, #7
 8002d60:	f000 fb67 	bl	8003432 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b00b      	add	sp, #44	; 0x2c
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	50000400 	.word	0x50000400
 8002d74:	50001000 	.word	0x50001000
 8002d78:	50000800 	.word	0x50000800

08002d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d80:	b672      	cpsid	i
}
 8002d82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <Error_Handler+0x8>
	...

08002d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_MspInit+0x24>)
 8002d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_MspInit+0x24>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_MspInit+0x24>)
 8002d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_MspInit+0x24>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0549      	lsls	r1, r1, #21
 8002da2:	430a      	orrs	r2, r1
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b08b      	sub	sp, #44	; 0x2c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	2414      	movs	r4, #20
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	2314      	movs	r3, #20
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f004 fa00 	bl	80071c8 <memset>
  if(huart->Instance==USART4)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_UART_MspInit+0x198>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d000      	beq.n	8002dd4 <HAL_UART_MspInit+0x24>
 8002dd2:	e07e      	b.n	8002ed2 <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 8002dd4:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd8:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0309      	lsls	r1, r1, #12
 8002dde:	430a      	orrs	r2, r1
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002de8:	2101      	movs	r1, #1
 8002dea:	430a      	orrs	r2, r1
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2201      	movs	r2, #1
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfa:	4b54      	ldr	r3, [pc, #336]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002e00:	2104      	movs	r1, #4
 8002e02:	430a      	orrs	r2, r1
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /**USART4 GPIO Configuration
    PA15     ------> USART4_DE
    PC10     ------> USART4_TX
    PC11     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = RS485_DE_Pin;
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	0212      	lsls	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	2203      	movs	r2, #3
 8002e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	2206      	movs	r2, #6
 8002e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 8002e32:	193a      	adds	r2, r7, r4
 8002e34:	23a0      	movs	r3, #160	; 0xa0
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 fcc4 	bl	80037c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8002e40:	0021      	movs	r1, r4
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	22c0      	movs	r2, #192	; 0xc0
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2206      	movs	r2, #6
 8002e60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	4a3a      	ldr	r2, [pc, #232]	; (8002f50 <HAL_UART_MspInit+0x1a0>)
 8002e66:	0019      	movs	r1, r3
 8002e68:	0010      	movs	r0, r2
 8002e6a:	f000 fcad 	bl	80037c8 <HAL_GPIO_Init>

    /* USART4 DMA Init */
    /* USART4_RX Init */
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e70:	4a39      	ldr	r2, [pc, #228]	; (8002f58 <HAL_UART_MspInit+0x1a8>)
 8002e72:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8002e74:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e76:	220c      	movs	r2, #12
 8002e78:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7a:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e86:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e92:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8002e98:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fae0 	bl	800346c <HAL_DMA_Init>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002eb0:	f7ff ff64 	bl	8002d7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002eb8:	675a      	str	r2, [r3, #116]	; 0x74
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_UART_MspInit+0x1a4>)
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART4 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	200e      	movs	r0, #14
 8002ec6:	f000 fa9f 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002eca:	200e      	movs	r0, #14
 8002ecc:	f000 fab1 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8002ed0:	e035      	b.n	8002f3e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART5)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_UART_MspInit+0x1ac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d130      	bne.n	8002f3e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART5_CLK_ENABLE();
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	0349      	lsls	r1, r1, #13
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_UART_MspInit+0x19c>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	2202      	movs	r2, #2
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002f02:	2114      	movs	r1, #20
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2218      	movs	r2, #24
 8002f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2206      	movs	r2, #6
 8002f20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_UART_MspInit+0x1b0>)
 8002f26:	0019      	movs	r1, r3
 8002f28:	0010      	movs	r0, r2
 8002f2a:	f000 fc4d 	bl	80037c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	200e      	movs	r0, #14
 8002f34:	f000 fa68 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002f38:	200e      	movs	r0, #14
 8002f3a:	f000 fa7a 	bl	8003432 <HAL_NVIC_EnableIRQ>
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b00b      	add	sp, #44	; 0x2c
 8002f44:	bd90      	pop	{r4, r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	40004c00 	.word	0x40004c00
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	50000800 	.word	0x50000800
 8002f54:	20000300 	.word	0x20000300
 8002f58:	4002001c 	.word	0x4002001c
 8002f5c:	40005000 	.word	0x40005000
 8002f60:	50000400 	.word	0x50000400

08002f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <NMI_Handler+0x4>

08002f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <HardFault_Handler+0x4>

08002f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f88:	f000 f952 	bl	8003230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fdcc 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <DMA1_Channel2_3_IRQHandler+0x14>)
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fb5b 	bl	800366a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000300 	.word	0x20000300

08002fc0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <USART4_5_IRQHandler+0x1c>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 fcc6 	bl	8004958 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <USART4_5_IRQHandler+0x20>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f001 fcc2 	bl	8004958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	200001f0 	.word	0x200001f0
 8002fe0:	20000278 	.word	0x20000278

08002fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  return 1;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_kill>:

int _kill(int pid, int sig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ffa:	f004 f93f 	bl	800727c <__errno>
 8002ffe:	0003      	movs	r3, r0
 8003000:	2216      	movs	r2, #22
 8003002:	601a      	str	r2, [r3, #0]
  return -1;
 8003004:	2301      	movs	r3, #1
 8003006:	425b      	negs	r3, r3
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <_exit>:

void _exit (int status)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003018:	2301      	movs	r3, #1
 800301a:	425a      	negs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ffe5 	bl	8002ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003026:	e7fe      	b.n	8003026 <_exit+0x16>

08003028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e00a      	b.n	8003050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800303a:	e000      	b.n	800303e <_read+0x16>
 800303c:	bf00      	nop
 800303e:	0001      	movs	r1, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	60ba      	str	r2, [r7, #8]
 8003046:	b2ca      	uxtb	r2, r1
 8003048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	dbf0      	blt.n	800303a <_read+0x12>
  }

  return len;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b006      	add	sp, #24
 8003060:	bd80      	pop	{r7, pc}

08003062 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800306a:	2301      	movs	r3, #1
 800306c:	425b      	negs	r3, r3
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}

08003076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0192      	lsls	r2, r2, #6
 8003086:	605a      	str	r2, [r3, #4]
  return 0;
 8003088:	2300      	movs	r3, #0
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}

08003092 <_isatty>:

int _isatty(int file)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800309a:	2301      	movs	r3, #1
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <_sbrk+0x5c>)
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <_sbrk+0x60>)
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <_sbrk+0x64>)
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <_sbrk+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	18d3      	adds	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ec:	f004 f8c6 	bl	800727c <__errno>
 80030f0:	0003      	movs	r3, r0
 80030f2:	220c      	movs	r2, #12
 80030f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	425b      	negs	r3, r3
 80030fa:	e009      	b.n	8003110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	18d2      	adds	r2, r2, r3
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <_sbrk+0x64>)
 800310c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b006      	add	sp, #24
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20005000 	.word	0x20005000
 800311c:	00000400 	.word	0x00000400
 8003120:	200003a8 	.word	0x200003a8
 8003124:	20000500 	.word	0x20000500

08003128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003136:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003138:	f7ff fff6 	bl	8003128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800313c:	480c      	ldr	r0, [pc, #48]	; (8003170 <LoopForever+0x6>)
  ldr r1, =_edata
 800313e:	490d      	ldr	r1, [pc, #52]	; (8003174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <LoopForever+0xe>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003144:	e002      	b.n	800314c <LoopCopyDataInit>

08003146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314a:	3304      	adds	r3, #4

0800314c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800314c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003150:	d3f9      	bcc.n	8003146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003154:	4c0a      	ldr	r4, [pc, #40]	; (8003180 <LoopForever+0x16>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003158:	e001      	b.n	800315e <LoopFillZerobss>

0800315a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800315c:	3204      	adds	r2, #4

0800315e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003160:	d3fb      	bcc.n	800315a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003162:	f004 f891 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003166:	f7ff fba7 	bl	80028b8 <main>

0800316a <LoopForever>:

LoopForever:
    b LoopForever
 800316a:	e7fe      	b.n	800316a <LoopForever>
   ldr   r0, =_estack
 800316c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003174:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003178:	0800b038 	.word	0x0800b038
  ldr r2, =_sbss
 800317c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003180:	200004fc 	.word	0x200004fc

08003184 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003184:	e7fe      	b.n	8003184 <ADC1_COMP_IRQHandler>
	...

08003188 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_Init+0x3c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_Init+0x3c>)
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031a0:	2003      	movs	r0, #3
 80031a2:	f000 f811 	bl	80031c8 <HAL_InitTick>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e001      	b.n	80031b6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031b2:	f7ff fde9 	bl	8002d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	781b      	ldrb	r3, [r3, #0]
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	40022000 	.word	0x40022000

080031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_InitTick+0x5c>)
 80031d2:	681c      	ldr	r4, [r3, #0]
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_InitTick+0x60>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	0019      	movs	r1, r3
 80031da:	23fa      	movs	r3, #250	; 0xfa
 80031dc:	0098      	lsls	r0, r3, #2
 80031de:	f7fc ffaf 	bl	8000140 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	0019      	movs	r1, r3
 80031e6:	0020      	movs	r0, r4
 80031e8:	f7fc ffaa 	bl	8000140 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f92f 	bl	8003452 <HAL_SYSTICK_Config>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e00f      	b.n	800321c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d80b      	bhi.n	800321a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	2301      	movs	r3, #1
 8003206:	425b      	negs	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	0018      	movs	r0, r3
 800320c:	f000 f8fc 	bl	8003408 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_InitTick+0x64>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b003      	add	sp, #12
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	20000000 	.word	0x20000000
 8003228:	20000008 	.word	0x20000008
 800322c:	20000004 	.word	0x20000004

08003230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_IncTick+0x1c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	001a      	movs	r2, r3
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_IncTick+0x20>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	18d2      	adds	r2, r2, r3
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_IncTick+0x20>)
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000008 	.word	0x20000008
 8003250:	200003ac 	.word	0x200003ac

08003254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  return uwTick;
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <HAL_GetTick+0x10>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	200003ac 	.word	0x200003ac

08003268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff fff0 	bl	8003254 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_Delay+0x44>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	001a      	movs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	189b      	adds	r3, r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	f7ff ffe0 	bl	8003254 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d8f7      	bhi.n	8003290 <HAL_Delay+0x28>
  {
  }
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000008 	.word	0x20000008

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	0002      	movs	r2, r0
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b7f      	cmp	r3, #127	; 0x7f
 80032c2:	d809      	bhi.n	80032d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	001a      	movs	r2, r3
 80032ca:	231f      	movs	r3, #31
 80032cc:	401a      	ands	r2, r3
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <__NVIC_EnableIRQ+0x30>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	4091      	lsls	r1, r2
 80032d4:	000a      	movs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
  }
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	0002      	movs	r2, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b7f      	cmp	r3, #127	; 0x7f
 80032f8:	d828      	bhi.n	800334c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <__NVIC_SetPriority+0xd4>)
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	33c0      	adds	r3, #192	; 0xc0
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	589b      	ldr	r3, [r3, r2]
 800330a:	1dfa      	adds	r2, r7, #7
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	0011      	movs	r1, r2
 8003310:	2203      	movs	r2, #3
 8003312:	400a      	ands	r2, r1
 8003314:	00d2      	lsls	r2, r2, #3
 8003316:	21ff      	movs	r1, #255	; 0xff
 8003318:	4091      	lsls	r1, r2
 800331a:	000a      	movs	r2, r1
 800331c:	43d2      	mvns	r2, r2
 800331e:	401a      	ands	r2, r3
 8003320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	401a      	ands	r2, r3
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	2303      	movs	r3, #3
 8003332:	4003      	ands	r3, r0
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	481f      	ldr	r0, [pc, #124]	; (80033b8 <__NVIC_SetPriority+0xd4>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b25b      	sxtb	r3, r3
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	430a      	orrs	r2, r1
 8003344:	33c0      	adds	r3, #192	; 0xc0
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800334a:	e031      	b.n	80033b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <__NVIC_SetPriority+0xd8>)
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0019      	movs	r1, r3
 8003354:	230f      	movs	r3, #15
 8003356:	400b      	ands	r3, r1
 8003358:	3b08      	subs	r3, #8
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3306      	adds	r3, #6
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	3304      	adds	r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1dfa      	adds	r2, r7, #7
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	0011      	movs	r1, r2
 800336c:	2203      	movs	r2, #3
 800336e:	400a      	ands	r2, r1
 8003370:	00d2      	lsls	r2, r2, #3
 8003372:	21ff      	movs	r1, #255	; 0xff
 8003374:	4091      	lsls	r1, r2
 8003376:	000a      	movs	r2, r1
 8003378:	43d2      	mvns	r2, r2
 800337a:	401a      	ands	r2, r3
 800337c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	22ff      	movs	r2, #255	; 0xff
 8003384:	401a      	ands	r2, r3
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	2303      	movs	r3, #3
 800338e:	4003      	ands	r3, r0
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4809      	ldr	r0, [pc, #36]	; (80033bc <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	001c      	movs	r4, r3
 800339c:	230f      	movs	r3, #15
 800339e:	4023      	ands	r3, r4
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	430a      	orrs	r2, r1
 80033a6:	3306      	adds	r3, #6
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	18c3      	adds	r3, r0, r3
 80033ac:	3304      	adds	r3, #4
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b003      	add	sp, #12
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	045b      	lsls	r3, r3, #17
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d301      	bcc.n	80033d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d4:	2301      	movs	r3, #1
 80033d6:	e010      	b.n	80033fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <SysTick_Config+0x44>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	3a01      	subs	r2, #1
 80033de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e0:	2301      	movs	r3, #1
 80033e2:	425b      	negs	r3, r3
 80033e4:	2103      	movs	r1, #3
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff ff7c 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <SysTick_Config+0x44>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <SysTick_Config+0x44>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	e000e010 	.word	0xe000e010

08003408 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	210f      	movs	r1, #15
 8003414:	187b      	adds	r3, r7, r1
 8003416:	1c02      	adds	r2, r0, #0
 8003418:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	187b      	adds	r3, r7, r1
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ff5d 	bl	80032e4 <__NVIC_SetPriority>
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b004      	add	sp, #16
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	0002      	movs	r2, r0
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b25b      	sxtb	r3, r3
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff ff33 	bl	80032b0 <__NVIC_EnableIRQ>
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b002      	add	sp, #8
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff ffaf 	bl	80033c0 <SysTick_Config>
 8003462:	0003      	movs	r3, r0
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e061      	b.n	8003542 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a32      	ldr	r2, [pc, #200]	; (800354c <HAL_DMA_Init+0xe0>)
 8003484:	4694      	mov	ip, r2
 8003486:	4463      	add	r3, ip
 8003488:	2114      	movs	r1, #20
 800348a:	0018      	movs	r0, r3
 800348c:	f7fc fe58 	bl	8000140 <__udivsi3>
 8003490:	0003      	movs	r3, r0
 8003492:	009a      	lsls	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_DMA_Init+0xe4>)
 800349c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2225      	movs	r2, #37	; 0x25
 80034a2:	2102      	movs	r1, #2
 80034a4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a28      	ldr	r2, [pc, #160]	; (8003554 <HAL_DMA_Init+0xe8>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	01db      	lsls	r3, r3, #7
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d018      	beq.n	800352a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034f8:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_DMA_Init+0xec>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	211c      	movs	r1, #28
 8003502:	400b      	ands	r3, r1
 8003504:	210f      	movs	r1, #15
 8003506:	4099      	lsls	r1, r3
 8003508:	000b      	movs	r3, r1
 800350a:	43d9      	mvns	r1, r3
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_DMA_Init+0xec>)
 800350e:	400a      	ands	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_DMA_Init+0xec>)
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	201c      	movs	r0, #28
 8003520:	4003      	ands	r3, r0
 8003522:	409a      	lsls	r2, r3
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_DMA_Init+0xec>)
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2225      	movs	r2, #37	; 0x25
 8003534:	2101      	movs	r1, #1
 8003536:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	2100      	movs	r1, #0
 800353e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	bffdfff8 	.word	0xbffdfff8
 8003550:	40020000 	.word	0x40020000
 8003554:	ffff800f 	.word	0xffff800f
 8003558:	400200a8 	.word	0x400200a8

0800355c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	230f      	movs	r3, #15
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2225      	movs	r2, #37	; 0x25
 8003570:	5c9b      	ldrb	r3, [r3, r2]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d008      	beq.n	800358a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2204      	movs	r2, #4
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2224      	movs	r2, #36	; 0x24
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e024      	b.n	80035d4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	210e      	movs	r1, #14
 8003596:	438a      	bics	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	438a      	bics	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	221c      	movs	r2, #28
 80035b0:	401a      	ands	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2101      	movs	r1, #1
 80035b8:	4091      	lsls	r1, r2
 80035ba:	000a      	movs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2225      	movs	r2, #37	; 0x25
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2224      	movs	r2, #36	; 0x24
 80035ca:	2100      	movs	r1, #0
 80035cc:	5499      	strb	r1, [r3, r2]

    return status;
 80035ce:	230f      	movs	r3, #15
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	210f      	movs	r1, #15
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2225      	movs	r2, #37	; 0x25
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d006      	beq.n	8003606 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2204      	movs	r2, #4
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e02a      	b.n	800365c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	210e      	movs	r1, #14
 8003612:	438a      	bics	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	438a      	bics	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	221c      	movs	r2, #28
 800362c:	401a      	ands	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2101      	movs	r1, #1
 8003634:	4091      	lsls	r1, r2
 8003636:	000a      	movs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2225      	movs	r2, #37	; 0x25
 800363e:	2101      	movs	r1, #1
 8003640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2224      	movs	r2, #36	; 0x24
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	0010      	movs	r0, r2
 800365a:	4798      	blx	r3
    }
  }
  return status;
 800365c:	230f      	movs	r3, #15
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	781b      	ldrb	r3, [r3, #0]
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	221c      	movs	r2, #28
 8003688:	4013      	ands	r3, r2
 800368a:	2204      	movs	r2, #4
 800368c:	409a      	lsls	r2, r3
 800368e:	0013      	movs	r3, r2
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	d026      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x7a>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2204      	movs	r2, #4
 800369a:	4013      	ands	r3, r2
 800369c:	d022      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	d107      	bne.n	80036ba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2104      	movs	r1, #4
 80036b6:	438a      	bics	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	221c      	movs	r2, #28
 80036c0:	401a      	ands	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2104      	movs	r1, #4
 80036c8:	4091      	lsls	r1, r2
 80036ca:	000a      	movs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d100      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x6e>
 80036d6:	e071      	b.n	80037bc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	0010      	movs	r0, r2
 80036e0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80036e2:	e06b      	b.n	80037bc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	221c      	movs	r2, #28
 80036ea:	4013      	ands	r3, r2
 80036ec:	2202      	movs	r2, #2
 80036ee:	409a      	lsls	r2, r3
 80036f0:	0013      	movs	r3, r2
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	d02d      	beq.n	8003754 <HAL_DMA_IRQHandler+0xea>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d029      	beq.n	8003754 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	d10b      	bne.n	8003724 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	210a      	movs	r1, #10
 8003718:	438a      	bics	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2225      	movs	r2, #37	; 0x25
 8003720:	2101      	movs	r1, #1
 8003722:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	221c      	movs	r2, #28
 800372a:	401a      	ands	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2102      	movs	r1, #2
 8003732:	4091      	lsls	r1, r2
 8003734:	000a      	movs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d039      	beq.n	80037bc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	0010      	movs	r0, r2
 8003750:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003752:	e033      	b.n	80037bc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	221c      	movs	r2, #28
 800375a:	4013      	ands	r3, r2
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	0013      	movs	r3, r2
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4013      	ands	r3, r2
 8003766:	d02a      	beq.n	80037be <HAL_DMA_IRQHandler+0x154>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2208      	movs	r2, #8
 800376c:	4013      	ands	r3, r2
 800376e:	d026      	beq.n	80037be <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	210e      	movs	r1, #14
 800377c:	438a      	bics	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	221c      	movs	r2, #28
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2101      	movs	r1, #1
 800378e:	4091      	lsls	r1, r2
 8003790:	000a      	movs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2225      	movs	r2, #37	; 0x25
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2224      	movs	r2, #36	; 0x24
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	0010      	movs	r0, r2
 80037ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46c0      	nop			; (mov r8, r8)
}
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80037de:	e155      	b.n	8003a8c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4091      	lsls	r1, r2
 80037ea:	000a      	movs	r2, r1
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d100      	bne.n	80037f8 <HAL_GPIO_Init+0x30>
 80037f6:	e146      	b.n	8003a86 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	4013      	ands	r3, r2
 8003800:	2b01      	cmp	r3, #1
 8003802:	d005      	beq.n	8003810 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2203      	movs	r2, #3
 800380a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800380c:	2b02      	cmp	r3, #2
 800380e:	d130      	bne.n	8003872 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	409a      	lsls	r2, r3
 800381e:	0013      	movs	r3, r2
 8003820:	43da      	mvns	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	0013      	movs	r3, r2
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003846:	2201      	movs	r2, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	43da      	mvns	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	2201      	movs	r2, #1
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
 8003864:	0013      	movs	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2203      	movs	r2, #3
 8003878:	4013      	ands	r3, r2
 800387a:	2b03      	cmp	r3, #3
 800387c:	d017      	beq.n	80038ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	409a      	lsls	r2, r3
 800388c:	0013      	movs	r3, r2
 800388e:	43da      	mvns	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	0013      	movs	r3, r2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2203      	movs	r2, #3
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d123      	bne.n	8003902 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	58d3      	ldr	r3, [r2, r3]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2207      	movs	r2, #7
 80038cc:	4013      	ands	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	409a      	lsls	r2, r3
 80038d4:	0013      	movs	r3, r2
 80038d6:	43da      	mvns	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2107      	movs	r1, #7
 80038e6:	400b      	ands	r3, r1
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	409a      	lsls	r2, r3
 80038ec:	0013      	movs	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	6939      	ldr	r1, [r7, #16]
 8003900:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	409a      	lsls	r2, r3
 8003910:	0013      	movs	r3, r2
 8003912:	43da      	mvns	r2, r3
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	401a      	ands	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	409a      	lsls	r2, r3
 8003928:	0013      	movs	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	23c0      	movs	r3, #192	; 0xc0
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	4013      	ands	r3, r2
 8003940:	d100      	bne.n	8003944 <HAL_GPIO_Init+0x17c>
 8003942:	e0a0      	b.n	8003a86 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003944:	4b57      	ldr	r3, [pc, #348]	; (8003aa4 <HAL_GPIO_Init+0x2dc>)
 8003946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003948:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <HAL_GPIO_Init+0x2dc>)
 800394a:	2101      	movs	r1, #1
 800394c:	430a      	orrs	r2, r1
 800394e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003950:	4a55      	ldr	r2, [pc, #340]	; (8003aa8 <HAL_GPIO_Init+0x2e0>)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	3302      	adds	r3, #2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	589b      	ldr	r3, [r3, r2]
 800395c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2203      	movs	r2, #3
 8003962:	4013      	ands	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	220f      	movs	r2, #15
 8003968:	409a      	lsls	r2, r3
 800396a:	0013      	movs	r3, r2
 800396c:	43da      	mvns	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	23a0      	movs	r3, #160	; 0xa0
 8003978:	05db      	lsls	r3, r3, #23
 800397a:	429a      	cmp	r2, r3
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x1f6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4a      	ldr	r2, [pc, #296]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x1f2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a49      	ldr	r2, [pc, #292]	; (8003ab0 <HAL_GPIO_Init+0x2e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x1ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a48      	ldr	r2, [pc, #288]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x1ea>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a47      	ldr	r2, [pc, #284]	; (8003ab8 <HAL_GPIO_Init+0x2f0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x1e6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a46      	ldr	r2, [pc, #280]	; (8003abc <HAL_GPIO_Init+0x2f4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x1e2>
 80039a6:	2305      	movs	r3, #5
 80039a8:	e00a      	b.n	80039c0 <HAL_GPIO_Init+0x1f8>
 80039aa:	2306      	movs	r3, #6
 80039ac:	e008      	b.n	80039c0 <HAL_GPIO_Init+0x1f8>
 80039ae:	2304      	movs	r3, #4
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x1f8>
 80039b2:	2303      	movs	r3, #3
 80039b4:	e004      	b.n	80039c0 <HAL_GPIO_Init+0x1f8>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e002      	b.n	80039c0 <HAL_GPIO_Init+0x1f8>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_GPIO_Init+0x1f8>
 80039be:	2300      	movs	r3, #0
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	2103      	movs	r1, #3
 80039c4:	400a      	ands	r2, r1
 80039c6:	0092      	lsls	r2, r2, #2
 80039c8:	4093      	lsls	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d0:	4935      	ldr	r1, [pc, #212]	; (8003aa8 <HAL_GPIO_Init+0x2e0>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	035b      	lsls	r3, r3, #13
 80039f6:	4013      	ands	r3, r2
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a02:	4b2f      	ldr	r3, [pc, #188]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	039b      	lsls	r3, r3, #14
 8003a20:	4013      	ands	r3, r2
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a2c:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43da      	mvns	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	4013      	ands	r3, r2
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	40da      	lsrs	r2, r3
 8003a94:	1e13      	subs	r3, r2, #0
 8003a96:	d000      	beq.n	8003a9a <HAL_GPIO_Init+0x2d2>
 8003a98:	e6a2      	b.n	80037e0 <HAL_GPIO_Init+0x18>
  }
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b006      	add	sp, #24
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	50000400 	.word	0x50000400
 8003ab0:	50000800 	.word	0x50000800
 8003ab4:	50000c00 	.word	0x50000c00
 8003ab8:	50001000 	.word	0x50001000
 8003abc:	50001c00 	.word	0x50001c00
 8003ac0:	40010400 	.word	0x40010400

08003ac4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	000a      	movs	r2, r1
 8003ace:	1cbb      	adds	r3, r7, #2
 8003ad0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	1cba      	adds	r2, r7, #2
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	4013      	ands	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ade:	230f      	movs	r3, #15
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e003      	b.n	8003af0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae8:	230f      	movs	r3, #15
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003af0:	230f      	movs	r3, #15
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b004      	add	sp, #16
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	0008      	movs	r0, r1
 8003b08:	0011      	movs	r1, r2
 8003b0a:	1cbb      	adds	r3, r7, #2
 8003b0c:	1c02      	adds	r2, r0, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	1c7b      	adds	r3, r7, #1
 8003b12:	1c0a      	adds	r2, r1, #0
 8003b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b16:	1c7b      	adds	r3, r7, #1
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1e:	1cbb      	adds	r3, r7, #2
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003b26:	e003      	b.n	8003b30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003b28:	1cbb      	adds	r3, r7, #2
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	0002      	movs	r2, r0
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	1dba      	adds	r2, r7, #6
 8003b4a:	8812      	ldrh	r2, [r2, #0]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d008      	beq.n	8003b62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003b52:	1dba      	adds	r2, r7, #6
 8003b54:	8812      	ldrh	r2, [r2, #0]
 8003b56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b58:	1dbb      	adds	r3, r7, #6
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 f807 	bl	8003b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	0002      	movs	r2, r0
 8003b78:	1dbb      	adds	r3, r7, #6
 8003b7a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b5b0      	push	{r4, r5, r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f000 fbbf 	bl	8004316 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b98:	4bc9      	ldr	r3, [pc, #804]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba2:	4bc7      	ldr	r3, [pc, #796]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d100      	bne.n	8003bba <HAL_RCC_OscConfig+0x36>
 8003bb8:	e07e      	b.n	8003cb8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d007      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x68>
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	025b      	lsls	r3, r3, #9
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d10d      	bne.n	8003bec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4bbb      	ldr	r3, [pc, #748]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d100      	bne.n	8003bde <HAL_RCC_OscConfig+0x5a>
 8003bdc:	e06b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x132>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d167      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f000 fb95 	bl	8004316 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	025b      	lsls	r3, r3, #9
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x84>
 8003bf8:	4bb1      	ldr	r3, [pc, #708]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4bb0      	ldr	r3, [pc, #704]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	0249      	lsls	r1, r1, #9
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e027      	b.n	8003c58 <HAL_RCC_OscConfig+0xd4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	23a0      	movs	r3, #160	; 0xa0
 8003c0e:	02db      	lsls	r3, r3, #11
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d10e      	bne.n	8003c32 <HAL_RCC_OscConfig+0xae>
 8003c14:	4baa      	ldr	r3, [pc, #680]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4ba9      	ldr	r3, [pc, #676]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	02c9      	lsls	r1, r1, #11
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	4ba7      	ldr	r3, [pc, #668]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4ba6      	ldr	r3, [pc, #664]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	0249      	lsls	r1, r1, #9
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e012      	b.n	8003c58 <HAL_RCC_OscConfig+0xd4>
 8003c32:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4ba2      	ldr	r3, [pc, #648]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c38:	49a2      	ldr	r1, [pc, #648]	; (8003ec4 <HAL_RCC_OscConfig+0x340>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	025b      	lsls	r3, r3, #9
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4b9c      	ldr	r3, [pc, #624]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b9b      	ldr	r3, [pc, #620]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c52:	499d      	ldr	r1, [pc, #628]	; (8003ec8 <HAL_RCC_OscConfig+0x344>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d015      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7ff faf8 	bl	8003254 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c68:	e009      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6a:	f7ff faf3 	bl	8003254 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	; 0x64
 8003c76:	d902      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f000 fb4c 	bl	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c7e:	4b90      	ldr	r3, [pc, #576]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	4013      	ands	r3, r2
 8003c88:	d0ef      	beq.n	8003c6a <HAL_RCC_OscConfig+0xe6>
 8003c8a:	e015      	b.n	8003cb8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7ff fae2 	bl	8003254 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c96:	f7ff fadd 	bl	8003254 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e336      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ca8:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x112>
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d100      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x140>
 8003cc2:	e099      	b.n	8003df8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2220      	movs	r2, #32
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003cd2:	4b7b      	ldr	r3, [pc, #492]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b7a      	ldr	r3, [pc, #488]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003cd8:	2120      	movs	r1, #32
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	4393      	bics	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d13e      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1ec>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d13b      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003cf8:	4b71      	ldr	r3, [pc, #452]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_RCC_OscConfig+0x188>
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e304      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x348>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	4b68      	ldr	r3, [pc, #416]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2209      	movs	r2, #9
 8003d28:	4393      	bics	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d34:	f000 fc42 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8003d38:	0001      	movs	r1, r0
 8003d3a:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	220f      	movs	r2, #15
 8003d42:	4013      	ands	r3, r2
 8003d44:	4a62      	ldr	r2, [pc, #392]	; (8003ed0 <HAL_RCC_OscConfig+0x34c>)
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	000a      	movs	r2, r1
 8003d4a:	40da      	lsrs	r2, r3
 8003d4c:	4b61      	ldr	r3, [pc, #388]	; (8003ed4 <HAL_RCC_OscConfig+0x350>)
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003d50:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <HAL_RCC_OscConfig+0x354>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2513      	movs	r5, #19
 8003d56:	197c      	adds	r4, r7, r5
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fa35 	bl	80031c8 <HAL_InitTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003d62:	197b      	adds	r3, r7, r5
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d046      	beq.n	8003df8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003d6a:	197b      	adds	r3, r7, r5
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	e2d2      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d027      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d76:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2209      	movs	r2, #9
 8003d7c:	4393      	bics	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7ff fa64 	bl	8003254 <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d92:	f7ff fa5f 	bl	8003254 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e2b8      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2204      	movs	r2, #4
 8003daa:	4013      	ands	r3, r2
 8003dac:	d0f1      	beq.n	8003d92 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b44      	ldr	r3, [pc, #272]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <HAL_RCC_OscConfig+0x348>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	0019      	movs	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	e018      	b.n	8003df8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7ff fa3f 	bl	8003254 <HAL_GetTick>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7ff fa3a 	bl	8003254 <HAL_GetTick>
 8003de0:	0002      	movs	r2, r0
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e293      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	4013      	ands	r3, r2
 8003df6:	d1f1      	bne.n	8003ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d100      	bne.n	8003e04 <HAL_RCC_OscConfig+0x280>
 8003e02:	e0a2      	b.n	8003f4a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d140      	bne.n	8003e8c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4013      	ands	r3, r2
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x29e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e279      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4a2d      	ldr	r2, [pc, #180]	; (8003edc <HAL_RCC_OscConfig+0x358>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	0a19      	lsrs	r1, r3, #8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	061a      	lsls	r2, r3, #24
 8003e44:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	0b5b      	lsrs	r3, r3, #13
 8003e50:	3301      	adds	r3, #1
 8003e52:	2280      	movs	r2, #128	; 0x80
 8003e54:	0212      	lsls	r2, r2, #8
 8003e56:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	210f      	movs	r1, #15
 8003e60:	400b      	ands	r3, r1
 8003e62:	491b      	ldr	r1, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x34c>)
 8003e64:	5ccb      	ldrb	r3, [r1, r3]
 8003e66:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_RCC_OscConfig+0x350>)
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_RCC_OscConfig+0x354>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2513      	movs	r5, #19
 8003e72:	197c      	adds	r4, r7, r5
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff f9a7 	bl	80031c8 <HAL_InitTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003e7e:	197b      	adds	r3, r7, r5
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d061      	beq.n	8003f4a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003e86:	197b      	adds	r3, r7, r5
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	e244      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d040      	beq.n	8003f16 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	0049      	lsls	r1, r1, #1
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7ff f9d7 	bl	8003254 <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003eaa:	e019      	b.n	8003ee0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eac:	f7ff f9d2 	bl	8003254 <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d912      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e22b      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	fffeffff 	.word	0xfffeffff
 8003ec8:	fffbffff 	.word	0xfffbffff
 8003ecc:	ffffe0ff 	.word	0xffffe0ff
 8003ed0:	0800ab90 	.word	0x0800ab90
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20000004 	.word	0x20000004
 8003edc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ee0:	4bca      	ldr	r3, [pc, #808]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d0df      	beq.n	8003eac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eec:	4bc7      	ldr	r3, [pc, #796]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4ac7      	ldr	r2, [pc, #796]	; (8004210 <HAL_RCC_OscConfig+0x68c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efa:	4bc4      	ldr	r3, [pc, #784]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f00:	4bc2      	ldr	r3, [pc, #776]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	0a19      	lsrs	r1, r3, #8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	061a      	lsls	r2, r3, #24
 8003f0e:	4bbf      	ldr	r3, [pc, #764]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	e019      	b.n	8003f4a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f16:	4bbd      	ldr	r3, [pc, #756]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4bbc      	ldr	r3, [pc, #752]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f1c:	49bd      	ldr	r1, [pc, #756]	; (8004214 <HAL_RCC_OscConfig+0x690>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7ff f997 	bl	8003254 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f2c:	f7ff f992 	bl	8003254 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e1eb      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f3e:	4bb3      	ldr	r3, [pc, #716]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4013      	ands	r3, r2
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	4013      	ands	r3, r2
 8003f52:	d036      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d019      	beq.n	8003f90 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5c:	4bab      	ldr	r3, [pc, #684]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f60:	4baa      	ldr	r3, [pc, #680]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	430a      	orrs	r2, r1
 8003f66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7ff f974 	bl	8003254 <HAL_GetTick>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f72:	f7ff f96f 	bl	8003254 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1c8      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f84:	4ba1      	ldr	r3, [pc, #644]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	2202      	movs	r2, #2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d0f1      	beq.n	8003f72 <HAL_RCC_OscConfig+0x3ee>
 8003f8e:	e018      	b.n	8003fc2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f90:	4b9e      	ldr	r3, [pc, #632]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f94:	4b9d      	ldr	r3, [pc, #628]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	438a      	bics	r2, r1
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9c:	f7ff f95a 	bl	8003254 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7ff f955 	bl	8003254 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e1ae      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fb8:	4b94      	ldr	r3, [pc, #592]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d1f1      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d100      	bne.n	8003fce <HAL_RCC_OscConfig+0x44a>
 8003fcc:	e0ae      	b.n	800412c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2023      	movs	r0, #35	; 0x23
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	055b      	lsls	r3, r3, #21
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b8a      	ldr	r3, [pc, #552]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	4b89      	ldr	r3, [pc, #548]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	0549      	lsls	r1, r1, #21
 8003fec:	430a      	orrs	r2, r1
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b88      	ldr	r3, [pc, #544]	; (8004218 <HAL_RCC_OscConfig+0x694>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	d11a      	bne.n	8004038 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b85      	ldr	r3, [pc, #532]	; (8004218 <HAL_RCC_OscConfig+0x694>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b84      	ldr	r3, [pc, #528]	; (8004218 <HAL_RCC_OscConfig+0x694>)
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	0049      	lsls	r1, r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004010:	f7ff f920 	bl	8003254 <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7ff f91b 	bl	8003254 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b64      	cmp	r3, #100	; 0x64
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e174      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b7a      	ldr	r3, [pc, #488]	; (8004218 <HAL_RCC_OscConfig+0x694>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4013      	ands	r3, r2
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	429a      	cmp	r2, r3
 8004042:	d107      	bne.n	8004054 <HAL_RCC_OscConfig+0x4d0>
 8004044:	4b71      	ldr	r3, [pc, #452]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004048:	4b70      	ldr	r3, [pc, #448]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	0049      	lsls	r1, r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	651a      	str	r2, [r3, #80]	; 0x50
 8004052:	e031      	b.n	80040b8 <HAL_RCC_OscConfig+0x534>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10c      	bne.n	8004076 <HAL_RCC_OscConfig+0x4f2>
 800405c:	4b6b      	ldr	r3, [pc, #428]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800405e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004060:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004062:	496c      	ldr	r1, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x690>)
 8004064:	400a      	ands	r2, r1
 8004066:	651a      	str	r2, [r3, #80]	; 0x50
 8004068:	4b68      	ldr	r3, [pc, #416]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800406a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800406c:	4b67      	ldr	r3, [pc, #412]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800406e:	496b      	ldr	r1, [pc, #428]	; (800421c <HAL_RCC_OscConfig+0x698>)
 8004070:	400a      	ands	r2, r1
 8004072:	651a      	str	r2, [r3, #80]	; 0x50
 8004074:	e020      	b.n	80040b8 <HAL_RCC_OscConfig+0x534>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	23a0      	movs	r3, #160	; 0xa0
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	429a      	cmp	r2, r3
 8004080:	d10e      	bne.n	80040a0 <HAL_RCC_OscConfig+0x51c>
 8004082:	4b62      	ldr	r3, [pc, #392]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004086:	4b61      	ldr	r3, [pc, #388]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	00c9      	lsls	r1, r1, #3
 800408c:	430a      	orrs	r2, r1
 800408e:	651a      	str	r2, [r3, #80]	; 0x50
 8004090:	4b5e      	ldr	r3, [pc, #376]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004094:	4b5d      	ldr	r3, [pc, #372]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	0049      	lsls	r1, r1, #1
 800409a:	430a      	orrs	r2, r1
 800409c:	651a      	str	r2, [r3, #80]	; 0x50
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0x534>
 80040a0:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80040a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80040a6:	495b      	ldr	r1, [pc, #364]	; (8004214 <HAL_RCC_OscConfig+0x690>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
 80040ac:	4b57      	ldr	r3, [pc, #348]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80040ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040b0:	4b56      	ldr	r3, [pc, #344]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80040b2:	495a      	ldr	r1, [pc, #360]	; (800421c <HAL_RCC_OscConfig+0x698>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c0:	f7ff f8c8 	bl	8003254 <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040c8:	e009      	b.n	80040de <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7ff f8c3 	bl	8003254 <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_OscConfig+0x69c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e11b      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040de:	4b4b      	ldr	r3, [pc, #300]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80040e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	d0ef      	beq.n	80040ca <HAL_RCC_OscConfig+0x546>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7ff f8b2 	bl	8003254 <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040f4:	e009      	b.n	800410a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7ff f8ad 	bl	8003254 <HAL_GetTick>
 80040fa:	0002      	movs	r2, r0
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	4a47      	ldr	r2, [pc, #284]	; (8004220 <HAL_RCC_OscConfig+0x69c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e105      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800410a:	4b40      	ldr	r3, [pc, #256]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800410c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d1ef      	bne.n	80040f6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004116:	2323      	movs	r3, #35	; 0x23
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d105      	bne.n	800412c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004120:	4b3a      	ldr	r3, [pc, #232]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004126:	493f      	ldr	r1, [pc, #252]	; (8004224 <HAL_RCC_OscConfig+0x6a0>)
 8004128:	400a      	ands	r2, r1
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2220      	movs	r2, #32
 8004132:	4013      	ands	r3, r2
 8004134:	d049      	beq.n	80041ca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d026      	beq.n	800418c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800413e:	4b33      	ldr	r3, [pc, #204]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004144:	2101      	movs	r1, #1
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800414c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004150:	2101      	movs	r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	635a      	str	r2, [r3, #52]	; 0x34
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x6a4>)
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_RCC_OscConfig+0x6a4>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	0189      	lsls	r1, r1, #6
 8004160:	430a      	orrs	r2, r1
 8004162:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7ff f876 	bl	8003254 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800416e:	f7ff f871 	bl	8003254 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0ca      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2202      	movs	r2, #2
 8004186:	4013      	ands	r3, r2
 8004188:	d0f1      	beq.n	800416e <HAL_RCC_OscConfig+0x5ea>
 800418a:	e01e      	b.n	80041ca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800418c:	4b1f      	ldr	r3, [pc, #124]	; (800420c <HAL_RCC_OscConfig+0x688>)
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <HAL_RCC_OscConfig+0x688>)
 8004192:	2101      	movs	r1, #1
 8004194:	438a      	bics	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_RCC_OscConfig+0x6a4>)
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_RCC_OscConfig+0x6a4>)
 800419e:	4923      	ldr	r1, [pc, #140]	; (800422c <HAL_RCC_OscConfig+0x6a8>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7ff f856 	bl	8003254 <HAL_GetTick>
 80041a8:	0003      	movs	r3, r0
 80041aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ae:	f7ff f851 	bl	8003254 <HAL_GetTick>
 80041b2:	0002      	movs	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0aa      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	d1f1      	bne.n	80041ae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d100      	bne.n	80041d4 <HAL_RCC_OscConfig+0x650>
 80041d2:	e09f      	b.n	8004314 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d100      	bne.n	80041dc <HAL_RCC_OscConfig+0x658>
 80041da:	e078      	b.n	80042ce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d159      	bne.n	8004298 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCC_OscConfig+0x688>)
 80041ea:	4911      	ldr	r1, [pc, #68]	; (8004230 <HAL_RCC_OscConfig+0x6ac>)
 80041ec:	400a      	ands	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7ff f830 	bl	8003254 <HAL_GetTick>
 80041f4:	0003      	movs	r3, r0
 80041f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80041f8:	e01c      	b.n	8004234 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7ff f82b 	bl	8003254 <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d915      	bls.n	8004234 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e084      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
 800420c:	40021000 	.word	0x40021000
 8004210:	ffff1fff 	.word	0xffff1fff
 8004214:	fffffeff 	.word	0xfffffeff
 8004218:	40007000 	.word	0x40007000
 800421c:	fffffbff 	.word	0xfffffbff
 8004220:	00001388 	.word	0x00001388
 8004224:	efffffff 	.word	0xefffffff
 8004228:	40010000 	.word	0x40010000
 800422c:	ffffdfff 	.word	0xffffdfff
 8004230:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004234:	4b3a      	ldr	r3, [pc, #232]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	049b      	lsls	r3, r3, #18
 800423c:	4013      	ands	r3, r2
 800423e:	d1dc      	bne.n	80041fa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004240:	4b37      	ldr	r3, [pc, #220]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a37      	ldr	r2, [pc, #220]	; (8004324 <HAL_RCC_OscConfig+0x7a0>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	431a      	orrs	r2, r3
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b2e      	ldr	r3, [pc, #184]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	0449      	lsls	r1, r1, #17
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fe fff1 	bl	8003254 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe ffec 	bl	8003254 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e045      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800428a:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	049b      	lsls	r3, r3, #18
 8004292:	4013      	ands	r3, r2
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x6f4>
 8004296:	e03d      	b.n	8004314 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 800429e:	4922      	ldr	r1, [pc, #136]	; (8004328 <HAL_RCC_OscConfig+0x7a4>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fe ffd6 	bl	8003254 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fe ffd1 	bl	8003254 <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e02a      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	049b      	lsls	r3, r3, #18
 80042c8:	4013      	ands	r3, r2
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x72a>
 80042cc:	e022      	b.n	8004314 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e01d      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCC_OscConfig+0x79c>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	025b      	lsls	r3, r3, #9
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10f      	bne.n	8004310 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	23f0      	movs	r3, #240	; 0xf0
 80042f4:	039b      	lsls	r3, r3, #14
 80042f6:	401a      	ands	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	23c0      	movs	r3, #192	; 0xc0
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	401a      	ands	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b00a      	add	sp, #40	; 0x28
 800431c:	bdb0      	pop	{r4, r5, r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	40021000 	.word	0x40021000
 8004324:	ff02ffff 	.word	0xff02ffff
 8004328:	feffffff 	.word	0xfeffffff

0800432c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e128      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b96      	ldr	r3, [pc, #600]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d91e      	bls.n	800438c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b93      	ldr	r3, [pc, #588]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	4393      	bics	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	4b90      	ldr	r3, [pc, #576]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004360:	f7fe ff78 	bl	8003254 <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004368:	e009      	b.n	800437e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436a:	f7fe ff73 	bl	8003254 <HAL_GetTick>
 800436e:	0002      	movs	r2, r0
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	4a8a      	ldr	r2, [pc, #552]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e109      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b87      	ldr	r3, [pc, #540]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d1ee      	bne.n	800436a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2202      	movs	r2, #2
 8004392:	4013      	ands	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004396:	4b83      	ldr	r3, [pc, #524]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	22f0      	movs	r2, #240	; 0xf0
 800439c:	4393      	bics	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b7f      	ldr	r3, [pc, #508]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80043a6:	430a      	orrs	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d100      	bne.n	80043b6 <HAL_RCC_ClockConfig+0x8a>
 80043b4:	e089      	b.n	80044ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043be:	4b79      	ldr	r3, [pc, #484]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	029b      	lsls	r3, r3, #10
 80043c6:	4013      	ands	r3, r2
 80043c8:	d120      	bne.n	800440c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0e1      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043d6:	4b73      	ldr	r3, [pc, #460]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	049b      	lsls	r3, r3, #18
 80043de:	4013      	ands	r3, r2
 80043e0:	d114      	bne.n	800440c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0d5      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ee:	4b6d      	ldr	r3, [pc, #436]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2204      	movs	r2, #4
 80043f4:	4013      	ands	r3, r2
 80043f6:	d109      	bne.n	800440c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0ca      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043fc:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4013      	ands	r3, r2
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0c2      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440c:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2203      	movs	r2, #3
 8004412:	4393      	bics	r3, r2
 8004414:	0019      	movs	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 800441c:	430a      	orrs	r2, r1
 800441e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004420:	f7fe ff18 	bl	8003254 <HAL_GetTick>
 8004424:	0003      	movs	r3, r0
 8004426:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d111      	bne.n	8004454 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004430:	e009      	b.n	8004446 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004432:	f7fe ff0f 	bl	8003254 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0a5      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004446:	4b57      	ldr	r3, [pc, #348]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	220c      	movs	r2, #12
 800444c:	4013      	ands	r3, r2
 800444e:	2b08      	cmp	r3, #8
 8004450:	d1ef      	bne.n	8004432 <HAL_RCC_ClockConfig+0x106>
 8004452:	e03a      	b.n	80044ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d111      	bne.n	8004480 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445c:	e009      	b.n	8004472 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445e:	f7fe fef9 	bl	8003254 <HAL_GetTick>
 8004462:	0002      	movs	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	4a4d      	ldr	r2, [pc, #308]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e08f      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004472:	4b4c      	ldr	r3, [pc, #304]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	220c      	movs	r2, #12
 8004478:	4013      	ands	r3, r2
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d1ef      	bne.n	800445e <HAL_RCC_ClockConfig+0x132>
 800447e:	e024      	b.n	80044ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d11b      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004488:	e009      	b.n	800449e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448a:	f7fe fee3 	bl	8003254 <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e079      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800449e:	4b41      	ldr	r3, [pc, #260]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	220c      	movs	r2, #12
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d1ef      	bne.n	800448a <HAL_RCC_ClockConfig+0x15e>
 80044aa:	e00e      	b.n	80044ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fe fed2 	bl	8003254 <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e068      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044c0:	4b38      	ldr	r3, [pc, #224]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	220c      	movs	r2, #12
 80044c6:	4013      	ands	r3, r2
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ca:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d21e      	bcs.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d8:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	4393      	bics	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044ea:	f7fe feb3 	bl	8003254 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	e009      	b.n	8004508 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fe feae 	bl	8003254 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e044      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d1ee      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	4013      	ands	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a20      	ldr	r2, [pc, #128]	; (80045a8 <HAL_RCC_ClockConfig+0x27c>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004530:	430a      	orrs	r2, r1
 8004532:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2208      	movs	r2, #8
 800453a:	4013      	ands	r3, r2
 800453c:	d00a      	beq.n	8004554 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800453e:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <HAL_RCC_ClockConfig+0x280>)
 8004544:	4013      	ands	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	00da      	lsls	r2, r3, #3
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004554:	f000 f832 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8004558:	0001      	movs	r1, r0
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <HAL_RCC_ClockConfig+0x278>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	220f      	movs	r2, #15
 8004562:	4013      	ands	r3, r2
 8004564:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <HAL_RCC_ClockConfig+0x284>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	000a      	movs	r2, r1
 800456a:	40da      	lsrs	r2, r3
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_RCC_ClockConfig+0x288>)
 800456e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCC_ClockConfig+0x28c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	250b      	movs	r5, #11
 8004576:	197c      	adds	r4, r7, r5
 8004578:	0018      	movs	r0, r3
 800457a:	f7fe fe25 	bl	80031c8 <HAL_InitTick>
 800457e:	0003      	movs	r3, r0
 8004580:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004582:	197b      	adds	r3, r7, r5
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800458a:	197b      	adds	r3, r7, r5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	e000      	b.n	8004592 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	0018      	movs	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	b004      	add	sp, #16
 8004598:	bdb0      	pop	{r4, r5, r7, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	40022000 	.word	0x40022000
 80045a0:	00001388 	.word	0x00001388
 80045a4:	40021000 	.word	0x40021000
 80045a8:	fffff8ff 	.word	0xfffff8ff
 80045ac:	ffffc7ff 	.word	0xffffc7ff
 80045b0:	0800ab90 	.word	0x0800ab90
 80045b4:	20000000 	.word	0x20000000
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b5b0      	push	{r4, r5, r7, lr}
 80045be:	b08e      	sub	sp, #56	; 0x38
 80045c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80045c2:	4b4c      	ldr	r3, [pc, #304]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ca:	230c      	movs	r3, #12
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	d014      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x40>
 80045d2:	d900      	bls.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1a>
 80045d4:	e07b      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x112>
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d002      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x24>
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d00b      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045de:	e076      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80045e0:	4b44      	ldr	r3, [pc, #272]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2210      	movs	r2, #16
 80045e6:	4013      	ands	r3, r2
 80045e8:	d002      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80045ea:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80045ee:	e07c      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80045f0:	4b42      	ldr	r3, [pc, #264]	; (80046fc <HAL_RCC_GetSysClockFreq+0x140>)
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045f4:	e079      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045f6:	4b41      	ldr	r3, [pc, #260]	; (80046fc <HAL_RCC_GetSysClockFreq+0x140>)
 80045f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045fa:	e076      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	0c9a      	lsrs	r2, r3, #18
 8004600:	230f      	movs	r3, #15
 8004602:	401a      	ands	r2, r3
 8004604:	4b3e      	ldr	r3, [pc, #248]	; (8004700 <HAL_RCC_GetSysClockFreq+0x144>)
 8004606:	5c9b      	ldrb	r3, [r3, r2]
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	0d9a      	lsrs	r2, r3, #22
 800460e:	2303      	movs	r3, #3
 8004610:	4013      	ands	r3, r2
 8004612:	3301      	adds	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	025b      	lsls	r3, r3, #9
 800461e:	4013      	ands	r3, r2
 8004620:	d01a      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	4a34      	ldr	r2, [pc, #208]	; (80046fc <HAL_RCC_GetSysClockFreq+0x140>)
 800462c:	2300      	movs	r3, #0
 800462e:	69b8      	ldr	r0, [r7, #24]
 8004630:	69f9      	ldr	r1, [r7, #28]
 8004632:	f7fb ff59 	bl	80004e8 <__aeabi_lmul>
 8004636:	0002      	movs	r2, r0
 8004638:	000b      	movs	r3, r1
 800463a:	0010      	movs	r0, r2
 800463c:	0019      	movs	r1, r3
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f7fb ff2d 	bl	80004a8 <__aeabi_uldivmod>
 800464e:	0002      	movs	r2, r0
 8004650:	000b      	movs	r3, r1
 8004652:	0013      	movs	r3, r2
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
 8004656:	e037      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004658:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2210      	movs	r2, #16
 800465e:	4013      	ands	r3, r2
 8004660:	d01a      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	4a23      	ldr	r2, [pc, #140]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800466c:	2300      	movs	r3, #0
 800466e:	68b8      	ldr	r0, [r7, #8]
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	f7fb ff39 	bl	80004e8 <__aeabi_lmul>
 8004676:	0002      	movs	r2, r0
 8004678:	000b      	movs	r3, r1
 800467a:	0010      	movs	r0, r2
 800467c:	0019      	movs	r1, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f7fb ff0d 	bl	80004a8 <__aeabi_uldivmod>
 800468e:	0002      	movs	r2, r0
 8004690:	000b      	movs	r3, r1
 8004692:	0013      	movs	r3, r2
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
 8004696:	e017      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	0018      	movs	r0, r3
 800469c:	2300      	movs	r3, #0
 800469e:	0019      	movs	r1, r3
 80046a0:	4a16      	ldr	r2, [pc, #88]	; (80046fc <HAL_RCC_GetSysClockFreq+0x140>)
 80046a2:	2300      	movs	r3, #0
 80046a4:	f7fb ff20 	bl	80004e8 <__aeabi_lmul>
 80046a8:	0002      	movs	r2, r0
 80046aa:	000b      	movs	r3, r1
 80046ac:	0010      	movs	r0, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	001c      	movs	r4, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	001d      	movs	r5, r3
 80046b8:	0022      	movs	r2, r4
 80046ba:	002b      	movs	r3, r5
 80046bc:	f7fb fef4 	bl	80004a8 <__aeabi_uldivmod>
 80046c0:	0002      	movs	r2, r0
 80046c2:	000b      	movs	r3, r1
 80046c4:	0013      	movs	r3, r2
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046cc:	e00d      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	0b5b      	lsrs	r3, r3, #13
 80046d4:	2207      	movs	r2, #7
 80046d6:	4013      	ands	r3, r2
 80046d8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	3301      	adds	r3, #1
 80046de:	2280      	movs	r2, #128	; 0x80
 80046e0:	0212      	lsls	r2, r2, #8
 80046e2:	409a      	lsls	r2, r3
 80046e4:	0013      	movs	r3, r2
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b00e      	add	sp, #56	; 0x38
 80046f2:	bdb0      	pop	{r4, r5, r7, pc}
 80046f4:	40021000 	.word	0x40021000
 80046f8:	003d0900 	.word	0x003d0900
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	0800aba8 	.word	0x0800aba8

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b02      	ldr	r3, [pc, #8]	; (8004714 <HAL_RCC_GetHCLKFreq+0x10>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800471c:	f7ff fff2 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004720:	0001      	movs	r1, r0
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	2207      	movs	r2, #7
 800472a:	4013      	ands	r3, r2
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	40d9      	lsrs	r1, r3
 8004732:	000b      	movs	r3, r1
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	40021000 	.word	0x40021000
 8004740:	0800aba0 	.word	0x0800aba0

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	0001      	movs	r1, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	0adb      	lsrs	r3, r3, #11
 8004754:	2207      	movs	r2, #7
 8004756:	4013      	ands	r3, r2
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_RCC_GetPCLK2Freq+0x28>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	40d9      	lsrs	r1, r3
 800475e:	000b      	movs	r3, r1
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40021000 	.word	0x40021000
 800476c:	0800aba0 	.word	0x0800aba0

08004770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e044      	b.n	800480c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2278      	movs	r2, #120	; 0x78
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f7fe fb0b 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2224      	movs	r2, #36	; 0x24
 800479e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	438a      	bics	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 fbca 	bl	8004f4c <UART_SetConfig>
 80047b8:	0003      	movs	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e024      	b.n	800480c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 fe5b 	bl	8005488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	490d      	ldr	r1, [pc, #52]	; (8004814 <HAL_UART_Init+0xa4>)
 80047de:	400a      	ands	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	212a      	movs	r1, #42	; 0x2a
 80047ee:	438a      	bics	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fef3 	bl	80055f0 <UART_CheckIdleState>
 800480a:	0003      	movs	r3, r0
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}
 8004814:	ffffb7ff 	.word	0xffffb7ff

08004818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	1dbb      	adds	r3, r7, #6
 8004826:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482c:	2b20      	cmp	r3, #32
 800482e:	d000      	beq.n	8004832 <HAL_UART_Transmit+0x1a>
 8004830:	e08c      	b.n	800494c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_UART_Transmit+0x28>
 8004838:	1dbb      	adds	r3, r7, #6
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e084      	b.n	800494e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	015b      	lsls	r3, r3, #5
 800484c:	429a      	cmp	r2, r3
 800484e:	d109      	bne.n	8004864 <HAL_UART_Transmit+0x4c>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2201      	movs	r2, #1
 800485c:	4013      	ands	r3, r2
 800485e:	d001      	beq.n	8004864 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e074      	b.n	800494e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2284      	movs	r2, #132	; 0x84
 8004868:	2100      	movs	r1, #0
 800486a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2221      	movs	r2, #33	; 0x21
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004872:	f7fe fcef 	bl	8003254 <HAL_GetTick>
 8004876:	0003      	movs	r3, r0
 8004878:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1dba      	adds	r2, r7, #6
 800487e:	2150      	movs	r1, #80	; 0x50
 8004880:	8812      	ldrh	r2, [r2, #0]
 8004882:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1dba      	adds	r2, r7, #6
 8004888:	2152      	movs	r1, #82	; 0x52
 800488a:	8812      	ldrh	r2, [r2, #0]
 800488c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	015b      	lsls	r3, r3, #5
 8004896:	429a      	cmp	r2, r3
 8004898:	d108      	bne.n	80048ac <HAL_UART_Transmit+0x94>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b4:	e02f      	b.n	8004916 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	0013      	movs	r3, r2
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	f000 ff3c 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 80048c8:	1e03      	subs	r3, r0, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e03b      	b.n	800494e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	001a      	movs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	05d2      	lsls	r2, r2, #23
 80048e8:	0dd2      	lsrs	r2, r2, #23
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	3302      	adds	r3, #2
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e007      	b.n	8004904 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	781a      	ldrb	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3301      	adds	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2252      	movs	r2, #82	; 0x52
 8004908:	5a9b      	ldrh	r3, [r3, r2]
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b299      	uxth	r1, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2252      	movs	r2, #82	; 0x52
 8004914:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2252      	movs	r2, #82	; 0x52
 800491a:	5a9b      	ldrh	r3, [r3, r2]
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1c9      	bne.n	80048b6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	0013      	movs	r3, r2
 800492c:	2200      	movs	r2, #0
 800492e:	2140      	movs	r1, #64	; 0x40
 8004930:	f000 ff06 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8004934:	1e03      	subs	r3, r0, #0
 8004936:	d004      	beq.n	8004942 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e005      	b.n	800494e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b008      	add	sp, #32
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b0ab      	sub	sp, #172	; 0xac
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	22a4      	movs	r2, #164	; 0xa4
 8004968:	18b9      	adds	r1, r7, r2
 800496a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	20a0      	movs	r0, #160	; 0xa0
 8004974:	1839      	adds	r1, r7, r0
 8004976:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	219c      	movs	r1, #156	; 0x9c
 8004980:	1879      	adds	r1, r7, r1
 8004982:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004984:	0011      	movs	r1, r2
 8004986:	18bb      	adds	r3, r7, r2
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a99      	ldr	r2, [pc, #612]	; (8004bf0 <HAL_UART_IRQHandler+0x298>)
 800498c:	4013      	ands	r3, r2
 800498e:	2298      	movs	r2, #152	; 0x98
 8004990:	18bc      	adds	r4, r7, r2
 8004992:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004994:	18bb      	adds	r3, r7, r2
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d114      	bne.n	80049c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800499c:	187b      	adds	r3, r7, r1
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2220      	movs	r2, #32
 80049a2:	4013      	ands	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049a6:	183b      	adds	r3, r7, r0
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2220      	movs	r2, #32
 80049ac:	4013      	ands	r3, r2
 80049ae:	d00a      	beq.n	80049c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d100      	bne.n	80049ba <HAL_UART_IRQHandler+0x62>
 80049b8:	e2a0      	b.n	8004efc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	0010      	movs	r0, r2
 80049c2:	4798      	blx	r3
      }
      return;
 80049c4:	e29a      	b.n	8004efc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049c6:	2398      	movs	r3, #152	; 0x98
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d100      	bne.n	80049d2 <HAL_UART_IRQHandler+0x7a>
 80049d0:	e114      	b.n	8004bfc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049d2:	239c      	movs	r3, #156	; 0x9c
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	4013      	ands	r3, r2
 80049dc:	d106      	bne.n	80049ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049de:	23a0      	movs	r3, #160	; 0xa0
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a83      	ldr	r2, [pc, #524]	; (8004bf4 <HAL_UART_IRQHandler+0x29c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	d100      	bne.n	80049ec <HAL_UART_IRQHandler+0x94>
 80049ea:	e107      	b.n	8004bfc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ec:	23a4      	movs	r3, #164	; 0xa4
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	d012      	beq.n	8004a1e <HAL_UART_IRQHandler+0xc6>
 80049f8:	23a0      	movs	r3, #160	; 0xa0
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4013      	ands	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2284      	movs	r2, #132	; 0x84
 8004a12:	589b      	ldr	r3, [r3, r2]
 8004a14:	2201      	movs	r2, #1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2184      	movs	r1, #132	; 0x84
 8004a1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a1e:	23a4      	movs	r3, #164	; 0xa4
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2202      	movs	r2, #2
 8004a26:	4013      	ands	r3, r2
 8004a28:	d011      	beq.n	8004a4e <HAL_UART_IRQHandler+0xf6>
 8004a2a:	239c      	movs	r3, #156	; 0x9c
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2284      	movs	r2, #132	; 0x84
 8004a42:	589b      	ldr	r3, [r3, r2]
 8004a44:	2204      	movs	r2, #4
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2184      	movs	r1, #132	; 0x84
 8004a4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a4e:	23a4      	movs	r3, #164	; 0xa4
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2204      	movs	r2, #4
 8004a56:	4013      	ands	r3, r2
 8004a58:	d011      	beq.n	8004a7e <HAL_UART_IRQHandler+0x126>
 8004a5a:	239c      	movs	r3, #156	; 0x9c
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	4013      	ands	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2284      	movs	r2, #132	; 0x84
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	2202      	movs	r2, #2
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2184      	movs	r1, #132	; 0x84
 8004a7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a7e:	23a4      	movs	r3, #164	; 0xa4
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2208      	movs	r2, #8
 8004a86:	4013      	ands	r3, r2
 8004a88:	d017      	beq.n	8004aba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a8a:	23a0      	movs	r3, #160	; 0xa0
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2220      	movs	r2, #32
 8004a92:	4013      	ands	r3, r2
 8004a94:	d105      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a96:	239c      	movs	r3, #156	; 0x9c
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aa0:	d00b      	beq.n	8004aba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2284      	movs	r2, #132	; 0x84
 8004aae:	589b      	ldr	r3, [r3, r2]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2184      	movs	r1, #132	; 0x84
 8004ab8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004aba:	23a4      	movs	r3, #164	; 0xa4
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_UART_IRQHandler+0x198>
 8004ac8:	23a0      	movs	r3, #160	; 0xa0
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	04db      	lsls	r3, r3, #19
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d00c      	beq.n	8004af0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2280      	movs	r2, #128	; 0x80
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2284      	movs	r2, #132	; 0x84
 8004ae4:	589b      	ldr	r3, [r3, r2]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2184      	movs	r1, #132	; 0x84
 8004aee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2284      	movs	r2, #132	; 0x84
 8004af4:	589b      	ldr	r3, [r3, r2]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d100      	bne.n	8004afc <HAL_UART_IRQHandler+0x1a4>
 8004afa:	e201      	b.n	8004f00 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004afc:	23a4      	movs	r3, #164	; 0xa4
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2220      	movs	r2, #32
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b08:	23a0      	movs	r3, #160	; 0xa0
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	4013      	ands	r3, r2
 8004b12:	d008      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	0010      	movs	r0, r2
 8004b24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2284      	movs	r2, #132	; 0x84
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	2194      	movs	r1, #148	; 0x94
 8004b2e:	187a      	adds	r2, r7, r1
 8004b30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d004      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2228      	movs	r2, #40	; 0x28
 8004b46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b48:	d047      	beq.n	8004bda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 ff2b 	bl	80059a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2240      	movs	r2, #64	; 0x40
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d137      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b60:	f3ef 8310 	mrs	r3, PRIMASK
 8004b64:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b68:	2090      	movs	r0, #144	; 0x90
 8004b6a:	183a      	adds	r2, r7, r0
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b74:	f383 8810 	msr	PRIMASK, r3
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	438a      	bics	r2, r1
 8004b88:	609a      	str	r2, [r3, #8]
 8004b8a:	183b      	adds	r3, r7, r0
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b92:	f383 8810 	msr	PRIMASK, r3
}
 8004b96:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_UART_IRQHandler+0x2a0>)
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7fe fd15 	bl	80035dc <HAL_DMA_Abort_IT>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d01a      	beq.n	8004bec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	e012      	b.n	8004bec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 f9b7 	bl	8004f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bce:	e00d      	b.n	8004bec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 f9b2 	bl	8004f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e008      	b.n	8004bec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f9ad 	bl	8004f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2284      	movs	r2, #132	; 0x84
 8004be6:	2100      	movs	r1, #0
 8004be8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004bea:	e189      	b.n	8004f00 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	46c0      	nop			; (mov r8, r8)
    return;
 8004bee:	e187      	b.n	8004f00 <HAL_UART_IRQHandler+0x5a8>
 8004bf0:	0000080f 	.word	0x0000080f
 8004bf4:	04000120 	.word	0x04000120
 8004bf8:	08005a71 	.word	0x08005a71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d000      	beq.n	8004c06 <HAL_UART_IRQHandler+0x2ae>
 8004c04:	e13b      	b.n	8004e7e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c06:	23a4      	movs	r3, #164	; 0xa4
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d100      	bne.n	8004c14 <HAL_UART_IRQHandler+0x2bc>
 8004c12:	e134      	b.n	8004e7e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c14:	23a0      	movs	r3, #160	; 0xa0
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <HAL_UART_IRQHandler+0x2ca>
 8004c20:	e12d      	b.n	8004e7e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2210      	movs	r2, #16
 8004c28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2240      	movs	r2, #64	; 0x40
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d000      	beq.n	8004c3a <HAL_UART_IRQHandler+0x2e2>
 8004c38:	e0a1      	b.n	8004d7e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	217e      	movs	r1, #126	; 0x7e
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d100      	bne.n	8004c52 <HAL_UART_IRQHandler+0x2fa>
 8004c50:	e158      	b.n	8004f04 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2258      	movs	r2, #88	; 0x58
 8004c56:	5a9b      	ldrh	r3, [r3, r2]
 8004c58:	187a      	adds	r2, r7, r1
 8004c5a:	8812      	ldrh	r2, [r2, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d300      	bcc.n	8004c62 <HAL_UART_IRQHandler+0x30a>
 8004c60:	e150      	b.n	8004f04 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	187a      	adds	r2, r7, r1
 8004c66:	215a      	movs	r1, #90	; 0x5a
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2220      	movs	r2, #32
 8004c76:	4013      	ands	r3, r2
 8004c78:	d16f      	bne.n	8004d5a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c84:	2301      	movs	r3, #1
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	f383 8810 	msr	PRIMASK, r3
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	499e      	ldr	r1, [pc, #632]	; (8004f14 <HAL_UART_IRQHandler+0x5bc>)
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	f383 8810 	msr	PRIMASK, r3
}
 8004caa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cac:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	438a      	bics	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cde:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce8:	2301      	movs	r3, #1
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	f383 8810 	msr	PRIMASK, r3
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2140      	movs	r1, #64	; 0x40
 8004d00:	438a      	bics	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d06:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2280      	movs	r2, #128	; 0x80
 8004d14:	2120      	movs	r1, #32
 8004d16:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d22:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d28:	2301      	movs	r3, #1
 8004d2a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d2e:	f383 8810 	msr	PRIMASK, r3
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2110      	movs	r1, #16
 8004d40:	438a      	bics	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	f383 8810 	msr	PRIMASK, r3
}
 8004d4e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe fc01 	bl	800355c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2258      	movs	r2, #88	; 0x58
 8004d64:	5a9a      	ldrh	r2, [r3, r2]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	215a      	movs	r1, #90	; 0x5a
 8004d6a:	5a5b      	ldrh	r3, [r3, r1]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	0011      	movs	r1, r2
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fd fca0 	bl	80026bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d7c:	e0c2      	b.n	8004f04 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2258      	movs	r2, #88	; 0x58
 8004d82:	5a99      	ldrh	r1, [r3, r2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	225a      	movs	r2, #90	; 0x5a
 8004d88:	5a9b      	ldrh	r3, [r3, r2]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	208e      	movs	r0, #142	; 0x8e
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	1a8a      	subs	r2, r1, r2
 8004d92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	225a      	movs	r2, #90	; 0x5a
 8004d98:	5a9b      	ldrh	r3, [r3, r2]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d100      	bne.n	8004da2 <HAL_UART_IRQHandler+0x44a>
 8004da0:	e0b2      	b.n	8004f08 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004da2:	183b      	adds	r3, r7, r0
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d100      	bne.n	8004dac <HAL_UART_IRQHandler+0x454>
 8004daa:	e0ad      	b.n	8004f08 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004db2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db4:	2488      	movs	r4, #136	; 0x88
 8004db6:	193a      	adds	r2, r7, r4
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4951      	ldr	r1, [pc, #324]	; (8004f18 <HAL_UART_IRQHandler+0x5c0>)
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	193b      	adds	r3, r7, r4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de4:	f3ef 8310 	mrs	r3, PRIMASK
 8004de8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	2484      	movs	r4, #132	; 0x84
 8004dee:	193a      	adds	r2, r7, r4
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	2301      	movs	r3, #1
 8004df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f383 8810 	msr	PRIMASK, r3
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	438a      	bics	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	2120      	movs	r1, #32
 8004e22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e30:	f3ef 8310 	mrs	r3, PRIMASK
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	2480      	movs	r4, #128	; 0x80
 8004e3a:	193a      	adds	r2, r7, r4
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2110      	movs	r1, #16
 8004e56:	438a      	bics	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	193b      	adds	r3, r7, r4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e6e:	183b      	adds	r3, r7, r0
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0011      	movs	r1, r2
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fd fc20 	bl	80026bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e7c:	e044      	b.n	8004f08 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e7e:	23a4      	movs	r3, #164	; 0xa4
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	035b      	lsls	r3, r3, #13
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d010      	beq.n	8004eae <HAL_UART_IRQHandler+0x556>
 8004e8c:	239c      	movs	r3, #156	; 0x9c
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	03db      	lsls	r3, r3, #15
 8004e96:	4013      	ands	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	0352      	lsls	r2, r2, #13
 8004ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f001 f858 	bl	8005f5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eac:	e02f      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004eae:	23a4      	movs	r3, #164	; 0xa4
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eba:	23a0      	movs	r3, #160	; 0xa0
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01e      	beq.n	8004f0c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	4798      	blx	r3
    }
    return;
 8004ed8:	e018      	b.n	8004f0c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eda:	23a4      	movs	r3, #164	; 0xa4
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2240      	movs	r2, #64	; 0x40
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
 8004ee6:	23a0      	movs	r3, #160	; 0xa0
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d00d      	beq.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fdd2 	bl	8005a9e <UART_EndTransmit_IT>
    return;
 8004efa:	e008      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	e006      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	e004      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	e002      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	e000      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f0c:	46c0      	nop			; (mov r8, r8)
  }

}
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b02b      	add	sp, #172	; 0xac
 8004f12:	bd90      	pop	{r4, r7, pc}
 8004f14:	fffffeff 	.word	0xfffffeff
 8004f18:	fffffedf 	.word	0xfffffedf

08004f1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b5b0      	push	{r4, r5, r7, lr}
 8004f4e:	b08e      	sub	sp, #56	; 0x38
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f54:	231a      	movs	r3, #26
 8004f56:	2218      	movs	r2, #24
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	19db      	adds	r3, r3, r7
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4ac3      	ldr	r2, [pc, #780]	; (800528c <UART_SetConfig+0x340>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4abe      	ldr	r2, [pc, #760]	; (8005290 <UART_SetConfig+0x344>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	0019      	movs	r1, r3
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4ab8      	ldr	r2, [pc, #736]	; (8005294 <UART_SetConfig+0x348>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4ab4      	ldr	r2, [pc, #720]	; (8005298 <UART_SetConfig+0x34c>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	0019      	movs	r1, r3
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4ab0      	ldr	r2, [pc, #704]	; (800529c <UART_SetConfig+0x350>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d131      	bne.n	8005044 <UART_SetConfig+0xf8>
 8004fe0:	4baf      	ldr	r3, [pc, #700]	; (80052a0 <UART_SetConfig+0x354>)
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d01d      	beq.n	8005028 <UART_SetConfig+0xdc>
 8004fec:	d823      	bhi.n	8005036 <UART_SetConfig+0xea>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d00c      	beq.n	800500c <UART_SetConfig+0xc0>
 8004ff2:	d820      	bhi.n	8005036 <UART_SetConfig+0xea>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <UART_SetConfig+0xb2>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d00e      	beq.n	800501a <UART_SetConfig+0xce>
 8004ffc:	e01b      	b.n	8005036 <UART_SetConfig+0xea>
 8004ffe:	231b      	movs	r3, #27
 8005000:	2218      	movs	r2, #24
 8005002:	189b      	adds	r3, r3, r2
 8005004:	19db      	adds	r3, r3, r7
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e0b4      	b.n	8005176 <UART_SetConfig+0x22a>
 800500c:	231b      	movs	r3, #27
 800500e:	2218      	movs	r2, #24
 8005010:	189b      	adds	r3, r3, r2
 8005012:	19db      	adds	r3, r3, r7
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e0ad      	b.n	8005176 <UART_SetConfig+0x22a>
 800501a:	231b      	movs	r3, #27
 800501c:	2218      	movs	r2, #24
 800501e:	189b      	adds	r3, r3, r2
 8005020:	19db      	adds	r3, r3, r7
 8005022:	2204      	movs	r2, #4
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e0a6      	b.n	8005176 <UART_SetConfig+0x22a>
 8005028:	231b      	movs	r3, #27
 800502a:	2218      	movs	r2, #24
 800502c:	189b      	adds	r3, r3, r2
 800502e:	19db      	adds	r3, r3, r7
 8005030:	2208      	movs	r2, #8
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e09f      	b.n	8005176 <UART_SetConfig+0x22a>
 8005036:	231b      	movs	r3, #27
 8005038:	2218      	movs	r2, #24
 800503a:	189b      	adds	r3, r3, r2
 800503c:	19db      	adds	r3, r3, r7
 800503e:	2210      	movs	r2, #16
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e098      	b.n	8005176 <UART_SetConfig+0x22a>
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a96      	ldr	r2, [pc, #600]	; (80052a4 <UART_SetConfig+0x358>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d131      	bne.n	80050b2 <UART_SetConfig+0x166>
 800504e:	4b94      	ldr	r3, [pc, #592]	; (80052a0 <UART_SetConfig+0x354>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	220c      	movs	r2, #12
 8005054:	4013      	ands	r3, r2
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d01d      	beq.n	8005096 <UART_SetConfig+0x14a>
 800505a:	d823      	bhi.n	80050a4 <UART_SetConfig+0x158>
 800505c:	2b08      	cmp	r3, #8
 800505e:	d00c      	beq.n	800507a <UART_SetConfig+0x12e>
 8005060:	d820      	bhi.n	80050a4 <UART_SetConfig+0x158>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <UART_SetConfig+0x120>
 8005066:	2b04      	cmp	r3, #4
 8005068:	d00e      	beq.n	8005088 <UART_SetConfig+0x13c>
 800506a:	e01b      	b.n	80050a4 <UART_SetConfig+0x158>
 800506c:	231b      	movs	r3, #27
 800506e:	2218      	movs	r2, #24
 8005070:	189b      	adds	r3, r3, r2
 8005072:	19db      	adds	r3, r3, r7
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	e07d      	b.n	8005176 <UART_SetConfig+0x22a>
 800507a:	231b      	movs	r3, #27
 800507c:	2218      	movs	r2, #24
 800507e:	189b      	adds	r3, r3, r2
 8005080:	19db      	adds	r3, r3, r7
 8005082:	2202      	movs	r2, #2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e076      	b.n	8005176 <UART_SetConfig+0x22a>
 8005088:	231b      	movs	r3, #27
 800508a:	2218      	movs	r2, #24
 800508c:	189b      	adds	r3, r3, r2
 800508e:	19db      	adds	r3, r3, r7
 8005090:	2204      	movs	r2, #4
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	e06f      	b.n	8005176 <UART_SetConfig+0x22a>
 8005096:	231b      	movs	r3, #27
 8005098:	2218      	movs	r2, #24
 800509a:	189b      	adds	r3, r3, r2
 800509c:	19db      	adds	r3, r3, r7
 800509e:	2208      	movs	r2, #8
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e068      	b.n	8005176 <UART_SetConfig+0x22a>
 80050a4:	231b      	movs	r3, #27
 80050a6:	2218      	movs	r2, #24
 80050a8:	189b      	adds	r3, r3, r2
 80050aa:	19db      	adds	r3, r3, r7
 80050ac:	2210      	movs	r2, #16
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e061      	b.n	8005176 <UART_SetConfig+0x22a>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7c      	ldr	r2, [pc, #496]	; (80052a8 <UART_SetConfig+0x35c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d106      	bne.n	80050ca <UART_SetConfig+0x17e>
 80050bc:	231b      	movs	r3, #27
 80050be:	2218      	movs	r2, #24
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	19db      	adds	r3, r3, r7
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e055      	b.n	8005176 <UART_SetConfig+0x22a>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a77      	ldr	r2, [pc, #476]	; (80052ac <UART_SetConfig+0x360>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d106      	bne.n	80050e2 <UART_SetConfig+0x196>
 80050d4:	231b      	movs	r3, #27
 80050d6:	2218      	movs	r2, #24
 80050d8:	189b      	adds	r3, r3, r2
 80050da:	19db      	adds	r3, r3, r7
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	e049      	b.n	8005176 <UART_SetConfig+0x22a>
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6b      	ldr	r2, [pc, #428]	; (8005294 <UART_SetConfig+0x348>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d13e      	bne.n	800516a <UART_SetConfig+0x21e>
 80050ec:	4b6c      	ldr	r3, [pc, #432]	; (80052a0 <UART_SetConfig+0x354>)
 80050ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f0:	23c0      	movs	r3, #192	; 0xc0
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	4013      	ands	r3, r2
 80050f6:	22c0      	movs	r2, #192	; 0xc0
 80050f8:	0112      	lsls	r2, r2, #4
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d027      	beq.n	800514e <UART_SetConfig+0x202>
 80050fe:	22c0      	movs	r2, #192	; 0xc0
 8005100:	0112      	lsls	r2, r2, #4
 8005102:	4293      	cmp	r3, r2
 8005104:	d82a      	bhi.n	800515c <UART_SetConfig+0x210>
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	0112      	lsls	r2, r2, #4
 800510a:	4293      	cmp	r3, r2
 800510c:	d011      	beq.n	8005132 <UART_SetConfig+0x1e6>
 800510e:	2280      	movs	r2, #128	; 0x80
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	4293      	cmp	r3, r2
 8005114:	d822      	bhi.n	800515c <UART_SetConfig+0x210>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <UART_SetConfig+0x1d8>
 800511a:	2280      	movs	r2, #128	; 0x80
 800511c:	00d2      	lsls	r2, r2, #3
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <UART_SetConfig+0x1f4>
 8005122:	e01b      	b.n	800515c <UART_SetConfig+0x210>
 8005124:	231b      	movs	r3, #27
 8005126:	2218      	movs	r2, #24
 8005128:	189b      	adds	r3, r3, r2
 800512a:	19db      	adds	r3, r3, r7
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e021      	b.n	8005176 <UART_SetConfig+0x22a>
 8005132:	231b      	movs	r3, #27
 8005134:	2218      	movs	r2, #24
 8005136:	189b      	adds	r3, r3, r2
 8005138:	19db      	adds	r3, r3, r7
 800513a:	2202      	movs	r2, #2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e01a      	b.n	8005176 <UART_SetConfig+0x22a>
 8005140:	231b      	movs	r3, #27
 8005142:	2218      	movs	r2, #24
 8005144:	189b      	adds	r3, r3, r2
 8005146:	19db      	adds	r3, r3, r7
 8005148:	2204      	movs	r2, #4
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	e013      	b.n	8005176 <UART_SetConfig+0x22a>
 800514e:	231b      	movs	r3, #27
 8005150:	2218      	movs	r2, #24
 8005152:	189b      	adds	r3, r3, r2
 8005154:	19db      	adds	r3, r3, r7
 8005156:	2208      	movs	r2, #8
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e00c      	b.n	8005176 <UART_SetConfig+0x22a>
 800515c:	231b      	movs	r3, #27
 800515e:	2218      	movs	r2, #24
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2210      	movs	r2, #16
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e005      	b.n	8005176 <UART_SetConfig+0x22a>
 800516a:	231b      	movs	r3, #27
 800516c:	2218      	movs	r2, #24
 800516e:	189b      	adds	r3, r3, r2
 8005170:	19db      	adds	r3, r3, r7
 8005172:	2210      	movs	r2, #16
 8005174:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a46      	ldr	r2, [pc, #280]	; (8005294 <UART_SetConfig+0x348>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d000      	beq.n	8005182 <UART_SetConfig+0x236>
 8005180:	e09a      	b.n	80052b8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005182:	231b      	movs	r3, #27
 8005184:	2218      	movs	r2, #24
 8005186:	189b      	adds	r3, r3, r2
 8005188:	19db      	adds	r3, r3, r7
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d01d      	beq.n	80051cc <UART_SetConfig+0x280>
 8005190:	dc20      	bgt.n	80051d4 <UART_SetConfig+0x288>
 8005192:	2b04      	cmp	r3, #4
 8005194:	d015      	beq.n	80051c2 <UART_SetConfig+0x276>
 8005196:	dc1d      	bgt.n	80051d4 <UART_SetConfig+0x288>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <UART_SetConfig+0x256>
 800519c:	2b02      	cmp	r3, #2
 800519e:	d005      	beq.n	80051ac <UART_SetConfig+0x260>
 80051a0:	e018      	b.n	80051d4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a2:	f7ff fab9 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80051a6:	0003      	movs	r3, r0
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051aa:	e01c      	b.n	80051e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ac:	4b3c      	ldr	r3, [pc, #240]	; (80052a0 <UART_SetConfig+0x354>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	4013      	ands	r3, r2
 80051b4:	d002      	beq.n	80051bc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051b6:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <UART_SetConfig+0x364>)
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051ba:	e014      	b.n	80051e6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b3d      	ldr	r3, [pc, #244]	; (80052b4 <UART_SetConfig+0x368>)
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051c0:	e011      	b.n	80051e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7ff f9fb 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 80051c6:	0003      	movs	r3, r0
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ca:	e00c      	b.n	80051e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d2:	e008      	b.n	80051e6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051d8:	231a      	movs	r3, #26
 80051da:	2218      	movs	r2, #24
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
        break;
 80051e4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d100      	bne.n	80051ee <UART_SetConfig+0x2a2>
 80051ec:	e133      	b.n	8005456 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	0013      	movs	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d305      	bcc.n	800520a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005206:	429a      	cmp	r2, r3
 8005208:	d906      	bls.n	8005218 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800520a:	231a      	movs	r3, #26
 800520c:	2218      	movs	r2, #24
 800520e:	189b      	adds	r3, r3, r2
 8005210:	19db      	adds	r3, r3, r7
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e11e      	b.n	8005456 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	6939      	ldr	r1, [r7, #16]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	000b      	movs	r3, r1
 8005226:	0e1b      	lsrs	r3, r3, #24
 8005228:	0010      	movs	r0, r2
 800522a:	0205      	lsls	r5, r0, #8
 800522c:	431d      	orrs	r5, r3
 800522e:	000b      	movs	r3, r1
 8005230:	021c      	lsls	r4, r3, #8
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68b8      	ldr	r0, [r7, #8]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	1900      	adds	r0, r0, r4
 8005244:	4169      	adcs	r1, r5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f7fb f928 	bl	80004a8 <__aeabi_uldivmod>
 8005258:	0002      	movs	r2, r0
 800525a:	000b      	movs	r3, r1
 800525c:	0013      	movs	r3, r2
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005262:	23c0      	movs	r3, #192	; 0xc0
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	429a      	cmp	r2, r3
 8005268:	d309      	bcc.n	800527e <UART_SetConfig+0x332>
 800526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	035b      	lsls	r3, r3, #13
 8005270:	429a      	cmp	r2, r3
 8005272:	d204      	bcs.n	800527e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527a:	60da      	str	r2, [r3, #12]
 800527c:	e0eb      	b.n	8005456 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800527e:	231a      	movs	r3, #26
 8005280:	2218      	movs	r2, #24
 8005282:	189b      	adds	r3, r3, r2
 8005284:	19db      	adds	r3, r3, r7
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e0e4      	b.n	8005456 <UART_SetConfig+0x50a>
 800528c:	efff69f3 	.word	0xefff69f3
 8005290:	ffffcfff 	.word	0xffffcfff
 8005294:	40004800 	.word	0x40004800
 8005298:	fffff4ff 	.word	0xfffff4ff
 800529c:	40013800 	.word	0x40013800
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40004400 	.word	0x40004400
 80052a8:	40004c00 	.word	0x40004c00
 80052ac:	40005000 	.word	0x40005000
 80052b0:	003d0900 	.word	0x003d0900
 80052b4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d000      	beq.n	80052c6 <UART_SetConfig+0x37a>
 80052c4:	e070      	b.n	80053a8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80052c6:	231b      	movs	r3, #27
 80052c8:	2218      	movs	r2, #24
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	19db      	adds	r3, r3, r7
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d822      	bhi.n	800531a <UART_SetConfig+0x3ce>
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	4b67      	ldr	r3, [pc, #412]	; (8005474 <UART_SetConfig+0x528>)
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052de:	f7ff fa1b 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80052e2:	0003      	movs	r3, r0
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e6:	e021      	b.n	800532c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7ff fa2c 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80052ec:	0003      	movs	r3, r0
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052f0:	e01c      	b.n	800532c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f2:	4b61      	ldr	r3, [pc, #388]	; (8005478 <UART_SetConfig+0x52c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2210      	movs	r2, #16
 80052f8:	4013      	ands	r3, r2
 80052fa:	d002      	beq.n	8005302 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052fc:	4b5f      	ldr	r3, [pc, #380]	; (800547c <UART_SetConfig+0x530>)
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005300:	e014      	b.n	800532c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005302:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <UART_SetConfig+0x534>)
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005306:	e011      	b.n	800532c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005308:	f7ff f958 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800530c:	0003      	movs	r3, r0
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005310:	e00c      	b.n	800532c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005318:	e008      	b.n	800532c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800531e:	231a      	movs	r3, #26
 8005320:	2218      	movs	r2, #24
 8005322:	189b      	adds	r3, r3, r2
 8005324:	19db      	adds	r3, r3, r7
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
        break;
 800532a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d100      	bne.n	8005334 <UART_SetConfig+0x3e8>
 8005332:	e090      	b.n	8005456 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	005a      	lsls	r2, r3, #1
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	18d2      	adds	r2, r2, r3
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	0019      	movs	r1, r3
 8005346:	0010      	movs	r0, r2
 8005348:	f7fa fefa 	bl	8000140 <__udivsi3>
 800534c:	0003      	movs	r3, r0
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d921      	bls.n	800539a <UART_SetConfig+0x44e>
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	025b      	lsls	r3, r3, #9
 800535c:	429a      	cmp	r2, r3
 800535e:	d21c      	bcs.n	800539a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	b29a      	uxth	r2, r3
 8005364:	200e      	movs	r0, #14
 8005366:	2418      	movs	r4, #24
 8005368:	1903      	adds	r3, r0, r4
 800536a:	19db      	adds	r3, r3, r7
 800536c:	210f      	movs	r1, #15
 800536e:	438a      	bics	r2, r1
 8005370:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	2207      	movs	r2, #7
 800537a:	4013      	ands	r3, r2
 800537c:	b299      	uxth	r1, r3
 800537e:	1903      	adds	r3, r0, r4
 8005380:	19db      	adds	r3, r3, r7
 8005382:	1902      	adds	r2, r0, r4
 8005384:	19d2      	adds	r2, r2, r7
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	1902      	adds	r2, r0, r4
 8005392:	19d2      	adds	r2, r2, r7
 8005394:	8812      	ldrh	r2, [r2, #0]
 8005396:	60da      	str	r2, [r3, #12]
 8005398:	e05d      	b.n	8005456 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800539a:	231a      	movs	r3, #26
 800539c:	2218      	movs	r2, #24
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	19db      	adds	r3, r3, r7
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e056      	b.n	8005456 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053a8:	231b      	movs	r3, #27
 80053aa:	2218      	movs	r2, #24
 80053ac:	189b      	adds	r3, r3, r2
 80053ae:	19db      	adds	r3, r3, r7
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d822      	bhi.n	80053fc <UART_SetConfig+0x4b0>
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <UART_SetConfig+0x538>)
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7ff f9aa 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80053c4:	0003      	movs	r3, r0
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053c8:	e021      	b.n	800540e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ca:	f7ff f9bb 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80053ce:	0003      	movs	r3, r0
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053d2:	e01c      	b.n	800540e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <UART_SetConfig+0x52c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2210      	movs	r2, #16
 80053da:	4013      	ands	r3, r2
 80053dc:	d002      	beq.n	80053e4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053de:	4b27      	ldr	r3, [pc, #156]	; (800547c <UART_SetConfig+0x530>)
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053e2:	e014      	b.n	800540e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80053e4:	4b26      	ldr	r3, [pc, #152]	; (8005480 <UART_SetConfig+0x534>)
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053e8:	e011      	b.n	800540e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ea:	f7ff f8e7 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 80053ee:	0003      	movs	r3, r0
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053f2:	e00c      	b.n	800540e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053fa:	e008      	b.n	800540e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005400:	231a      	movs	r3, #26
 8005402:	2218      	movs	r2, #24
 8005404:	189b      	adds	r3, r3, r2
 8005406:	19db      	adds	r3, r3, r7
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
        break;
 800540c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d020      	beq.n	8005456 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085a      	lsrs	r2, r3, #1
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	18d2      	adds	r2, r2, r3
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	0019      	movs	r1, r3
 8005424:	0010      	movs	r0, r2
 8005426:	f7fa fe8b 	bl	8000140 <__udivsi3>
 800542a:	0003      	movs	r3, r0
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	2b0f      	cmp	r3, #15
 8005432:	d90a      	bls.n	800544a <UART_SetConfig+0x4fe>
 8005434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	025b      	lsls	r3, r3, #9
 800543a:	429a      	cmp	r2, r3
 800543c:	d205      	bcs.n	800544a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	b29a      	uxth	r2, r3
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e005      	b.n	8005456 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800544a:	231a      	movs	r3, #26
 800544c:	2218      	movs	r2, #24
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2200      	movs	r2, #0
 800545a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2200      	movs	r2, #0
 8005460:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005462:	231a      	movs	r3, #26
 8005464:	2218      	movs	r2, #24
 8005466:	189b      	adds	r3, r3, r2
 8005468:	19db      	adds	r3, r3, r7
 800546a:	781b      	ldrb	r3, [r3, #0]
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b00e      	add	sp, #56	; 0x38
 8005472:	bdb0      	pop	{r4, r5, r7, pc}
 8005474:	0800abb4 	.word	0x0800abb4
 8005478:	40021000 	.word	0x40021000
 800547c:	003d0900 	.word	0x003d0900
 8005480:	00f42400 	.word	0x00f42400
 8005484:	0800abd8 	.word	0x0800abd8

08005488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d00b      	beq.n	80054b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a4a      	ldr	r2, [pc, #296]	; (80055cc <UART_AdvFeatureConfig+0x144>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	0019      	movs	r1, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2202      	movs	r2, #2
 80054b8:	4013      	ands	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4a43      	ldr	r2, [pc, #268]	; (80055d0 <UART_AdvFeatureConfig+0x148>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2204      	movs	r2, #4
 80054da:	4013      	ands	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a3b      	ldr	r2, [pc, #236]	; (80055d4 <UART_AdvFeatureConfig+0x14c>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	0019      	movs	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2208      	movs	r2, #8
 80054fc:	4013      	ands	r3, r2
 80054fe:	d00b      	beq.n	8005518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <UART_AdvFeatureConfig+0x150>)
 8005508:	4013      	ands	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2210      	movs	r2, #16
 800551e:	4013      	ands	r3, r2
 8005520:	d00b      	beq.n	800553a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a2c      	ldr	r2, [pc, #176]	; (80055dc <UART_AdvFeatureConfig+0x154>)
 800552a:	4013      	ands	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2220      	movs	r2, #32
 8005540:	4013      	ands	r3, r2
 8005542:	d00b      	beq.n	800555c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <UART_AdvFeatureConfig+0x158>)
 800554c:	4013      	ands	r3, r2
 800554e:	0019      	movs	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2240      	movs	r2, #64	; 0x40
 8005562:	4013      	ands	r3, r2
 8005564:	d01d      	beq.n	80055a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <UART_AdvFeatureConfig+0x15c>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	035b      	lsls	r3, r3, #13
 8005586:	429a      	cmp	r2, r3
 8005588:	d10b      	bne.n	80055a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <UART_AdvFeatureConfig+0x160>)
 8005592:	4013      	ands	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	4013      	ands	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <UART_AdvFeatureConfig+0x164>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	fffdffff 	.word	0xfffdffff
 80055d0:	fffeffff 	.word	0xfffeffff
 80055d4:	fffbffff 	.word	0xfffbffff
 80055d8:	ffff7fff 	.word	0xffff7fff
 80055dc:	ffffefff 	.word	0xffffefff
 80055e0:	ffffdfff 	.word	0xffffdfff
 80055e4:	ffefffff 	.word	0xffefffff
 80055e8:	ff9fffff 	.word	0xff9fffff
 80055ec:	fff7ffff 	.word	0xfff7ffff

080055f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b092      	sub	sp, #72	; 0x48
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2284      	movs	r2, #132	; 0x84
 80055fc:	2100      	movs	r1, #0
 80055fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005600:	f7fd fe28 	bl	8003254 <HAL_GetTick>
 8005604:	0003      	movs	r3, r0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2208      	movs	r2, #8
 8005610:	4013      	ands	r3, r2
 8005612:	2b08      	cmp	r3, #8
 8005614:	d12c      	bne.n	8005670 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	0391      	lsls	r1, r2, #14
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4a46      	ldr	r2, [pc, #280]	; (8005738 <UART_CheckIdleState+0x148>)
 8005620:	9200      	str	r2, [sp, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	f000 f88c 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d021      	beq.n	8005670 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562c:	f3ef 8310 	mrs	r3, PRIMASK
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005634:	63bb      	str	r3, [r7, #56]	; 0x38
 8005636:	2301      	movs	r3, #1
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	f383 8810 	msr	PRIMASK, r3
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	438a      	bics	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	f383 8810 	msr	PRIMASK, r3
}
 800565c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2278      	movs	r2, #120	; 0x78
 8005668:	2100      	movs	r1, #0
 800566a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e05f      	b.n	8005730 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2204      	movs	r2, #4
 8005678:	4013      	ands	r3, r2
 800567a:	2b04      	cmp	r3, #4
 800567c:	d146      	bne.n	800570c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	03d1      	lsls	r1, r2, #15
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <UART_CheckIdleState+0x148>)
 8005688:	9200      	str	r2, [sp, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	f000 f858 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8005690:	1e03      	subs	r3, r0, #0
 8005692:	d03b      	beq.n	800570c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005694:	f3ef 8310 	mrs	r3, PRIMASK
 8005698:	60fb      	str	r3, [r7, #12]
  return(result);
 800569a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	2301      	movs	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			; (mov r8, r8)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4921      	ldr	r1, [pc, #132]	; (800573c <UART_CheckIdleState+0x14c>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f383 8810 	msr	PRIMASK, r3
}
 80056c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80056cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
 80056d0:	2301      	movs	r3, #1
 80056d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f383 8810 	msr	PRIMASK, r3
}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2101      	movs	r1, #1
 80056e8:	438a      	bics	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f383 8810 	msr	PRIMASK, r3
}
 80056f6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	2120      	movs	r1, #32
 80056fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2278      	movs	r2, #120	; 0x78
 8005704:	2100      	movs	r1, #0
 8005706:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e011      	b.n	8005730 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	2120      	movs	r1, #32
 8005718:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2278      	movs	r2, #120	; 0x78
 800572a:	2100      	movs	r1, #0
 800572c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b010      	add	sp, #64	; 0x40
 8005736:	bd80      	pop	{r7, pc}
 8005738:	01ffffff 	.word	0x01ffffff
 800573c:	fffffedf 	.word	0xfffffedf

08005740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	1dfb      	adds	r3, r7, #7
 800574e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005750:	e04b      	b.n	80057ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3301      	adds	r3, #1
 8005756:	d048      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005758:	f7fd fd7c 	bl	8003254 <HAL_GetTick>
 800575c:	0002      	movs	r2, r0
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	429a      	cmp	r2, r3
 8005766:	d302      	bcc.n	800576e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e04b      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2204      	movs	r2, #4
 800577a:	4013      	ands	r3, r2
 800577c:	d035      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	2208      	movs	r2, #8
 8005786:	4013      	ands	r3, r2
 8005788:	2b08      	cmp	r3, #8
 800578a:	d111      	bne.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 f906 	bl	80059a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2284      	movs	r2, #132	; 0x84
 80057a0:	2108      	movs	r1, #8
 80057a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2278      	movs	r2, #120	; 0x78
 80057a8:	2100      	movs	r1, #0
 80057aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e02c      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	401a      	ands	r2, r3
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d112      	bne.n	80057ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	0112      	lsls	r2, r2, #4
 80057cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f000 f8e9 	bl	80059a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2284      	movs	r2, #132	; 0x84
 80057da:	2120      	movs	r1, #32
 80057dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2278      	movs	r2, #120	; 0x78
 80057e2:	2100      	movs	r1, #0
 80057e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e00f      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	425a      	negs	r2, r3
 80057fa:	4153      	adcs	r3, r2
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	001a      	movs	r2, r3
 8005800:	1dfb      	adds	r3, r7, #7
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d0a4      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b004      	add	sp, #16
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b090      	sub	sp, #64	; 0x40
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	1dbb      	adds	r3, r7, #6
 8005820:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1dba      	adds	r2, r7, #6
 800582c:	2158      	movs	r1, #88	; 0x58
 800582e:	8812      	ldrh	r2, [r2, #0]
 8005830:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1dba      	adds	r2, r7, #6
 8005836:	215a      	movs	r1, #90	; 0x5a
 8005838:	8812      	ldrh	r2, [r2, #0]
 800583a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	015b      	lsls	r3, r3, #5
 800584a:	429a      	cmp	r2, r3
 800584c:	d10d      	bne.n	800586a <UART_Start_Receive_IT+0x56>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <UART_Start_Receive_IT+0x4c>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	225c      	movs	r2, #92	; 0x5c
 800585a:	4950      	ldr	r1, [pc, #320]	; (800599c <UART_Start_Receive_IT+0x188>)
 800585c:	5299      	strh	r1, [r3, r2]
 800585e:	e02e      	b.n	80058be <UART_Start_Receive_IT+0xaa>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	225c      	movs	r2, #92	; 0x5c
 8005864:	21ff      	movs	r1, #255	; 0xff
 8005866:	5299      	strh	r1, [r3, r2]
 8005868:	e029      	b.n	80058be <UART_Start_Receive_IT+0xaa>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <UART_Start_Receive_IT+0x7a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <UART_Start_Receive_IT+0x70>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	225c      	movs	r2, #92	; 0x5c
 800587e:	21ff      	movs	r1, #255	; 0xff
 8005880:	5299      	strh	r1, [r3, r2]
 8005882:	e01c      	b.n	80058be <UART_Start_Receive_IT+0xaa>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	225c      	movs	r2, #92	; 0x5c
 8005888:	217f      	movs	r1, #127	; 0x7f
 800588a:	5299      	strh	r1, [r3, r2]
 800588c:	e017      	b.n	80058be <UART_Start_Receive_IT+0xaa>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	055b      	lsls	r3, r3, #21
 8005896:	429a      	cmp	r2, r3
 8005898:	d10d      	bne.n	80058b6 <UART_Start_Receive_IT+0xa2>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <UART_Start_Receive_IT+0x98>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	225c      	movs	r2, #92	; 0x5c
 80058a6:	217f      	movs	r1, #127	; 0x7f
 80058a8:	5299      	strh	r1, [r3, r2]
 80058aa:	e008      	b.n	80058be <UART_Start_Receive_IT+0xaa>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	225c      	movs	r2, #92	; 0x5c
 80058b0:	213f      	movs	r1, #63	; 0x3f
 80058b2:	5299      	strh	r1, [r3, r2]
 80058b4:	e003      	b.n	80058be <UART_Start_Receive_IT+0xaa>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	225c      	movs	r2, #92	; 0x5c
 80058ba:	2100      	movs	r1, #0
 80058bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2284      	movs	r2, #132	; 0x84
 80058c2:	2100      	movs	r1, #0
 80058c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	2122      	movs	r1, #34	; 0x22
 80058cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ce:	f3ef 8310 	mrs	r3, PRIMASK
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	2301      	movs	r3, #1
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	f383 8810 	msr	PRIMASK, r3
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2101      	movs	r1, #1
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	015b      	lsls	r3, r3, #5
 8005908:	429a      	cmp	r2, r3
 800590a:	d107      	bne.n	800591c <UART_Start_Receive_IT+0x108>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <UART_Start_Receive_IT+0x18c>)
 8005918:	669a      	str	r2, [r3, #104]	; 0x68
 800591a:	e002      	b.n	8005922 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <UART_Start_Receive_IT+0x190>)
 8005920:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d019      	beq.n	800595e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592a:	f3ef 8310 	mrs	r3, PRIMASK
 800592e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005930:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
 8005934:	2301      	movs	r3, #1
 8005936:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	f383 8810 	msr	PRIMASK, r3
}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2190      	movs	r1, #144	; 0x90
 800594c:	0049      	lsls	r1, r1, #1
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	e018      	b.n	8005990 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595e:	f3ef 8310 	mrs	r3, PRIMASK
 8005962:	613b      	str	r3, [r7, #16]
  return(result);
 8005964:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f383 8810 	msr	PRIMASK, r3
}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2120      	movs	r1, #32
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f383 8810 	msr	PRIMASK, r3
}
 800598e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b010      	add	sp, #64	; 0x40
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	000001ff 	.word	0x000001ff
 80059a0:	08005cb9 	.word	0x08005cb9
 80059a4:	08005af5 	.word	0x08005af5

080059a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	; 0x38
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b0:	f3ef 8310 	mrs	r3, PRIMASK
 80059b4:	617b      	str	r3, [r7, #20]
  return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ba:	2301      	movs	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			; (mov r8, r8)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4926      	ldr	r1, [pc, #152]	; (8005a6c <UART_EndRxTransfer+0xc4>)
 80059d2:	400a      	ands	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e2:	f3ef 8310 	mrs	r3, PRIMASK
 80059e6:	623b      	str	r3, [r7, #32]
  return(result);
 80059e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
 80059ec:	2301      	movs	r3, #1
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2101      	movs	r1, #1
 8005a04:	438a      	bics	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d118      	bne.n	8005a4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	2301      	movs	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2110      	movs	r1, #16
 8005a3e:	438a      	bics	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f383 8810 	msr	PRIMASK, r3
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	2120      	movs	r1, #32
 8005a54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b00e      	add	sp, #56	; 0x38
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	fffffedf 	.word	0xfffffedf

08005a70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	225a      	movs	r2, #90	; 0x5a
 8005a82:	2100      	movs	r1, #0
 8005a84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2252      	movs	r2, #82	; 0x52
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7ff fa53 	bl	8004f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b004      	add	sp, #16
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2140      	movs	r1, #64	; 0x40
 8005ac8:	438a      	bics	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7ff fa18 	bl	8004f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b006      	add	sp, #24
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b094      	sub	sp, #80	; 0x50
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005afc:	204e      	movs	r0, #78	; 0x4e
 8005afe:	183b      	adds	r3, r7, r0
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	215c      	movs	r1, #92	; 0x5c
 8005b04:	5a52      	ldrh	r2, [r2, r1]
 8005b06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	589b      	ldr	r3, [r3, r2]
 8005b0e:	2b22      	cmp	r3, #34	; 0x22
 8005b10:	d000      	beq.n	8005b14 <UART_RxISR_8BIT+0x20>
 8005b12:	e0bf      	b.n	8005c94 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b1a:	214c      	movs	r1, #76	; 0x4c
 8005b1c:	187b      	adds	r3, r7, r1
 8005b1e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	183b      	adds	r3, r7, r0
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b2d9      	uxtb	r1, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	400a      	ands	r2, r1
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	225a      	movs	r2, #90	; 0x5a
 8005b44:	5a9b      	ldrh	r3, [r3, r2]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	225a      	movs	r2, #90	; 0x5a
 8005b50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	225a      	movs	r2, #90	; 0x5a
 8005b56:	5a9b      	ldrh	r3, [r3, r2]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d000      	beq.n	8005b60 <UART_RxISR_8BIT+0x6c>
 8005b5e:	e0a1      	b.n	8005ca4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b60:	f3ef 8310 	mrs	r3, PRIMASK
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	494a      	ldr	r1, [pc, #296]	; (8005cac <UART_RxISR_8BIT+0x1b8>)
 8005b82:	400a      	ands	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	f383 8810 	msr	PRIMASK, r3
}
 8005b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b92:	f3ef 8310 	mrs	r3, PRIMASK
 8005b96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	f383 8810 	msr	PRIMASK, r3
}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	438a      	bics	r2, r1
 8005bb6:	609a      	str	r2, [r3, #8]
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	f383 8810 	msr	PRIMASK, r3
}
 8005bc2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	2120      	movs	r1, #32
 8005bca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <UART_RxISR_8BIT+0x1bc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01f      	beq.n	8005c22 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	4013      	ands	r3, r2
 8005bee:	d018      	beq.n	8005c22 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4928      	ldr	r1, [pc, #160]	; (8005cb4 <UART_RxISR_8BIT+0x1c0>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d12f      	bne.n	8005c8a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c30:	f3ef 8310 	mrs	r3, PRIMASK
 8005c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c36:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f383 8810 	msr	PRIMASK, r3
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2110      	movs	r1, #16
 8005c52:	438a      	bics	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d103      	bne.n	8005c78 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2210      	movs	r2, #16
 8005c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2258      	movs	r2, #88	; 0x58
 8005c7c:	5a9a      	ldrh	r2, [r3, r2]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0011      	movs	r1, r2
 8005c82:	0018      	movs	r0, r3
 8005c84:	f7fc fd1a 	bl	80026bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c88:	e00c      	b.n	8005ca4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff f94d 	bl	8004f2c <HAL_UART_RxCpltCallback>
}
 8005c92:	e007      	b.n	8005ca4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2108      	movs	r1, #8
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b014      	add	sp, #80	; 0x50
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	fffffedf 	.word	0xfffffedf
 8005cb0:	40004800 	.word	0x40004800
 8005cb4:	fbffffff 	.word	0xfbffffff

08005cb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b094      	sub	sp, #80	; 0x50
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005cc0:	204e      	movs	r0, #78	; 0x4e
 8005cc2:	183b      	adds	r3, r7, r0
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	215c      	movs	r1, #92	; 0x5c
 8005cc8:	5a52      	ldrh	r2, [r2, r1]
 8005cca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	589b      	ldr	r3, [r3, r2]
 8005cd2:	2b22      	cmp	r3, #34	; 0x22
 8005cd4:	d000      	beq.n	8005cd8 <UART_RxISR_16BIT+0x20>
 8005cd6:	e0bf      	b.n	8005e58 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cde:	214c      	movs	r1, #76	; 0x4c
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cea:	187b      	adds	r3, r7, r1
 8005cec:	183a      	adds	r2, r7, r0
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	225a      	movs	r2, #90	; 0x5a
 8005d08:	5a9b      	ldrh	r3, [r3, r2]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b299      	uxth	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	225a      	movs	r2, #90	; 0x5a
 8005d14:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	225a      	movs	r2, #90	; 0x5a
 8005d1a:	5a9b      	ldrh	r3, [r3, r2]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d000      	beq.n	8005d24 <UART_RxISR_16BIT+0x6c>
 8005d22:	e0a1      	b.n	8005e68 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d24:	f3ef 8310 	mrs	r3, PRIMASK
 8005d28:	623b      	str	r3, [r7, #32]
  return(result);
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2e:	2301      	movs	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	494a      	ldr	r1, [pc, #296]	; (8005e70 <UART_RxISR_16BIT+0x1b8>)
 8005d46:	400a      	ands	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d56:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d60:	2301      	movs	r3, #1
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f383 8810 	msr	PRIMASK, r3
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2101      	movs	r1, #1
 8005d78:	438a      	bics	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
 8005d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	f383 8810 	msr	PRIMASK, r3
}
 8005d86:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	2120      	movs	r1, #32
 8005d8e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a34      	ldr	r2, [pc, #208]	; (8005e74 <UART_RxISR_16BIT+0x1bc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01f      	beq.n	8005de6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	4013      	ands	r3, r2
 8005db2:	d018      	beq.n	8005de6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db4:	f3ef 8310 	mrs	r3, PRIMASK
 8005db8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f383 8810 	msr	PRIMASK, r3
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4928      	ldr	r1, [pc, #160]	; (8005e78 <UART_RxISR_16BIT+0x1c0>)
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f383 8810 	msr	PRIMASK, r3
}
 8005de4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d12f      	bne.n	8005e4e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df4:	f3ef 8310 	mrs	r3, PRIMASK
 8005df8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dfa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dfe:	2301      	movs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f383 8810 	msr	PRIMASK, r3
}
 8005e08:	46c0      	nop			; (mov r8, r8)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2110      	movs	r1, #16
 8005e16:	438a      	bics	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f383 8810 	msr	PRIMASK, r3
}
 8005e24:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d103      	bne.n	8005e3c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2210      	movs	r2, #16
 8005e3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2258      	movs	r2, #88	; 0x58
 8005e40:	5a9a      	ldrh	r2, [r3, r2]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7fc fc38 	bl	80026bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e4c:	e00c      	b.n	8005e68 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7ff f86b 	bl	8004f2c <HAL_UART_RxCpltCallback>
}
 8005e56:	e007      	b.n	8005e68 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2108      	movs	r1, #8
 8005e64:	430a      	orrs	r2, r1
 8005e66:	619a      	str	r2, [r3, #24]
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b014      	add	sp, #80	; 0x50
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	fffffedf 	.word	0xfffffedf
 8005e74:	40004800 	.word	0x40004800
 8005e78:	fbffffff 	.word	0xfbffffff

08005e7c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e05b      	b.n	8005f4c <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d107      	bne.n	8005eac <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2278      	movs	r2, #120	; 0x78
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7fc ff82 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7ff f841 	bl	8004f4c <UART_SetConfig>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e03b      	b.n	8005f4c <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f7ff fad2 	bl	8005488 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2180      	movs	r1, #128	; 0x80
 8005ef0:	01c9      	lsls	r1, r1, #7
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_RS485Ex_Init+0xd8>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	0019      	movs	r1, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	055b      	lsls	r3, r3, #21
 8005f10:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	041b      	lsls	r3, r3, #16
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <HAL_RS485Ex_Init+0xdc>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	0018      	movs	r0, r3
 8005f46:	f7ff fb53 	bl	80055f0 <UART_CheckIdleState>
 8005f4a:	0003      	movs	r3, r0
}
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b006      	add	sp, #24
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	ffff7fff 	.word	0xffff7fff
 8005f58:	fc00ffff 	.word	0xfc00ffff

08005f5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f6c:	b5b0      	push	{r4, r5, r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	1dbb      	adds	r3, r7, #6
 8005f78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	589b      	ldr	r3, [r3, r2]
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d156      	bne.n	8006032 <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005f8a:	1dbb      	adds	r3, r7, #6
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e04e      	b.n	8006034 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	015b      	lsls	r3, r3, #5
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d109      	bne.n	8005fb6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2201      	movs	r2, #1
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d001      	beq.n	8005fb6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e03e      	b.n	8006034 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005fc2:	2527      	movs	r5, #39	; 0x27
 8005fc4:	197c      	adds	r4, r7, r5
 8005fc6:	1dbb      	adds	r3, r7, #6
 8005fc8:	881a      	ldrh	r2, [r3, #0]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f7ff fc20 	bl	8005814 <UART_Start_Receive_IT>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fd8:	197b      	adds	r3, r7, r5
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d124      	bne.n	800602a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d11c      	bne.n	8006022 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2210      	movs	r2, #16
 8005fee:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ff6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f383 8810 	msr	PRIMASK, r3
}
 8006004:	46c0      	nop			; (mov r8, r8)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2110      	movs	r1, #16
 8006012:	430a      	orrs	r2, r1
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f383 8810 	msr	PRIMASK, r3
}
 8006020:	e003      	b.n	800602a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006022:	2327      	movs	r3, #39	; 0x27
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800602a:	2327      	movs	r3, #39	; 0x27
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	e000      	b.n	8006034 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
  }
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	b00a      	add	sp, #40	; 0x28
 800603a:	bdb0      	pop	{r4, r5, r7, pc}

0800603c <__cvt>:
 800603c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603e:	001e      	movs	r6, r3
 8006040:	2300      	movs	r3, #0
 8006042:	0014      	movs	r4, r2
 8006044:	b08b      	sub	sp, #44	; 0x2c
 8006046:	429e      	cmp	r6, r3
 8006048:	da04      	bge.n	8006054 <__cvt+0x18>
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	0609      	lsls	r1, r1, #24
 800604e:	1873      	adds	r3, r6, r1
 8006050:	001e      	movs	r6, r3
 8006052:	232d      	movs	r3, #45	; 0x2d
 8006054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006056:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006058:	7013      	strb	r3, [r2, #0]
 800605a:	2320      	movs	r3, #32
 800605c:	2203      	movs	r2, #3
 800605e:	439f      	bics	r7, r3
 8006060:	2f46      	cmp	r7, #70	; 0x46
 8006062:	d007      	beq.n	8006074 <__cvt+0x38>
 8006064:	003b      	movs	r3, r7
 8006066:	3b45      	subs	r3, #69	; 0x45
 8006068:	4259      	negs	r1, r3
 800606a:	414b      	adcs	r3, r1
 800606c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800606e:	3a01      	subs	r2, #1
 8006070:	18cb      	adds	r3, r1, r3
 8006072:	9310      	str	r3, [sp, #64]	; 0x40
 8006074:	ab09      	add	r3, sp, #36	; 0x24
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	ab08      	add	r3, sp, #32
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800607e:	9200      	str	r2, [sp, #0]
 8006080:	9302      	str	r3, [sp, #8]
 8006082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006084:	0022      	movs	r2, r4
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	0033      	movs	r3, r6
 800608a:	f001 f9c3 	bl	8007414 <_dtoa_r>
 800608e:	0005      	movs	r5, r0
 8006090:	2f47      	cmp	r7, #71	; 0x47
 8006092:	d102      	bne.n	800609a <__cvt+0x5e>
 8006094:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006096:	07db      	lsls	r3, r3, #31
 8006098:	d528      	bpl.n	80060ec <__cvt+0xb0>
 800609a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800609c:	18eb      	adds	r3, r5, r3
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	2f46      	cmp	r7, #70	; 0x46
 80060a2:	d114      	bne.n	80060ce <__cvt+0x92>
 80060a4:	782b      	ldrb	r3, [r5, #0]
 80060a6:	2b30      	cmp	r3, #48	; 0x30
 80060a8:	d10c      	bne.n	80060c4 <__cvt+0x88>
 80060aa:	2200      	movs	r2, #0
 80060ac:	2300      	movs	r3, #0
 80060ae:	0020      	movs	r0, r4
 80060b0:	0031      	movs	r1, r6
 80060b2:	f7fa f9cb 	bl	800044c <__aeabi_dcmpeq>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d104      	bne.n	80060c4 <__cvt+0x88>
 80060ba:	2301      	movs	r3, #1
 80060bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060c6:	9a07      	ldr	r2, [sp, #28]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	18d3      	adds	r3, r2, r3
 80060cc:	9307      	str	r3, [sp, #28]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2300      	movs	r3, #0
 80060d2:	0020      	movs	r0, r4
 80060d4:	0031      	movs	r1, r6
 80060d6:	f7fa f9b9 	bl	800044c <__aeabi_dcmpeq>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d001      	beq.n	80060e2 <__cvt+0xa6>
 80060de:	9b07      	ldr	r3, [sp, #28]
 80060e0:	9309      	str	r3, [sp, #36]	; 0x24
 80060e2:	2230      	movs	r2, #48	; 0x30
 80060e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e6:	9907      	ldr	r1, [sp, #28]
 80060e8:	428b      	cmp	r3, r1
 80060ea:	d306      	bcc.n	80060fa <__cvt+0xbe>
 80060ec:	0028      	movs	r0, r5
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060f2:	1b5b      	subs	r3, r3, r5
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	b00b      	add	sp, #44	; 0x2c
 80060f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	9109      	str	r1, [sp, #36]	; 0x24
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e7f0      	b.n	80060e4 <__cvt+0xa8>

08006102 <__exponent>:
 8006102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006104:	1c83      	adds	r3, r0, #2
 8006106:	b087      	sub	sp, #28
 8006108:	9303      	str	r3, [sp, #12]
 800610a:	0005      	movs	r5, r0
 800610c:	000c      	movs	r4, r1
 800610e:	232b      	movs	r3, #43	; 0x2b
 8006110:	7002      	strb	r2, [r0, #0]
 8006112:	2900      	cmp	r1, #0
 8006114:	da01      	bge.n	800611a <__exponent+0x18>
 8006116:	424c      	negs	r4, r1
 8006118:	3302      	adds	r3, #2
 800611a:	706b      	strb	r3, [r5, #1]
 800611c:	2c09      	cmp	r4, #9
 800611e:	dd2f      	ble.n	8006180 <__exponent+0x7e>
 8006120:	270a      	movs	r7, #10
 8006122:	ab04      	add	r3, sp, #16
 8006124:	1dde      	adds	r6, r3, #7
 8006126:	0020      	movs	r0, r4
 8006128:	0039      	movs	r1, r7
 800612a:	9601      	str	r6, [sp, #4]
 800612c:	f7fa f978 	bl	8000420 <__aeabi_idivmod>
 8006130:	3e01      	subs	r6, #1
 8006132:	3130      	adds	r1, #48	; 0x30
 8006134:	0020      	movs	r0, r4
 8006136:	7031      	strb	r1, [r6, #0]
 8006138:	0039      	movs	r1, r7
 800613a:	9402      	str	r4, [sp, #8]
 800613c:	f7fa f88a 	bl	8000254 <__divsi3>
 8006140:	9b02      	ldr	r3, [sp, #8]
 8006142:	0004      	movs	r4, r0
 8006144:	2b63      	cmp	r3, #99	; 0x63
 8006146:	dcee      	bgt.n	8006126 <__exponent+0x24>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	3430      	adds	r4, #48	; 0x30
 800614c:	1e9a      	subs	r2, r3, #2
 800614e:	0013      	movs	r3, r2
 8006150:	9903      	ldr	r1, [sp, #12]
 8006152:	7014      	strb	r4, [r2, #0]
 8006154:	a804      	add	r0, sp, #16
 8006156:	3007      	adds	r0, #7
 8006158:	4298      	cmp	r0, r3
 800615a:	d80c      	bhi.n	8006176 <__exponent+0x74>
 800615c:	2300      	movs	r3, #0
 800615e:	4282      	cmp	r2, r0
 8006160:	d804      	bhi.n	800616c <__exponent+0x6a>
 8006162:	aa04      	add	r2, sp, #16
 8006164:	3309      	adds	r3, #9
 8006166:	189b      	adds	r3, r3, r2
 8006168:	9a01      	ldr	r2, [sp, #4]
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	9a03      	ldr	r2, [sp, #12]
 800616e:	18d3      	adds	r3, r2, r3
 8006170:	1b58      	subs	r0, r3, r5
 8006172:	b007      	add	sp, #28
 8006174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006176:	7818      	ldrb	r0, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	7008      	strb	r0, [r1, #0]
 800617c:	3101      	adds	r1, #1
 800617e:	e7e9      	b.n	8006154 <__exponent+0x52>
 8006180:	2330      	movs	r3, #48	; 0x30
 8006182:	3430      	adds	r4, #48	; 0x30
 8006184:	70ab      	strb	r3, [r5, #2]
 8006186:	70ec      	strb	r4, [r5, #3]
 8006188:	1d2b      	adds	r3, r5, #4
 800618a:	e7f1      	b.n	8006170 <__exponent+0x6e>

0800618c <_printf_float>:
 800618c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618e:	b095      	sub	sp, #84	; 0x54
 8006190:	000c      	movs	r4, r1
 8006192:	9208      	str	r2, [sp, #32]
 8006194:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006196:	9309      	str	r3, [sp, #36]	; 0x24
 8006198:	0007      	movs	r7, r0
 800619a:	f001 f81d 	bl	80071d8 <_localeconv_r>
 800619e:	6803      	ldr	r3, [r0, #0]
 80061a0:	0018      	movs	r0, r3
 80061a2:	930c      	str	r3, [sp, #48]	; 0x30
 80061a4:	f7f9 ffb0 	bl	8000108 <strlen>
 80061a8:	2300      	movs	r3, #0
 80061aa:	9312      	str	r3, [sp, #72]	; 0x48
 80061ac:	7e23      	ldrb	r3, [r4, #24]
 80061ae:	2207      	movs	r2, #7
 80061b0:	930a      	str	r3, [sp, #40]	; 0x28
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	900d      	str	r0, [sp, #52]	; 0x34
 80061b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	05c9      	lsls	r1, r1, #23
 80061be:	d547      	bpl.n	8006250 <_printf_float+0xc4>
 80061c0:	189b      	adds	r3, r3, r2
 80061c2:	4393      	bics	r3, r2
 80061c4:	001a      	movs	r2, r3
 80061c6:	3208      	adds	r2, #8
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	681e      	ldr	r6, [r3, #0]
 80061cc:	685d      	ldr	r5, [r3, #4]
 80061ce:	0032      	movs	r2, r6
 80061d0:	002b      	movs	r3, r5
 80061d2:	64a2      	str	r2, [r4, #72]	; 0x48
 80061d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80061d6:	2201      	movs	r2, #1
 80061d8:	006b      	lsls	r3, r5, #1
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	930e      	str	r3, [sp, #56]	; 0x38
 80061de:	0030      	movs	r0, r6
 80061e0:	4bab      	ldr	r3, [pc, #684]	; (8006490 <_printf_float+0x304>)
 80061e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061e4:	4252      	negs	r2, r2
 80061e6:	f7fc f887 	bl	80022f8 <__aeabi_dcmpun>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d132      	bne.n	8006254 <_printf_float+0xc8>
 80061ee:	2201      	movs	r2, #1
 80061f0:	0030      	movs	r0, r6
 80061f2:	4ba7      	ldr	r3, [pc, #668]	; (8006490 <_printf_float+0x304>)
 80061f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061f6:	4252      	negs	r2, r2
 80061f8:	f7fa f938 	bl	800046c <__aeabi_dcmple>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d129      	bne.n	8006254 <_printf_float+0xc8>
 8006200:	2200      	movs	r2, #0
 8006202:	2300      	movs	r3, #0
 8006204:	0030      	movs	r0, r6
 8006206:	0029      	movs	r1, r5
 8006208:	f7fa f926 	bl	8000458 <__aeabi_dcmplt>
 800620c:	2800      	cmp	r0, #0
 800620e:	d003      	beq.n	8006218 <_printf_float+0x8c>
 8006210:	0023      	movs	r3, r4
 8006212:	222d      	movs	r2, #45	; 0x2d
 8006214:	3343      	adds	r3, #67	; 0x43
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621a:	4d9e      	ldr	r5, [pc, #632]	; (8006494 <_printf_float+0x308>)
 800621c:	2b47      	cmp	r3, #71	; 0x47
 800621e:	d900      	bls.n	8006222 <_printf_float+0x96>
 8006220:	4d9d      	ldr	r5, [pc, #628]	; (8006498 <_printf_float+0x30c>)
 8006222:	2303      	movs	r3, #3
 8006224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	439a      	bics	r2, r3
 800622c:	2300      	movs	r3, #0
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	930b      	str	r3, [sp, #44]	; 0x2c
 8006232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006234:	0021      	movs	r1, r4
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	0038      	movs	r0, r7
 800623a:	9b08      	ldr	r3, [sp, #32]
 800623c:	aa13      	add	r2, sp, #76	; 0x4c
 800623e:	f000 f9fb 	bl	8006638 <_printf_common>
 8006242:	3001      	adds	r0, #1
 8006244:	d000      	beq.n	8006248 <_printf_float+0xbc>
 8006246:	e0a3      	b.n	8006390 <_printf_float+0x204>
 8006248:	2001      	movs	r0, #1
 800624a:	4240      	negs	r0, r0
 800624c:	b015      	add	sp, #84	; 0x54
 800624e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006250:	3307      	adds	r3, #7
 8006252:	e7b6      	b.n	80061c2 <_printf_float+0x36>
 8006254:	0032      	movs	r2, r6
 8006256:	002b      	movs	r3, r5
 8006258:	0030      	movs	r0, r6
 800625a:	0029      	movs	r1, r5
 800625c:	f7fc f84c 	bl	80022f8 <__aeabi_dcmpun>
 8006260:	2800      	cmp	r0, #0
 8006262:	d00b      	beq.n	800627c <_printf_float+0xf0>
 8006264:	2d00      	cmp	r5, #0
 8006266:	da03      	bge.n	8006270 <_printf_float+0xe4>
 8006268:	0023      	movs	r3, r4
 800626a:	222d      	movs	r2, #45	; 0x2d
 800626c:	3343      	adds	r3, #67	; 0x43
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006272:	4d8a      	ldr	r5, [pc, #552]	; (800649c <_printf_float+0x310>)
 8006274:	2b47      	cmp	r3, #71	; 0x47
 8006276:	d9d4      	bls.n	8006222 <_printf_float+0x96>
 8006278:	4d89      	ldr	r5, [pc, #548]	; (80064a0 <_printf_float+0x314>)
 800627a:	e7d2      	b.n	8006222 <_printf_float+0x96>
 800627c:	2220      	movs	r2, #32
 800627e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	4391      	bics	r1, r2
 8006284:	910e      	str	r1, [sp, #56]	; 0x38
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	d14a      	bne.n	8006320 <_printf_float+0x194>
 800628a:	3307      	adds	r3, #7
 800628c:	6063      	str	r3, [r4, #4]
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4313      	orrs	r3, r2
 8006296:	2200      	movs	r2, #0
 8006298:	9206      	str	r2, [sp, #24]
 800629a:	aa12      	add	r2, sp, #72	; 0x48
 800629c:	9205      	str	r2, [sp, #20]
 800629e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	9204      	str	r2, [sp, #16]
 80062a4:	aa11      	add	r2, sp, #68	; 0x44
 80062a6:	9203      	str	r2, [sp, #12]
 80062a8:	2223      	movs	r2, #35	; 0x23
 80062aa:	a908      	add	r1, sp, #32
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	1852      	adds	r2, r2, r1
 80062b2:	9202      	str	r2, [sp, #8]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	0032      	movs	r2, r6
 80062b8:	002b      	movs	r3, r5
 80062ba:	0038      	movs	r0, r7
 80062bc:	f7ff febe 	bl	800603c <__cvt>
 80062c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c2:	0005      	movs	r5, r0
 80062c4:	2b47      	cmp	r3, #71	; 0x47
 80062c6:	d109      	bne.n	80062dc <_printf_float+0x150>
 80062c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062ca:	1cda      	adds	r2, r3, #3
 80062cc:	db02      	blt.n	80062d4 <_printf_float+0x148>
 80062ce:	6862      	ldr	r2, [r4, #4]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	dd49      	ble.n	8006368 <_printf_float+0x1dc>
 80062d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d6:	3b02      	subs	r3, #2
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	930a      	str	r3, [sp, #40]	; 0x28
 80062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80062e0:	2b65      	cmp	r3, #101	; 0x65
 80062e2:	d824      	bhi.n	800632e <_printf_float+0x1a2>
 80062e4:	0020      	movs	r0, r4
 80062e6:	001a      	movs	r2, r3
 80062e8:	3901      	subs	r1, #1
 80062ea:	3050      	adds	r0, #80	; 0x50
 80062ec:	9111      	str	r1, [sp, #68]	; 0x44
 80062ee:	f7ff ff08 	bl	8006102 <__exponent>
 80062f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80062f6:	1813      	adds	r3, r2, r0
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	2a01      	cmp	r2, #1
 80062fc:	dc02      	bgt.n	8006304 <_printf_float+0x178>
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	07d2      	lsls	r2, r2, #31
 8006302:	d501      	bpl.n	8006308 <_printf_float+0x17c>
 8006304:	3301      	adds	r3, #1
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	2323      	movs	r3, #35	; 0x23
 800630a:	aa08      	add	r2, sp, #32
 800630c:	189b      	adds	r3, r3, r2
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d100      	bne.n	8006316 <_printf_float+0x18a>
 8006314:	e78d      	b.n	8006232 <_printf_float+0xa6>
 8006316:	0023      	movs	r3, r4
 8006318:	222d      	movs	r2, #45	; 0x2d
 800631a:	3343      	adds	r3, #67	; 0x43
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e788      	b.n	8006232 <_printf_float+0xa6>
 8006320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006322:	2a47      	cmp	r2, #71	; 0x47
 8006324:	d1b3      	bne.n	800628e <_printf_float+0x102>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1b1      	bne.n	800628e <_printf_float+0x102>
 800632a:	3301      	adds	r3, #1
 800632c:	e7ae      	b.n	800628c <_printf_float+0x100>
 800632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006330:	2b66      	cmp	r3, #102	; 0x66
 8006332:	d11b      	bne.n	800636c <_printf_float+0x1e0>
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	2900      	cmp	r1, #0
 8006338:	dd09      	ble.n	800634e <_printf_float+0x1c2>
 800633a:	6121      	str	r1, [r4, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <_printf_float+0x1ba>
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	07d2      	lsls	r2, r2, #31
 8006344:	d50b      	bpl.n	800635e <_printf_float+0x1d2>
 8006346:	3301      	adds	r3, #1
 8006348:	185b      	adds	r3, r3, r1
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	e007      	b.n	800635e <_printf_float+0x1d2>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <_printf_float+0x1ce>
 8006352:	2201      	movs	r2, #1
 8006354:	6821      	ldr	r1, [r4, #0]
 8006356:	4211      	tst	r1, r2
 8006358:	d000      	beq.n	800635c <_printf_float+0x1d0>
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	6122      	str	r2, [r4, #16]
 800635e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006360:	65a3      	str	r3, [r4, #88]	; 0x58
 8006362:	2300      	movs	r3, #0
 8006364:	930b      	str	r3, [sp, #44]	; 0x2c
 8006366:	e7cf      	b.n	8006308 <_printf_float+0x17c>
 8006368:	2367      	movs	r3, #103	; 0x67
 800636a:	930a      	str	r3, [sp, #40]	; 0x28
 800636c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800636e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006370:	4299      	cmp	r1, r3
 8006372:	db06      	blt.n	8006382 <_printf_float+0x1f6>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	6121      	str	r1, [r4, #16]
 8006378:	07db      	lsls	r3, r3, #31
 800637a:	d5f0      	bpl.n	800635e <_printf_float+0x1d2>
 800637c:	3101      	adds	r1, #1
 800637e:	6121      	str	r1, [r4, #16]
 8006380:	e7ed      	b.n	800635e <_printf_float+0x1d2>
 8006382:	2201      	movs	r2, #1
 8006384:	2900      	cmp	r1, #0
 8006386:	dc01      	bgt.n	800638c <_printf_float+0x200>
 8006388:	1892      	adds	r2, r2, r2
 800638a:	1a52      	subs	r2, r2, r1
 800638c:	189b      	adds	r3, r3, r2
 800638e:	e7dc      	b.n	800634a <_printf_float+0x1be>
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	0553      	lsls	r3, r2, #21
 8006394:	d408      	bmi.n	80063a8 <_printf_float+0x21c>
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	002a      	movs	r2, r5
 800639a:	0038      	movs	r0, r7
 800639c:	9908      	ldr	r1, [sp, #32]
 800639e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063a0:	47a8      	blx	r5
 80063a2:	3001      	adds	r0, #1
 80063a4:	d12a      	bne.n	80063fc <_printf_float+0x270>
 80063a6:	e74f      	b.n	8006248 <_printf_float+0xbc>
 80063a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063aa:	2b65      	cmp	r3, #101	; 0x65
 80063ac:	d800      	bhi.n	80063b0 <_printf_float+0x224>
 80063ae:	e0ec      	b.n	800658a <_printf_float+0x3fe>
 80063b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80063b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80063b4:	2200      	movs	r2, #0
 80063b6:	2300      	movs	r3, #0
 80063b8:	f7fa f848 	bl	800044c <__aeabi_dcmpeq>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d034      	beq.n	800642a <_printf_float+0x29e>
 80063c0:	2301      	movs	r3, #1
 80063c2:	0038      	movs	r0, r7
 80063c4:	4a37      	ldr	r2, [pc, #220]	; (80064a4 <_printf_float+0x318>)
 80063c6:	9908      	ldr	r1, [sp, #32]
 80063c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063ca:	47a8      	blx	r5
 80063cc:	3001      	adds	r0, #1
 80063ce:	d100      	bne.n	80063d2 <_printf_float+0x246>
 80063d0:	e73a      	b.n	8006248 <_printf_float+0xbc>
 80063d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063d6:	429a      	cmp	r2, r3
 80063d8:	db02      	blt.n	80063e0 <_printf_float+0x254>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	07db      	lsls	r3, r3, #31
 80063de:	d50d      	bpl.n	80063fc <_printf_float+0x270>
 80063e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063e2:	0038      	movs	r0, r7
 80063e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063e8:	9908      	ldr	r1, [sp, #32]
 80063ea:	47a8      	blx	r5
 80063ec:	2500      	movs	r5, #0
 80063ee:	3001      	adds	r0, #1
 80063f0:	d100      	bne.n	80063f4 <_printf_float+0x268>
 80063f2:	e729      	b.n	8006248 <_printf_float+0xbc>
 80063f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063f6:	3b01      	subs	r3, #1
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc0a      	bgt.n	8006412 <_printf_float+0x286>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	079b      	lsls	r3, r3, #30
 8006400:	d500      	bpl.n	8006404 <_printf_float+0x278>
 8006402:	e116      	b.n	8006632 <_printf_float+0x4a6>
 8006404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006406:	68e0      	ldr	r0, [r4, #12]
 8006408:	4298      	cmp	r0, r3
 800640a:	db00      	blt.n	800640e <_printf_float+0x282>
 800640c:	e71e      	b.n	800624c <_printf_float+0xc0>
 800640e:	0018      	movs	r0, r3
 8006410:	e71c      	b.n	800624c <_printf_float+0xc0>
 8006412:	0022      	movs	r2, r4
 8006414:	2301      	movs	r3, #1
 8006416:	0038      	movs	r0, r7
 8006418:	9908      	ldr	r1, [sp, #32]
 800641a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800641c:	321a      	adds	r2, #26
 800641e:	47b0      	blx	r6
 8006420:	3001      	adds	r0, #1
 8006422:	d100      	bne.n	8006426 <_printf_float+0x29a>
 8006424:	e710      	b.n	8006248 <_printf_float+0xbc>
 8006426:	3501      	adds	r5, #1
 8006428:	e7e4      	b.n	80063f4 <_printf_float+0x268>
 800642a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800642c:	2b00      	cmp	r3, #0
 800642e:	dc3b      	bgt.n	80064a8 <_printf_float+0x31c>
 8006430:	2301      	movs	r3, #1
 8006432:	0038      	movs	r0, r7
 8006434:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <_printf_float+0x318>)
 8006436:	9908      	ldr	r1, [sp, #32]
 8006438:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800643a:	47b0      	blx	r6
 800643c:	3001      	adds	r0, #1
 800643e:	d100      	bne.n	8006442 <_printf_float+0x2b6>
 8006440:	e702      	b.n	8006248 <_printf_float+0xbc>
 8006442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006446:	4313      	orrs	r3, r2
 8006448:	d102      	bne.n	8006450 <_printf_float+0x2c4>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	07db      	lsls	r3, r3, #31
 800644e:	d5d5      	bpl.n	80063fc <_printf_float+0x270>
 8006450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006452:	0038      	movs	r0, r7
 8006454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006456:	9908      	ldr	r1, [sp, #32]
 8006458:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800645a:	47b0      	blx	r6
 800645c:	2300      	movs	r3, #0
 800645e:	3001      	adds	r0, #1
 8006460:	d100      	bne.n	8006464 <_printf_float+0x2d8>
 8006462:	e6f1      	b.n	8006248 <_printf_float+0xbc>
 8006464:	930a      	str	r3, [sp, #40]	; 0x28
 8006466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646a:	425b      	negs	r3, r3
 800646c:	4293      	cmp	r3, r2
 800646e:	dc01      	bgt.n	8006474 <_printf_float+0x2e8>
 8006470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006472:	e791      	b.n	8006398 <_printf_float+0x20c>
 8006474:	0022      	movs	r2, r4
 8006476:	2301      	movs	r3, #1
 8006478:	0038      	movs	r0, r7
 800647a:	9908      	ldr	r1, [sp, #32]
 800647c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800647e:	321a      	adds	r2, #26
 8006480:	47b0      	blx	r6
 8006482:	3001      	adds	r0, #1
 8006484:	d100      	bne.n	8006488 <_printf_float+0x2fc>
 8006486:	e6df      	b.n	8006248 <_printf_float+0xbc>
 8006488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648a:	3301      	adds	r3, #1
 800648c:	e7ea      	b.n	8006464 <_printf_float+0x2d8>
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	7fefffff 	.word	0x7fefffff
 8006494:	0800abfc 	.word	0x0800abfc
 8006498:	0800ac00 	.word	0x0800ac00
 800649c:	0800ac04 	.word	0x0800ac04
 80064a0:	0800ac08 	.word	0x0800ac08
 80064a4:	0800ac0c 	.word	0x0800ac0c
 80064a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064ac:	920a      	str	r2, [sp, #40]	; 0x28
 80064ae:	429a      	cmp	r2, r3
 80064b0:	dd00      	ble.n	80064b4 <_printf_float+0x328>
 80064b2:	930a      	str	r3, [sp, #40]	; 0x28
 80064b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dc3d      	bgt.n	8006536 <_printf_float+0x3aa>
 80064ba:	2300      	movs	r3, #0
 80064bc:	930e      	str	r3, [sp, #56]	; 0x38
 80064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c0:	43db      	mvns	r3, r3
 80064c2:	17db      	asrs	r3, r3, #31
 80064c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80064cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ce:	4013      	ands	r3, r2
 80064d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d6:	4293      	cmp	r3, r2
 80064d8:	dc36      	bgt.n	8006548 <_printf_float+0x3bc>
 80064da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064de:	429a      	cmp	r2, r3
 80064e0:	db40      	blt.n	8006564 <_printf_float+0x3d8>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	07db      	lsls	r3, r3, #31
 80064e6:	d43d      	bmi.n	8006564 <_printf_float+0x3d8>
 80064e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80064ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ee:	1af3      	subs	r3, r6, r3
 80064f0:	1ab6      	subs	r6, r6, r2
 80064f2:	429e      	cmp	r6, r3
 80064f4:	dd00      	ble.n	80064f8 <_printf_float+0x36c>
 80064f6:	001e      	movs	r6, r3
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	dc3c      	bgt.n	8006576 <_printf_float+0x3ea>
 80064fc:	2300      	movs	r3, #0
 80064fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006500:	43f3      	mvns	r3, r6
 8006502:	17db      	asrs	r3, r3, #31
 8006504:	930b      	str	r3, [sp, #44]	; 0x2c
 8006506:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800650e:	4032      	ands	r2, r6
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006514:	4293      	cmp	r3, r2
 8006516:	dc00      	bgt.n	800651a <_printf_float+0x38e>
 8006518:	e770      	b.n	80063fc <_printf_float+0x270>
 800651a:	0022      	movs	r2, r4
 800651c:	2301      	movs	r3, #1
 800651e:	0038      	movs	r0, r7
 8006520:	9908      	ldr	r1, [sp, #32]
 8006522:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006524:	321a      	adds	r2, #26
 8006526:	47a8      	blx	r5
 8006528:	3001      	adds	r0, #1
 800652a:	d100      	bne.n	800652e <_printf_float+0x3a2>
 800652c:	e68c      	b.n	8006248 <_printf_float+0xbc>
 800652e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006530:	3301      	adds	r3, #1
 8006532:	930a      	str	r3, [sp, #40]	; 0x28
 8006534:	e7e7      	b.n	8006506 <_printf_float+0x37a>
 8006536:	002a      	movs	r2, r5
 8006538:	0038      	movs	r0, r7
 800653a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653c:	9908      	ldr	r1, [sp, #32]
 800653e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006540:	47b0      	blx	r6
 8006542:	3001      	adds	r0, #1
 8006544:	d1b9      	bne.n	80064ba <_printf_float+0x32e>
 8006546:	e67f      	b.n	8006248 <_printf_float+0xbc>
 8006548:	0022      	movs	r2, r4
 800654a:	2301      	movs	r3, #1
 800654c:	0038      	movs	r0, r7
 800654e:	9908      	ldr	r1, [sp, #32]
 8006550:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006552:	321a      	adds	r2, #26
 8006554:	47b0      	blx	r6
 8006556:	3001      	adds	r0, #1
 8006558:	d100      	bne.n	800655c <_printf_float+0x3d0>
 800655a:	e675      	b.n	8006248 <_printf_float+0xbc>
 800655c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800655e:	3301      	adds	r3, #1
 8006560:	930e      	str	r3, [sp, #56]	; 0x38
 8006562:	e7b0      	b.n	80064c6 <_printf_float+0x33a>
 8006564:	0038      	movs	r0, r7
 8006566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800656a:	9908      	ldr	r1, [sp, #32]
 800656c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800656e:	47b0      	blx	r6
 8006570:	3001      	adds	r0, #1
 8006572:	d1b9      	bne.n	80064e8 <_printf_float+0x35c>
 8006574:	e668      	b.n	8006248 <_printf_float+0xbc>
 8006576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006578:	0038      	movs	r0, r7
 800657a:	18ea      	adds	r2, r5, r3
 800657c:	9908      	ldr	r1, [sp, #32]
 800657e:	0033      	movs	r3, r6
 8006580:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006582:	47a8      	blx	r5
 8006584:	3001      	adds	r0, #1
 8006586:	d1b9      	bne.n	80064fc <_printf_float+0x370>
 8006588:	e65e      	b.n	8006248 <_printf_float+0xbc>
 800658a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800658c:	2b01      	cmp	r3, #1
 800658e:	dc02      	bgt.n	8006596 <_printf_float+0x40a>
 8006590:	2301      	movs	r3, #1
 8006592:	421a      	tst	r2, r3
 8006594:	d03a      	beq.n	800660c <_printf_float+0x480>
 8006596:	2301      	movs	r3, #1
 8006598:	002a      	movs	r2, r5
 800659a:	0038      	movs	r0, r7
 800659c:	9908      	ldr	r1, [sp, #32]
 800659e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065a0:	47b0      	blx	r6
 80065a2:	3001      	adds	r0, #1
 80065a4:	d100      	bne.n	80065a8 <_printf_float+0x41c>
 80065a6:	e64f      	b.n	8006248 <_printf_float+0xbc>
 80065a8:	0038      	movs	r0, r7
 80065aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ae:	9908      	ldr	r1, [sp, #32]
 80065b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065b2:	47b0      	blx	r6
 80065b4:	3001      	adds	r0, #1
 80065b6:	d100      	bne.n	80065ba <_printf_float+0x42e>
 80065b8:	e646      	b.n	8006248 <_printf_float+0xbc>
 80065ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80065bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c0:	2200      	movs	r2, #0
 80065c2:	001e      	movs	r6, r3
 80065c4:	2300      	movs	r3, #0
 80065c6:	f7f9 ff41 	bl	800044c <__aeabi_dcmpeq>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d11c      	bne.n	8006608 <_printf_float+0x47c>
 80065ce:	0033      	movs	r3, r6
 80065d0:	1c6a      	adds	r2, r5, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	0038      	movs	r0, r7
 80065d6:	9908      	ldr	r1, [sp, #32]
 80065d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065da:	47a8      	blx	r5
 80065dc:	3001      	adds	r0, #1
 80065de:	d10f      	bne.n	8006600 <_printf_float+0x474>
 80065e0:	e632      	b.n	8006248 <_printf_float+0xbc>
 80065e2:	0022      	movs	r2, r4
 80065e4:	2301      	movs	r3, #1
 80065e6:	0038      	movs	r0, r7
 80065e8:	9908      	ldr	r1, [sp, #32]
 80065ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065ec:	321a      	adds	r2, #26
 80065ee:	47b0      	blx	r6
 80065f0:	3001      	adds	r0, #1
 80065f2:	d100      	bne.n	80065f6 <_printf_float+0x46a>
 80065f4:	e628      	b.n	8006248 <_printf_float+0xbc>
 80065f6:	3501      	adds	r5, #1
 80065f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065fa:	3b01      	subs	r3, #1
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dcf0      	bgt.n	80065e2 <_printf_float+0x456>
 8006600:	0022      	movs	r2, r4
 8006602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006604:	3250      	adds	r2, #80	; 0x50
 8006606:	e6c8      	b.n	800639a <_printf_float+0x20e>
 8006608:	2500      	movs	r5, #0
 800660a:	e7f5      	b.n	80065f8 <_printf_float+0x46c>
 800660c:	002a      	movs	r2, r5
 800660e:	e7e1      	b.n	80065d4 <_printf_float+0x448>
 8006610:	0022      	movs	r2, r4
 8006612:	2301      	movs	r3, #1
 8006614:	0038      	movs	r0, r7
 8006616:	9908      	ldr	r1, [sp, #32]
 8006618:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800661a:	3219      	adds	r2, #25
 800661c:	47b0      	blx	r6
 800661e:	3001      	adds	r0, #1
 8006620:	d100      	bne.n	8006624 <_printf_float+0x498>
 8006622:	e611      	b.n	8006248 <_printf_float+0xbc>
 8006624:	3501      	adds	r5, #1
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	42ab      	cmp	r3, r5
 800662e:	dcef      	bgt.n	8006610 <_printf_float+0x484>
 8006630:	e6e8      	b.n	8006404 <_printf_float+0x278>
 8006632:	2500      	movs	r5, #0
 8006634:	e7f7      	b.n	8006626 <_printf_float+0x49a>
 8006636:	46c0      	nop			; (mov r8, r8)

08006638 <_printf_common>:
 8006638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663a:	0016      	movs	r6, r2
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	688a      	ldr	r2, [r1, #8]
 8006640:	690b      	ldr	r3, [r1, #16]
 8006642:	000c      	movs	r4, r1
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	4293      	cmp	r3, r2
 8006648:	da00      	bge.n	800664c <_printf_common+0x14>
 800664a:	0013      	movs	r3, r2
 800664c:	0022      	movs	r2, r4
 800664e:	6033      	str	r3, [r6, #0]
 8006650:	3243      	adds	r2, #67	; 0x43
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	2a00      	cmp	r2, #0
 8006656:	d001      	beq.n	800665c <_printf_common+0x24>
 8006658:	3301      	adds	r3, #1
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	069b      	lsls	r3, r3, #26
 8006660:	d502      	bpl.n	8006668 <_printf_common+0x30>
 8006662:	6833      	ldr	r3, [r6, #0]
 8006664:	3302      	adds	r3, #2
 8006666:	6033      	str	r3, [r6, #0]
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	2306      	movs	r3, #6
 800666c:	0015      	movs	r5, r2
 800666e:	401d      	ands	r5, r3
 8006670:	421a      	tst	r2, r3
 8006672:	d027      	beq.n	80066c4 <_printf_common+0x8c>
 8006674:	0023      	movs	r3, r4
 8006676:	3343      	adds	r3, #67	; 0x43
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	1e5a      	subs	r2, r3, #1
 800667c:	4193      	sbcs	r3, r2
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d430      	bmi.n	80066e6 <_printf_common+0xae>
 8006684:	0022      	movs	r2, r4
 8006686:	9901      	ldr	r1, [sp, #4]
 8006688:	9800      	ldr	r0, [sp, #0]
 800668a:	9d08      	ldr	r5, [sp, #32]
 800668c:	3243      	adds	r2, #67	; 0x43
 800668e:	47a8      	blx	r5
 8006690:	3001      	adds	r0, #1
 8006692:	d025      	beq.n	80066e0 <_printf_common+0xa8>
 8006694:	2206      	movs	r2, #6
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	2500      	movs	r5, #0
 800669a:	4013      	ands	r3, r2
 800669c:	2b04      	cmp	r3, #4
 800669e:	d105      	bne.n	80066ac <_printf_common+0x74>
 80066a0:	6833      	ldr	r3, [r6, #0]
 80066a2:	68e5      	ldr	r5, [r4, #12]
 80066a4:	1aed      	subs	r5, r5, r3
 80066a6:	43eb      	mvns	r3, r5
 80066a8:	17db      	asrs	r3, r3, #31
 80066aa:	401d      	ands	r5, r3
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	dd01      	ble.n	80066b8 <_printf_common+0x80>
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	18ed      	adds	r5, r5, r3
 80066b8:	2600      	movs	r6, #0
 80066ba:	42b5      	cmp	r5, r6
 80066bc:	d120      	bne.n	8006700 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e010      	b.n	80066e4 <_printf_common+0xac>
 80066c2:	3501      	adds	r5, #1
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	6832      	ldr	r2, [r6, #0]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	ddd2      	ble.n	8006674 <_printf_common+0x3c>
 80066ce:	0022      	movs	r2, r4
 80066d0:	2301      	movs	r3, #1
 80066d2:	9901      	ldr	r1, [sp, #4]
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	9f08      	ldr	r7, [sp, #32]
 80066d8:	3219      	adds	r2, #25
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1f0      	bne.n	80066c2 <_printf_common+0x8a>
 80066e0:	2001      	movs	r0, #1
 80066e2:	4240      	negs	r0, r0
 80066e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066e6:	2030      	movs	r0, #48	; 0x30
 80066e8:	18e1      	adds	r1, r4, r3
 80066ea:	3143      	adds	r1, #67	; 0x43
 80066ec:	7008      	strb	r0, [r1, #0]
 80066ee:	0021      	movs	r1, r4
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	3145      	adds	r1, #69	; 0x45
 80066f4:	7809      	ldrb	r1, [r1, #0]
 80066f6:	18a2      	adds	r2, r4, r2
 80066f8:	3243      	adds	r2, #67	; 0x43
 80066fa:	3302      	adds	r3, #2
 80066fc:	7011      	strb	r1, [r2, #0]
 80066fe:	e7c1      	b.n	8006684 <_printf_common+0x4c>
 8006700:	0022      	movs	r2, r4
 8006702:	2301      	movs	r3, #1
 8006704:	9901      	ldr	r1, [sp, #4]
 8006706:	9800      	ldr	r0, [sp, #0]
 8006708:	9f08      	ldr	r7, [sp, #32]
 800670a:	321a      	adds	r2, #26
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	d0e6      	beq.n	80066e0 <_printf_common+0xa8>
 8006712:	3601      	adds	r6, #1
 8006714:	e7d1      	b.n	80066ba <_printf_common+0x82>
	...

08006718 <_printf_i>:
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	b08b      	sub	sp, #44	; 0x2c
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	000a      	movs	r2, r1
 8006720:	3243      	adds	r2, #67	; 0x43
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	9005      	str	r0, [sp, #20]
 8006726:	9204      	str	r2, [sp, #16]
 8006728:	7e0a      	ldrb	r2, [r1, #24]
 800672a:	000c      	movs	r4, r1
 800672c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800672e:	2a78      	cmp	r2, #120	; 0x78
 8006730:	d809      	bhi.n	8006746 <_printf_i+0x2e>
 8006732:	2a62      	cmp	r2, #98	; 0x62
 8006734:	d80b      	bhi.n	800674e <_printf_i+0x36>
 8006736:	2a00      	cmp	r2, #0
 8006738:	d100      	bne.n	800673c <_printf_i+0x24>
 800673a:	e0be      	b.n	80068ba <_printf_i+0x1a2>
 800673c:	497c      	ldr	r1, [pc, #496]	; (8006930 <_printf_i+0x218>)
 800673e:	9103      	str	r1, [sp, #12]
 8006740:	2a58      	cmp	r2, #88	; 0x58
 8006742:	d100      	bne.n	8006746 <_printf_i+0x2e>
 8006744:	e093      	b.n	800686e <_printf_i+0x156>
 8006746:	0026      	movs	r6, r4
 8006748:	3642      	adds	r6, #66	; 0x42
 800674a:	7032      	strb	r2, [r6, #0]
 800674c:	e022      	b.n	8006794 <_printf_i+0x7c>
 800674e:	0010      	movs	r0, r2
 8006750:	3863      	subs	r0, #99	; 0x63
 8006752:	2815      	cmp	r0, #21
 8006754:	d8f7      	bhi.n	8006746 <_printf_i+0x2e>
 8006756:	f7f9 fce9 	bl	800012c <__gnu_thumb1_case_shi>
 800675a:	0016      	.short	0x0016
 800675c:	fff6001f 	.word	0xfff6001f
 8006760:	fff6fff6 	.word	0xfff6fff6
 8006764:	001ffff6 	.word	0x001ffff6
 8006768:	fff6fff6 	.word	0xfff6fff6
 800676c:	fff6fff6 	.word	0xfff6fff6
 8006770:	003600a3 	.word	0x003600a3
 8006774:	fff60083 	.word	0xfff60083
 8006778:	00b4fff6 	.word	0x00b4fff6
 800677c:	0036fff6 	.word	0x0036fff6
 8006780:	fff6fff6 	.word	0xfff6fff6
 8006784:	0087      	.short	0x0087
 8006786:	0026      	movs	r6, r4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	3642      	adds	r6, #66	; 0x42
 800678c:	1d11      	adds	r1, r2, #4
 800678e:	6019      	str	r1, [r3, #0]
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	7033      	strb	r3, [r6, #0]
 8006794:	2301      	movs	r3, #1
 8006796:	e0a2      	b.n	80068de <_printf_i+0x1c6>
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	6809      	ldr	r1, [r1, #0]
 800679c:	1d02      	adds	r2, r0, #4
 800679e:	060d      	lsls	r5, r1, #24
 80067a0:	d50b      	bpl.n	80067ba <_printf_i+0xa2>
 80067a2:	6805      	ldr	r5, [r0, #0]
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	da03      	bge.n	80067b2 <_printf_i+0x9a>
 80067aa:	232d      	movs	r3, #45	; 0x2d
 80067ac:	9a04      	ldr	r2, [sp, #16]
 80067ae:	426d      	negs	r5, r5
 80067b0:	7013      	strb	r3, [r2, #0]
 80067b2:	4b5f      	ldr	r3, [pc, #380]	; (8006930 <_printf_i+0x218>)
 80067b4:	270a      	movs	r7, #10
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	e01b      	b.n	80067f2 <_printf_i+0xda>
 80067ba:	6805      	ldr	r5, [r0, #0]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	0649      	lsls	r1, r1, #25
 80067c0:	d5f1      	bpl.n	80067a6 <_printf_i+0x8e>
 80067c2:	b22d      	sxth	r5, r5
 80067c4:	e7ef      	b.n	80067a6 <_printf_i+0x8e>
 80067c6:	680d      	ldr	r5, [r1, #0]
 80067c8:	6819      	ldr	r1, [r3, #0]
 80067ca:	1d08      	adds	r0, r1, #4
 80067cc:	6018      	str	r0, [r3, #0]
 80067ce:	062e      	lsls	r6, r5, #24
 80067d0:	d501      	bpl.n	80067d6 <_printf_i+0xbe>
 80067d2:	680d      	ldr	r5, [r1, #0]
 80067d4:	e003      	b.n	80067de <_printf_i+0xc6>
 80067d6:	066d      	lsls	r5, r5, #25
 80067d8:	d5fb      	bpl.n	80067d2 <_printf_i+0xba>
 80067da:	680d      	ldr	r5, [r1, #0]
 80067dc:	b2ad      	uxth	r5, r5
 80067de:	4b54      	ldr	r3, [pc, #336]	; (8006930 <_printf_i+0x218>)
 80067e0:	2708      	movs	r7, #8
 80067e2:	9303      	str	r3, [sp, #12]
 80067e4:	2a6f      	cmp	r2, #111	; 0x6f
 80067e6:	d000      	beq.n	80067ea <_printf_i+0xd2>
 80067e8:	3702      	adds	r7, #2
 80067ea:	0023      	movs	r3, r4
 80067ec:	2200      	movs	r2, #0
 80067ee:	3343      	adds	r3, #67	; 0x43
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	db03      	blt.n	8006802 <_printf_i+0xea>
 80067fa:	2104      	movs	r1, #4
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	438a      	bics	r2, r1
 8006800:	6022      	str	r2, [r4, #0]
 8006802:	2d00      	cmp	r5, #0
 8006804:	d102      	bne.n	800680c <_printf_i+0xf4>
 8006806:	9e04      	ldr	r6, [sp, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00c      	beq.n	8006826 <_printf_i+0x10e>
 800680c:	9e04      	ldr	r6, [sp, #16]
 800680e:	0028      	movs	r0, r5
 8006810:	0039      	movs	r1, r7
 8006812:	f7f9 fd1b 	bl	800024c <__aeabi_uidivmod>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	3e01      	subs	r6, #1
 800681a:	5c5b      	ldrb	r3, [r3, r1]
 800681c:	7033      	strb	r3, [r6, #0]
 800681e:	002b      	movs	r3, r5
 8006820:	0005      	movs	r5, r0
 8006822:	429f      	cmp	r7, r3
 8006824:	d9f3      	bls.n	800680e <_printf_i+0xf6>
 8006826:	2f08      	cmp	r7, #8
 8006828:	d109      	bne.n	800683e <_printf_i+0x126>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	07db      	lsls	r3, r3, #31
 800682e:	d506      	bpl.n	800683e <_printf_i+0x126>
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	dc02      	bgt.n	800683e <_printf_i+0x126>
 8006838:	2330      	movs	r3, #48	; 0x30
 800683a:	3e01      	subs	r6, #1
 800683c:	7033      	strb	r3, [r6, #0]
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	1b9b      	subs	r3, r3, r6
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	0021      	movs	r1, r4
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	9805      	ldr	r0, [sp, #20]
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	aa09      	add	r2, sp, #36	; 0x24
 8006850:	f7ff fef2 	bl	8006638 <_printf_common>
 8006854:	3001      	adds	r0, #1
 8006856:	d147      	bne.n	80068e8 <_printf_i+0x1d0>
 8006858:	2001      	movs	r0, #1
 800685a:	4240      	negs	r0, r0
 800685c:	b00b      	add	sp, #44	; 0x2c
 800685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006860:	2220      	movs	r2, #32
 8006862:	6809      	ldr	r1, [r1, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	6022      	str	r2, [r4, #0]
 8006868:	2278      	movs	r2, #120	; 0x78
 800686a:	4932      	ldr	r1, [pc, #200]	; (8006934 <_printf_i+0x21c>)
 800686c:	9103      	str	r1, [sp, #12]
 800686e:	0021      	movs	r1, r4
 8006870:	3145      	adds	r1, #69	; 0x45
 8006872:	700a      	strb	r2, [r1, #0]
 8006874:	6819      	ldr	r1, [r3, #0]
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	c920      	ldmia	r1!, {r5}
 800687a:	0610      	lsls	r0, r2, #24
 800687c:	d402      	bmi.n	8006884 <_printf_i+0x16c>
 800687e:	0650      	lsls	r0, r2, #25
 8006880:	d500      	bpl.n	8006884 <_printf_i+0x16c>
 8006882:	b2ad      	uxth	r5, r5
 8006884:	6019      	str	r1, [r3, #0]
 8006886:	07d3      	lsls	r3, r2, #31
 8006888:	d502      	bpl.n	8006890 <_printf_i+0x178>
 800688a:	2320      	movs	r3, #32
 800688c:	4313      	orrs	r3, r2
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	2710      	movs	r7, #16
 8006892:	2d00      	cmp	r5, #0
 8006894:	d1a9      	bne.n	80067ea <_printf_i+0xd2>
 8006896:	2220      	movs	r2, #32
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	4393      	bics	r3, r2
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	e7a4      	b.n	80067ea <_printf_i+0xd2>
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	680d      	ldr	r5, [r1, #0]
 80068a4:	1d10      	adds	r0, r2, #4
 80068a6:	6949      	ldr	r1, [r1, #20]
 80068a8:	6018      	str	r0, [r3, #0]
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	062e      	lsls	r6, r5, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0x19c>
 80068b0:	6019      	str	r1, [r3, #0]
 80068b2:	e002      	b.n	80068ba <_printf_i+0x1a2>
 80068b4:	066d      	lsls	r5, r5, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0x198>
 80068b8:	8019      	strh	r1, [r3, #0]
 80068ba:	2300      	movs	r3, #0
 80068bc:	9e04      	ldr	r6, [sp, #16]
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	e7c0      	b.n	8006844 <_printf_i+0x12c>
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	1d11      	adds	r1, r2, #4
 80068c6:	6019      	str	r1, [r3, #0]
 80068c8:	6816      	ldr	r6, [r2, #0]
 80068ca:	2100      	movs	r1, #0
 80068cc:	0030      	movs	r0, r6
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	f000 fd01 	bl	80072d6 <memchr>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d001      	beq.n	80068dc <_printf_i+0x1c4>
 80068d8:	1b80      	subs	r0, r0, r6
 80068da:	6060      	str	r0, [r4, #4]
 80068dc:	6863      	ldr	r3, [r4, #4]
 80068de:	6123      	str	r3, [r4, #16]
 80068e0:	2300      	movs	r3, #0
 80068e2:	9a04      	ldr	r2, [sp, #16]
 80068e4:	7013      	strb	r3, [r2, #0]
 80068e6:	e7ad      	b.n	8006844 <_printf_i+0x12c>
 80068e8:	0032      	movs	r2, r6
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	9906      	ldr	r1, [sp, #24]
 80068ee:	9805      	ldr	r0, [sp, #20]
 80068f0:	9d07      	ldr	r5, [sp, #28]
 80068f2:	47a8      	blx	r5
 80068f4:	3001      	adds	r0, #1
 80068f6:	d0af      	beq.n	8006858 <_printf_i+0x140>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	079b      	lsls	r3, r3, #30
 80068fc:	d415      	bmi.n	800692a <_printf_i+0x212>
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	68e0      	ldr	r0, [r4, #12]
 8006902:	4298      	cmp	r0, r3
 8006904:	daaa      	bge.n	800685c <_printf_i+0x144>
 8006906:	0018      	movs	r0, r3
 8006908:	e7a8      	b.n	800685c <_printf_i+0x144>
 800690a:	0022      	movs	r2, r4
 800690c:	2301      	movs	r3, #1
 800690e:	9906      	ldr	r1, [sp, #24]
 8006910:	9805      	ldr	r0, [sp, #20]
 8006912:	9e07      	ldr	r6, [sp, #28]
 8006914:	3219      	adds	r2, #25
 8006916:	47b0      	blx	r6
 8006918:	3001      	adds	r0, #1
 800691a:	d09d      	beq.n	8006858 <_printf_i+0x140>
 800691c:	3501      	adds	r5, #1
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	42ab      	cmp	r3, r5
 8006926:	dcf0      	bgt.n	800690a <_printf_i+0x1f2>
 8006928:	e7e9      	b.n	80068fe <_printf_i+0x1e6>
 800692a:	2500      	movs	r5, #0
 800692c:	e7f7      	b.n	800691e <_printf_i+0x206>
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	0800ac0e 	.word	0x0800ac0e
 8006934:	0800ac1f 	.word	0x0800ac1f

08006938 <_scanf_float>:
 8006938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693a:	b08b      	sub	sp, #44	; 0x2c
 800693c:	0016      	movs	r6, r2
 800693e:	9002      	str	r0, [sp, #8]
 8006940:	22ae      	movs	r2, #174	; 0xae
 8006942:	2000      	movs	r0, #0
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	688b      	ldr	r3, [r1, #8]
 8006948:	000f      	movs	r7, r1
 800694a:	1e59      	subs	r1, r3, #1
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	9006      	str	r0, [sp, #24]
 8006950:	4291      	cmp	r1, r2
 8006952:	d905      	bls.n	8006960 <_scanf_float+0x28>
 8006954:	3b5e      	subs	r3, #94	; 0x5e
 8006956:	3bff      	subs	r3, #255	; 0xff
 8006958:	9306      	str	r3, [sp, #24]
 800695a:	235e      	movs	r3, #94	; 0x5e
 800695c:	33ff      	adds	r3, #255	; 0xff
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	23f0      	movs	r3, #240	; 0xf0
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	4313      	orrs	r3, r2
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	003b      	movs	r3, r7
 800696c:	2400      	movs	r4, #0
 800696e:	331c      	adds	r3, #28
 8006970:	001d      	movs	r5, r3
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	9403      	str	r4, [sp, #12]
 8006976:	9409      	str	r4, [sp, #36]	; 0x24
 8006978:	9408      	str	r4, [sp, #32]
 800697a:	9401      	str	r4, [sp, #4]
 800697c:	9405      	str	r4, [sp, #20]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	2a00      	cmp	r2, #0
 8006982:	d00a      	beq.n	800699a <_scanf_float+0x62>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b4e      	cmp	r3, #78	; 0x4e
 800698a:	d844      	bhi.n	8006a16 <_scanf_float+0xde>
 800698c:	0018      	movs	r0, r3
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d82c      	bhi.n	80069ec <_scanf_float+0xb4>
 8006992:	382b      	subs	r0, #43	; 0x2b
 8006994:	b2c1      	uxtb	r1, r0
 8006996:	290e      	cmp	r1, #14
 8006998:	d92a      	bls.n	80069f0 <_scanf_float+0xb8>
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <_scanf_float+0x70>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	4aa3      	ldr	r2, [pc, #652]	; (8006c30 <_scanf_float+0x2f8>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d900      	bls.n	80069b2 <_scanf_float+0x7a>
 80069b0:	e0f9      	b.n	8006ba6 <_scanf_float+0x26e>
 80069b2:	24be      	movs	r4, #190	; 0xbe
 80069b4:	0064      	lsls	r4, r4, #1
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	429d      	cmp	r5, r3
 80069ba:	d900      	bls.n	80069be <_scanf_float+0x86>
 80069bc:	e0e9      	b.n	8006b92 <_scanf_float+0x25a>
 80069be:	2301      	movs	r3, #1
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	e183      	b.n	8006ccc <_scanf_float+0x394>
 80069c4:	0018      	movs	r0, r3
 80069c6:	3861      	subs	r0, #97	; 0x61
 80069c8:	280d      	cmp	r0, #13
 80069ca:	d8e6      	bhi.n	800699a <_scanf_float+0x62>
 80069cc:	f7f9 fbae 	bl	800012c <__gnu_thumb1_case_shi>
 80069d0:	ffe50083 	.word	0xffe50083
 80069d4:	ffe5ffe5 	.word	0xffe5ffe5
 80069d8:	00a200b6 	.word	0x00a200b6
 80069dc:	ffe5ffe5 	.word	0xffe5ffe5
 80069e0:	ffe50089 	.word	0xffe50089
 80069e4:	ffe5ffe5 	.word	0xffe5ffe5
 80069e8:	0065ffe5 	.word	0x0065ffe5
 80069ec:	3841      	subs	r0, #65	; 0x41
 80069ee:	e7eb      	b.n	80069c8 <_scanf_float+0x90>
 80069f0:	280e      	cmp	r0, #14
 80069f2:	d8d2      	bhi.n	800699a <_scanf_float+0x62>
 80069f4:	f7f9 fb9a 	bl	800012c <__gnu_thumb1_case_shi>
 80069f8:	ffd1004b 	.word	0xffd1004b
 80069fc:	0098004b 	.word	0x0098004b
 8006a00:	0020ffd1 	.word	0x0020ffd1
 8006a04:	00400040 	.word	0x00400040
 8006a08:	00400040 	.word	0x00400040
 8006a0c:	00400040 	.word	0x00400040
 8006a10:	00400040 	.word	0x00400040
 8006a14:	0040      	.short	0x0040
 8006a16:	2b6e      	cmp	r3, #110	; 0x6e
 8006a18:	d809      	bhi.n	8006a2e <_scanf_float+0xf6>
 8006a1a:	2b60      	cmp	r3, #96	; 0x60
 8006a1c:	d8d2      	bhi.n	80069c4 <_scanf_float+0x8c>
 8006a1e:	2b54      	cmp	r3, #84	; 0x54
 8006a20:	d07d      	beq.n	8006b1e <_scanf_float+0x1e6>
 8006a22:	2b59      	cmp	r3, #89	; 0x59
 8006a24:	d1b9      	bne.n	800699a <_scanf_float+0x62>
 8006a26:	2c07      	cmp	r4, #7
 8006a28:	d1b7      	bne.n	800699a <_scanf_float+0x62>
 8006a2a:	2408      	movs	r4, #8
 8006a2c:	e02c      	b.n	8006a88 <_scanf_float+0x150>
 8006a2e:	2b74      	cmp	r3, #116	; 0x74
 8006a30:	d075      	beq.n	8006b1e <_scanf_float+0x1e6>
 8006a32:	2b79      	cmp	r3, #121	; 0x79
 8006a34:	d0f7      	beq.n	8006a26 <_scanf_float+0xee>
 8006a36:	e7b0      	b.n	800699a <_scanf_float+0x62>
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	05c8      	lsls	r0, r1, #23
 8006a3c:	d51c      	bpl.n	8006a78 <_scanf_float+0x140>
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	4399      	bics	r1, r3
 8006a42:	9b01      	ldr	r3, [sp, #4]
 8006a44:	6039      	str	r1, [r7, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <_scanf_float+0x120>
 8006a50:	3b01      	subs	r3, #1
 8006a52:	3201      	adds	r2, #1
 8006a54:	9306      	str	r3, [sp, #24]
 8006a56:	60ba      	str	r2, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3301      	adds	r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	6873      	ldr	r3, [r6, #4]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	6073      	str	r3, [r6, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dc00      	bgt.n	8006a70 <_scanf_float+0x138>
 8006a6e:	e086      	b.n	8006b7e <_scanf_float+0x246>
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	e782      	b.n	800697e <_scanf_float+0x46>
 8006a78:	9a03      	ldr	r2, [sp, #12]
 8006a7a:	1912      	adds	r2, r2, r4
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d18c      	bne.n	800699a <_scanf_float+0x62>
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	496c      	ldr	r1, [pc, #432]	; (8006c34 <_scanf_float+0x2fc>)
 8006a84:	400a      	ands	r2, r1
 8006a86:	603a      	str	r2, [r7, #0]
 8006a88:	702b      	strb	r3, [r5, #0]
 8006a8a:	3501      	adds	r5, #1
 8006a8c:	e7e4      	b.n	8006a58 <_scanf_float+0x120>
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	420a      	tst	r2, r1
 8006a94:	d081      	beq.n	800699a <_scanf_float+0x62>
 8006a96:	438a      	bics	r2, r1
 8006a98:	e7f5      	b.n	8006a86 <_scanf_float+0x14e>
 8006a9a:	9a03      	ldr	r2, [sp, #12]
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d10f      	bne.n	8006ac0 <_scanf_float+0x188>
 8006aa0:	9a01      	ldr	r2, [sp, #4]
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	d10f      	bne.n	8006ac6 <_scanf_float+0x18e>
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	21e0      	movs	r1, #224	; 0xe0
 8006aaa:	0010      	movs	r0, r2
 8006aac:	00c9      	lsls	r1, r1, #3
 8006aae:	4008      	ands	r0, r1
 8006ab0:	4288      	cmp	r0, r1
 8006ab2:	d108      	bne.n	8006ac6 <_scanf_float+0x18e>
 8006ab4:	4960      	ldr	r1, [pc, #384]	; (8006c38 <_scanf_float+0x300>)
 8006ab6:	400a      	ands	r2, r1
 8006ab8:	603a      	str	r2, [r7, #0]
 8006aba:	2201      	movs	r2, #1
 8006abc:	9203      	str	r2, [sp, #12]
 8006abe:	e7e3      	b.n	8006a88 <_scanf_float+0x150>
 8006ac0:	9a03      	ldr	r2, [sp, #12]
 8006ac2:	2a02      	cmp	r2, #2
 8006ac4:	d059      	beq.n	8006b7a <_scanf_float+0x242>
 8006ac6:	2c01      	cmp	r4, #1
 8006ac8:	d002      	beq.n	8006ad0 <_scanf_float+0x198>
 8006aca:	2c04      	cmp	r4, #4
 8006acc:	d000      	beq.n	8006ad0 <_scanf_float+0x198>
 8006ace:	e764      	b.n	800699a <_scanf_float+0x62>
 8006ad0:	3401      	adds	r4, #1
 8006ad2:	b2e4      	uxtb	r4, r4
 8006ad4:	e7d8      	b.n	8006a88 <_scanf_float+0x150>
 8006ad6:	9a03      	ldr	r2, [sp, #12]
 8006ad8:	2a01      	cmp	r2, #1
 8006ada:	d000      	beq.n	8006ade <_scanf_float+0x1a6>
 8006adc:	e75d      	b.n	800699a <_scanf_float+0x62>
 8006ade:	2202      	movs	r2, #2
 8006ae0:	e7ec      	b.n	8006abc <_scanf_float+0x184>
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	d110      	bne.n	8006b08 <_scanf_float+0x1d0>
 8006ae6:	9a01      	ldr	r2, [sp, #4]
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	d000      	beq.n	8006aee <_scanf_float+0x1b6>
 8006aec:	e758      	b.n	80069a0 <_scanf_float+0x68>
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	21e0      	movs	r1, #224	; 0xe0
 8006af2:	0010      	movs	r0, r2
 8006af4:	00c9      	lsls	r1, r1, #3
 8006af6:	4008      	ands	r0, r1
 8006af8:	4288      	cmp	r0, r1
 8006afa:	d000      	beq.n	8006afe <_scanf_float+0x1c6>
 8006afc:	e754      	b.n	80069a8 <_scanf_float+0x70>
 8006afe:	494e      	ldr	r1, [pc, #312]	; (8006c38 <_scanf_float+0x300>)
 8006b00:	3401      	adds	r4, #1
 8006b02:	400a      	ands	r2, r1
 8006b04:	603a      	str	r2, [r7, #0]
 8006b06:	e7bf      	b.n	8006a88 <_scanf_float+0x150>
 8006b08:	21fd      	movs	r1, #253	; 0xfd
 8006b0a:	1ee2      	subs	r2, r4, #3
 8006b0c:	420a      	tst	r2, r1
 8006b0e:	d000      	beq.n	8006b12 <_scanf_float+0x1da>
 8006b10:	e743      	b.n	800699a <_scanf_float+0x62>
 8006b12:	e7dd      	b.n	8006ad0 <_scanf_float+0x198>
 8006b14:	2c02      	cmp	r4, #2
 8006b16:	d000      	beq.n	8006b1a <_scanf_float+0x1e2>
 8006b18:	e73f      	b.n	800699a <_scanf_float+0x62>
 8006b1a:	2403      	movs	r4, #3
 8006b1c:	e7b4      	b.n	8006a88 <_scanf_float+0x150>
 8006b1e:	2c06      	cmp	r4, #6
 8006b20:	d000      	beq.n	8006b24 <_scanf_float+0x1ec>
 8006b22:	e73a      	b.n	800699a <_scanf_float+0x62>
 8006b24:	2407      	movs	r4, #7
 8006b26:	e7af      	b.n	8006a88 <_scanf_float+0x150>
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	0591      	lsls	r1, r2, #22
 8006b2c:	d400      	bmi.n	8006b30 <_scanf_float+0x1f8>
 8006b2e:	e734      	b.n	800699a <_scanf_float+0x62>
 8006b30:	4942      	ldr	r1, [pc, #264]	; (8006c3c <_scanf_float+0x304>)
 8006b32:	400a      	ands	r2, r1
 8006b34:	603a      	str	r2, [r7, #0]
 8006b36:	9a01      	ldr	r2, [sp, #4]
 8006b38:	9205      	str	r2, [sp, #20]
 8006b3a:	e7a5      	b.n	8006a88 <_scanf_float+0x150>
 8006b3c:	21a0      	movs	r1, #160	; 0xa0
 8006b3e:	2080      	movs	r0, #128	; 0x80
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	00c9      	lsls	r1, r1, #3
 8006b44:	4011      	ands	r1, r2
 8006b46:	00c0      	lsls	r0, r0, #3
 8006b48:	4281      	cmp	r1, r0
 8006b4a:	d006      	beq.n	8006b5a <_scanf_float+0x222>
 8006b4c:	4202      	tst	r2, r0
 8006b4e:	d100      	bne.n	8006b52 <_scanf_float+0x21a>
 8006b50:	e723      	b.n	800699a <_scanf_float+0x62>
 8006b52:	9901      	ldr	r1, [sp, #4]
 8006b54:	2900      	cmp	r1, #0
 8006b56:	d100      	bne.n	8006b5a <_scanf_float+0x222>
 8006b58:	e726      	b.n	80069a8 <_scanf_float+0x70>
 8006b5a:	0591      	lsls	r1, r2, #22
 8006b5c:	d404      	bmi.n	8006b68 <_scanf_float+0x230>
 8006b5e:	9901      	ldr	r1, [sp, #4]
 8006b60:	9805      	ldr	r0, [sp, #20]
 8006b62:	9509      	str	r5, [sp, #36]	; 0x24
 8006b64:	1a09      	subs	r1, r1, r0
 8006b66:	9108      	str	r1, [sp, #32]
 8006b68:	4933      	ldr	r1, [pc, #204]	; (8006c38 <_scanf_float+0x300>)
 8006b6a:	400a      	ands	r2, r1
 8006b6c:	21c0      	movs	r1, #192	; 0xc0
 8006b6e:	0049      	lsls	r1, r1, #1
 8006b70:	430a      	orrs	r2, r1
 8006b72:	603a      	str	r2, [r7, #0]
 8006b74:	2200      	movs	r2, #0
 8006b76:	9201      	str	r2, [sp, #4]
 8006b78:	e786      	b.n	8006a88 <_scanf_float+0x150>
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	e79e      	b.n	8006abc <_scanf_float+0x184>
 8006b7e:	23c0      	movs	r3, #192	; 0xc0
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	0031      	movs	r1, r6
 8006b84:	58fb      	ldr	r3, [r7, r3]
 8006b86:	9802      	ldr	r0, [sp, #8]
 8006b88:	4798      	blx	r3
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d100      	bne.n	8006b90 <_scanf_float+0x258>
 8006b8e:	e6f6      	b.n	800697e <_scanf_float+0x46>
 8006b90:	e703      	b.n	800699a <_scanf_float+0x62>
 8006b92:	3d01      	subs	r5, #1
 8006b94:	593b      	ldr	r3, [r7, r4]
 8006b96:	0032      	movs	r2, r6
 8006b98:	7829      	ldrb	r1, [r5, #0]
 8006b9a:	9802      	ldr	r0, [sp, #8]
 8006b9c:	4798      	blx	r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	e707      	b.n	80069b6 <_scanf_float+0x7e>
 8006ba6:	1e63      	subs	r3, r4, #1
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	d80e      	bhi.n	8006bca <_scanf_float+0x292>
 8006bac:	9503      	str	r5, [sp, #12]
 8006bae:	2c02      	cmp	r4, #2
 8006bb0:	d920      	bls.n	8006bf4 <_scanf_float+0x2bc>
 8006bb2:	1b63      	subs	r3, r4, r5
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	9306      	str	r3, [sp, #24]
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	9a06      	ldr	r2, [sp, #24]
 8006bbc:	189b      	adds	r3, r3, r2
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d827      	bhi.n	8006c14 <_scanf_float+0x2dc>
 8006bc4:	3c03      	subs	r4, #3
 8006bc6:	b2e4      	uxtb	r4, r4
 8006bc8:	1b2d      	subs	r5, r5, r4
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	05da      	lsls	r2, r3, #23
 8006bce:	d552      	bpl.n	8006c76 <_scanf_float+0x33e>
 8006bd0:	055b      	lsls	r3, r3, #21
 8006bd2:	d535      	bpl.n	8006c40 <_scanf_float+0x308>
 8006bd4:	24be      	movs	r4, #190	; 0xbe
 8006bd6:	0064      	lsls	r4, r4, #1
 8006bd8:	9b04      	ldr	r3, [sp, #16]
 8006bda:	429d      	cmp	r5, r3
 8006bdc:	d800      	bhi.n	8006be0 <_scanf_float+0x2a8>
 8006bde:	e6ee      	b.n	80069be <_scanf_float+0x86>
 8006be0:	3d01      	subs	r5, #1
 8006be2:	593b      	ldr	r3, [r7, r4]
 8006be4:	0032      	movs	r2, r6
 8006be6:	7829      	ldrb	r1, [r5, #0]
 8006be8:	9802      	ldr	r0, [sp, #8]
 8006bea:	4798      	blx	r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e7f1      	b.n	8006bd8 <_scanf_float+0x2a0>
 8006bf4:	24be      	movs	r4, #190	; 0xbe
 8006bf6:	0064      	lsls	r4, r4, #1
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	429d      	cmp	r5, r3
 8006bfc:	d800      	bhi.n	8006c00 <_scanf_float+0x2c8>
 8006bfe:	e6de      	b.n	80069be <_scanf_float+0x86>
 8006c00:	3d01      	subs	r5, #1
 8006c02:	593b      	ldr	r3, [r7, r4]
 8006c04:	0032      	movs	r2, r6
 8006c06:	7829      	ldrb	r1, [r5, #0]
 8006c08:	9802      	ldr	r0, [sp, #8]
 8006c0a:	4798      	blx	r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	e7f1      	b.n	8006bf8 <_scanf_float+0x2c0>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	0032      	movs	r2, r6
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	7819      	ldrb	r1, [r3, #0]
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	23be      	movs	r3, #190	; 0xbe
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	58fb      	ldr	r3, [r7, r3]
 8006c24:	9802      	ldr	r0, [sp, #8]
 8006c26:	4798      	blx	r3
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	e7c3      	b.n	8006bb8 <_scanf_float+0x280>
 8006c30:	fffffeff 	.word	0xfffffeff
 8006c34:	fffffe7f 	.word	0xfffffe7f
 8006c38:	fffff87f 	.word	0xfffff87f
 8006c3c:	fffffd7f 	.word	0xfffffd7f
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1e6c      	subs	r4, r5, #1
 8006c44:	7821      	ldrb	r1, [r4, #0]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	2965      	cmp	r1, #101	; 0x65
 8006c4c:	d00c      	beq.n	8006c68 <_scanf_float+0x330>
 8006c4e:	2945      	cmp	r1, #69	; 0x45
 8006c50:	d00a      	beq.n	8006c68 <_scanf_float+0x330>
 8006c52:	23be      	movs	r3, #190	; 0xbe
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	58fb      	ldr	r3, [r7, r3]
 8006c58:	0032      	movs	r2, r6
 8006c5a:	9802      	ldr	r0, [sp, #8]
 8006c5c:	4798      	blx	r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1eac      	subs	r4, r5, #2
 8006c62:	3b01      	subs	r3, #1
 8006c64:	7821      	ldrb	r1, [r4, #0]
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	23be      	movs	r3, #190	; 0xbe
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	0032      	movs	r2, r6
 8006c6e:	58fb      	ldr	r3, [r7, r3]
 8006c70:	9802      	ldr	r0, [sp, #8]
 8006c72:	4798      	blx	r3
 8006c74:	0025      	movs	r5, r4
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	2310      	movs	r3, #16
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	4019      	ands	r1, r3
 8006c7e:	9103      	str	r1, [sp, #12]
 8006c80:	421a      	tst	r2, r3
 8006c82:	d15b      	bne.n	8006d3c <_scanf_float+0x404>
 8006c84:	22c0      	movs	r2, #192	; 0xc0
 8006c86:	7029      	strb	r1, [r5, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	00d2      	lsls	r2, r2, #3
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2280      	movs	r2, #128	; 0x80
 8006c90:	00d2      	lsls	r2, r2, #3
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d11d      	bne.n	8006cd2 <_scanf_float+0x39a>
 8006c96:	9b05      	ldr	r3, [sp, #20]
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	9901      	ldr	r1, [sp, #4]
 8006c9c:	1a9a      	subs	r2, r3, r2
 8006c9e:	428b      	cmp	r3, r1
 8006ca0:	d124      	bne.n	8006cec <_scanf_float+0x3b4>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	9904      	ldr	r1, [sp, #16]
 8006ca6:	9802      	ldr	r0, [sp, #8]
 8006ca8:	f002 fda8 	bl	80097fc <_strtod_r>
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	0004      	movs	r4, r0
 8006cb2:	000d      	movs	r5, r1
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	0791      	lsls	r1, r2, #30
 8006cb8:	d525      	bpl.n	8006d06 <_scanf_float+0x3ce>
 8006cba:	9907      	ldr	r1, [sp, #28]
 8006cbc:	1d1a      	adds	r2, r3, #4
 8006cbe:	600a      	str	r2, [r1, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	601c      	str	r4, [r3, #0]
 8006cc4:	605d      	str	r5, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	9803      	ldr	r0, [sp, #12]
 8006cce:	b00b      	add	sp, #44	; 0x2c
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0e4      	beq.n	8006ca2 <_scanf_float+0x36a>
 8006cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cda:	9a03      	ldr	r2, [sp, #12]
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	9802      	ldr	r0, [sp, #8]
 8006ce0:	230a      	movs	r3, #10
 8006ce2:	f002 fe19 	bl	8009918 <_strtol_r>
 8006ce6:	9b08      	ldr	r3, [sp, #32]
 8006ce8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006cea:	1ac2      	subs	r2, r0, r3
 8006cec:	003b      	movs	r3, r7
 8006cee:	3370      	adds	r3, #112	; 0x70
 8006cf0:	33ff      	adds	r3, #255	; 0xff
 8006cf2:	429d      	cmp	r5, r3
 8006cf4:	d302      	bcc.n	8006cfc <_scanf_float+0x3c4>
 8006cf6:	003d      	movs	r5, r7
 8006cf8:	356f      	adds	r5, #111	; 0x6f
 8006cfa:	35ff      	adds	r5, #255	; 0xff
 8006cfc:	0028      	movs	r0, r5
 8006cfe:	4910      	ldr	r1, [pc, #64]	; (8006d40 <_scanf_float+0x408>)
 8006d00:	f000 f950 	bl	8006fa4 <siprintf>
 8006d04:	e7cd      	b.n	8006ca2 <_scanf_float+0x36a>
 8006d06:	1d19      	adds	r1, r3, #4
 8006d08:	0752      	lsls	r2, r2, #29
 8006d0a:	d502      	bpl.n	8006d12 <_scanf_float+0x3da>
 8006d0c:	9a07      	ldr	r2, [sp, #28]
 8006d0e:	6011      	str	r1, [r2, #0]
 8006d10:	e7d6      	b.n	8006cc0 <_scanf_float+0x388>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	0020      	movs	r0, r4
 8006d16:	6011      	str	r1, [r2, #0]
 8006d18:	681e      	ldr	r6, [r3, #0]
 8006d1a:	0022      	movs	r2, r4
 8006d1c:	002b      	movs	r3, r5
 8006d1e:	0029      	movs	r1, r5
 8006d20:	f7fb faea 	bl	80022f8 <__aeabi_dcmpun>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d004      	beq.n	8006d32 <_scanf_float+0x3fa>
 8006d28:	4806      	ldr	r0, [pc, #24]	; (8006d44 <_scanf_float+0x40c>)
 8006d2a:	f000 fadf 	bl	80072ec <nanf>
 8006d2e:	6030      	str	r0, [r6, #0]
 8006d30:	e7c9      	b.n	8006cc6 <_scanf_float+0x38e>
 8006d32:	0020      	movs	r0, r4
 8006d34:	0029      	movs	r1, r5
 8006d36:	f7fb fbd1 	bl	80024dc <__aeabi_d2f>
 8006d3a:	e7f8      	b.n	8006d2e <_scanf_float+0x3f6>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e63f      	b.n	80069c0 <_scanf_float+0x88>
 8006d40:	0800ac30 	.word	0x0800ac30
 8006d44:	0800afc5 	.word	0x0800afc5

08006d48 <std>:
 8006d48:	2300      	movs	r3, #0
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	0004      	movs	r4, r0
 8006d4e:	6003      	str	r3, [r0, #0]
 8006d50:	6043      	str	r3, [r0, #4]
 8006d52:	6083      	str	r3, [r0, #8]
 8006d54:	8181      	strh	r1, [r0, #12]
 8006d56:	6643      	str	r3, [r0, #100]	; 0x64
 8006d58:	81c2      	strh	r2, [r0, #14]
 8006d5a:	6103      	str	r3, [r0, #16]
 8006d5c:	6143      	str	r3, [r0, #20]
 8006d5e:	6183      	str	r3, [r0, #24]
 8006d60:	0019      	movs	r1, r3
 8006d62:	2208      	movs	r2, #8
 8006d64:	305c      	adds	r0, #92	; 0x5c
 8006d66:	f000 fa2f 	bl	80071c8 <memset>
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <std+0x50>)
 8006d6c:	6224      	str	r4, [r4, #32]
 8006d6e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <std+0x54>)
 8006d72:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <std+0x58>)
 8006d76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <std+0x5c>)
 8006d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <std+0x60>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d005      	beq.n	8006d8e <std+0x46>
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <std+0x64>)
 8006d84:	429c      	cmp	r4, r3
 8006d86:	d002      	beq.n	8006d8e <std+0x46>
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <std+0x68>)
 8006d8a:	429c      	cmp	r4, r3
 8006d8c:	d103      	bne.n	8006d96 <std+0x4e>
 8006d8e:	0020      	movs	r0, r4
 8006d90:	3058      	adds	r0, #88	; 0x58
 8006d92:	f000 fa9d 	bl	80072d0 <__retarget_lock_init_recursive>
 8006d96:	bd10      	pop	{r4, pc}
 8006d98:	08006fe5 	.word	0x08006fe5
 8006d9c:	0800700d 	.word	0x0800700d
 8006da0:	08007045 	.word	0x08007045
 8006da4:	08007071 	.word	0x08007071
 8006da8:	200003b0 	.word	0x200003b0
 8006dac:	20000418 	.word	0x20000418
 8006db0:	20000480 	.word	0x20000480

08006db4 <stdio_exit_handler>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4a03      	ldr	r2, [pc, #12]	; (8006dc4 <stdio_exit_handler+0x10>)
 8006db8:	4903      	ldr	r1, [pc, #12]	; (8006dc8 <stdio_exit_handler+0x14>)
 8006dba:	4804      	ldr	r0, [pc, #16]	; (8006dcc <stdio_exit_handler+0x18>)
 8006dbc:	f000 f86c 	bl	8006e98 <_fwalk_sglue>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	2000000c 	.word	0x2000000c
 8006dc8:	08009cf9 	.word	0x08009cf9
 8006dcc:	20000018 	.word	0x20000018

08006dd0 <cleanup_stdio>:
 8006dd0:	6841      	ldr	r1, [r0, #4]
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <cleanup_stdio+0x30>)
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	0004      	movs	r4, r0
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d001      	beq.n	8006de0 <cleanup_stdio+0x10>
 8006ddc:	f002 ff8c 	bl	8009cf8 <_fflush_r>
 8006de0:	68a1      	ldr	r1, [r4, #8]
 8006de2:	4b08      	ldr	r3, [pc, #32]	; (8006e04 <cleanup_stdio+0x34>)
 8006de4:	4299      	cmp	r1, r3
 8006de6:	d002      	beq.n	8006dee <cleanup_stdio+0x1e>
 8006de8:	0020      	movs	r0, r4
 8006dea:	f002 ff85 	bl	8009cf8 <_fflush_r>
 8006dee:	68e1      	ldr	r1, [r4, #12]
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <cleanup_stdio+0x38>)
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d002      	beq.n	8006dfc <cleanup_stdio+0x2c>
 8006df6:	0020      	movs	r0, r4
 8006df8:	f002 ff7e 	bl	8009cf8 <_fflush_r>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	200003b0 	.word	0x200003b0
 8006e04:	20000418 	.word	0x20000418
 8006e08:	20000480 	.word	0x20000480

08006e0c <global_stdio_init.part.0>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <global_stdio_init.part.0+0x28>)
 8006e10:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <global_stdio_init.part.0+0x2c>)
 8006e12:	2104      	movs	r1, #4
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	4809      	ldr	r0, [pc, #36]	; (8006e3c <global_stdio_init.part.0+0x30>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f7ff ff95 	bl	8006d48 <std>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	2109      	movs	r1, #9
 8006e22:	4807      	ldr	r0, [pc, #28]	; (8006e40 <global_stdio_init.part.0+0x34>)
 8006e24:	f7ff ff90 	bl	8006d48 <std>
 8006e28:	2202      	movs	r2, #2
 8006e2a:	2112      	movs	r1, #18
 8006e2c:	4805      	ldr	r0, [pc, #20]	; (8006e44 <global_stdio_init.part.0+0x38>)
 8006e2e:	f7ff ff8b 	bl	8006d48 <std>
 8006e32:	bd10      	pop	{r4, pc}
 8006e34:	200004e8 	.word	0x200004e8
 8006e38:	08006db5 	.word	0x08006db5
 8006e3c:	200003b0 	.word	0x200003b0
 8006e40:	20000418 	.word	0x20000418
 8006e44:	20000480 	.word	0x20000480

08006e48 <__sfp_lock_acquire>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	4802      	ldr	r0, [pc, #8]	; (8006e54 <__sfp_lock_acquire+0xc>)
 8006e4c:	f000 fa41 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	200004f1 	.word	0x200004f1

08006e58 <__sfp_lock_release>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4802      	ldr	r0, [pc, #8]	; (8006e64 <__sfp_lock_release+0xc>)
 8006e5c:	f000 fa3a 	bl	80072d4 <__retarget_lock_release_recursive>
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	200004f1 	.word	0x200004f1

08006e68 <__sinit>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	0004      	movs	r4, r0
 8006e6c:	f7ff ffec 	bl	8006e48 <__sfp_lock_acquire>
 8006e70:	6a23      	ldr	r3, [r4, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <__sinit+0x14>
 8006e76:	f7ff ffef 	bl	8006e58 <__sfp_lock_release>
 8006e7a:	bd10      	pop	{r4, pc}
 8006e7c:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <__sinit+0x28>)
 8006e7e:	6223      	str	r3, [r4, #32]
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <__sinit+0x2c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f6      	bne.n	8006e76 <__sinit+0xe>
 8006e88:	f7ff ffc0 	bl	8006e0c <global_stdio_init.part.0>
 8006e8c:	e7f3      	b.n	8006e76 <__sinit+0xe>
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	08006dd1 	.word	0x08006dd1
 8006e94:	200004e8 	.word	0x200004e8

08006e98 <_fwalk_sglue>:
 8006e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9a:	0014      	movs	r4, r2
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	9000      	str	r0, [sp, #0]
 8006ea0:	9101      	str	r1, [sp, #4]
 8006ea2:	68a5      	ldr	r5, [r4, #8]
 8006ea4:	6867      	ldr	r7, [r4, #4]
 8006ea6:	3f01      	subs	r7, #1
 8006ea8:	d504      	bpl.n	8006eb4 <_fwalk_sglue+0x1c>
 8006eaa:	6824      	ldr	r4, [r4, #0]
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	d1f8      	bne.n	8006ea2 <_fwalk_sglue+0xa>
 8006eb0:	0030      	movs	r0, r6
 8006eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eb4:	89ab      	ldrh	r3, [r5, #12]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d908      	bls.n	8006ecc <_fwalk_sglue+0x34>
 8006eba:	220e      	movs	r2, #14
 8006ebc:	5eab      	ldrsh	r3, [r5, r2]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	d004      	beq.n	8006ecc <_fwalk_sglue+0x34>
 8006ec2:	0029      	movs	r1, r5
 8006ec4:	9800      	ldr	r0, [sp, #0]
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	4798      	blx	r3
 8006eca:	4306      	orrs	r6, r0
 8006ecc:	3568      	adds	r5, #104	; 0x68
 8006ece:	e7ea      	b.n	8006ea6 <_fwalk_sglue+0xe>

08006ed0 <putchar>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <putchar+0x10>)
 8006ed4:	0001      	movs	r1, r0
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	6882      	ldr	r2, [r0, #8]
 8006eda:	f002 ff9f 	bl	8009e1c <_putc_r>
 8006ede:	bd10      	pop	{r4, pc}
 8006ee0:	20000064 	.word	0x20000064

08006ee4 <_puts_r>:
 8006ee4:	6a03      	ldr	r3, [r0, #32]
 8006ee6:	b570      	push	{r4, r5, r6, lr}
 8006ee8:	0005      	movs	r5, r0
 8006eea:	000e      	movs	r6, r1
 8006eec:	6884      	ldr	r4, [r0, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <_puts_r+0x12>
 8006ef2:	f7ff ffb9 	bl	8006e68 <__sinit>
 8006ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d405      	bmi.n	8006f08 <_puts_r+0x24>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	059b      	lsls	r3, r3, #22
 8006f00:	d402      	bmi.n	8006f08 <_puts_r+0x24>
 8006f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f04:	f000 f9e5 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	071b      	lsls	r3, r3, #28
 8006f0c:	d502      	bpl.n	8006f14 <_puts_r+0x30>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d11f      	bne.n	8006f54 <_puts_r+0x70>
 8006f14:	0021      	movs	r1, r4
 8006f16:	0028      	movs	r0, r5
 8006f18:	f000 f8f2 	bl	8007100 <__swsetup_r>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d019      	beq.n	8006f54 <_puts_r+0x70>
 8006f20:	2501      	movs	r5, #1
 8006f22:	426d      	negs	r5, r5
 8006f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f26:	07db      	lsls	r3, r3, #31
 8006f28:	d405      	bmi.n	8006f36 <_puts_r+0x52>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	059b      	lsls	r3, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_puts_r+0x52>
 8006f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f32:	f000 f9cf 	bl	80072d4 <__retarget_lock_release_recursive>
 8006f36:	0028      	movs	r0, r5
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da04      	bge.n	8006f4c <_puts_r+0x68>
 8006f42:	69a2      	ldr	r2, [r4, #24]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	dc16      	bgt.n	8006f76 <_puts_r+0x92>
 8006f48:	290a      	cmp	r1, #10
 8006f4a:	d014      	beq.n	8006f76 <_puts_r+0x92>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	6022      	str	r2, [r4, #0]
 8006f52:	7019      	strb	r1, [r3, #0]
 8006f54:	68a3      	ldr	r3, [r4, #8]
 8006f56:	7831      	ldrb	r1, [r6, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	d1ed      	bne.n	8006f3a <_puts_r+0x56>
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	da0f      	bge.n	8006f84 <_puts_r+0xa0>
 8006f64:	0028      	movs	r0, r5
 8006f66:	0022      	movs	r2, r4
 8006f68:	310a      	adds	r1, #10
 8006f6a:	f000 f887 	bl	800707c <__swbuf_r>
 8006f6e:	250a      	movs	r5, #10
 8006f70:	3001      	adds	r0, #1
 8006f72:	d1d7      	bne.n	8006f24 <_puts_r+0x40>
 8006f74:	e7d4      	b.n	8006f20 <_puts_r+0x3c>
 8006f76:	0022      	movs	r2, r4
 8006f78:	0028      	movs	r0, r5
 8006f7a:	f000 f87f 	bl	800707c <__swbuf_r>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d1e8      	bne.n	8006f54 <_puts_r+0x70>
 8006f82:	e7cd      	b.n	8006f20 <_puts_r+0x3c>
 8006f84:	250a      	movs	r5, #10
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	6022      	str	r2, [r4, #0]
 8006f8c:	701d      	strb	r5, [r3, #0]
 8006f8e:	e7c9      	b.n	8006f24 <_puts_r+0x40>

08006f90 <puts>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <puts+0x10>)
 8006f94:	0001      	movs	r1, r0
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	f7ff ffa4 	bl	8006ee4 <_puts_r>
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	20000064 	.word	0x20000064

08006fa4 <siprintf>:
 8006fa4:	b40e      	push	{r1, r2, r3}
 8006fa6:	b500      	push	{lr}
 8006fa8:	490b      	ldr	r1, [pc, #44]	; (8006fd8 <siprintf+0x34>)
 8006faa:	b09c      	sub	sp, #112	; 0x70
 8006fac:	ab1d      	add	r3, sp, #116	; 0x74
 8006fae:	9002      	str	r0, [sp, #8]
 8006fb0:	9006      	str	r0, [sp, #24]
 8006fb2:	9107      	str	r1, [sp, #28]
 8006fb4:	9104      	str	r1, [sp, #16]
 8006fb6:	4809      	ldr	r0, [pc, #36]	; (8006fdc <siprintf+0x38>)
 8006fb8:	4909      	ldr	r1, [pc, #36]	; (8006fe0 <siprintf+0x3c>)
 8006fba:	cb04      	ldmia	r3!, {r2}
 8006fbc:	9105      	str	r1, [sp, #20]
 8006fbe:	6800      	ldr	r0, [r0, #0]
 8006fc0:	a902      	add	r1, sp, #8
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	f002 fd0e 	bl	80099e4 <_svfiprintf_r>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	b01c      	add	sp, #112	; 0x70
 8006fd0:	bc08      	pop	{r3}
 8006fd2:	b003      	add	sp, #12
 8006fd4:	4718      	bx	r3
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	7fffffff 	.word	0x7fffffff
 8006fdc:	20000064 	.word	0x20000064
 8006fe0:	ffff0208 	.word	0xffff0208

08006fe4 <__sread>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	000c      	movs	r4, r1
 8006fe8:	250e      	movs	r5, #14
 8006fea:	5f49      	ldrsh	r1, [r1, r5]
 8006fec:	f000 f91e 	bl	800722c <_read_r>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	db03      	blt.n	8006ffc <__sread+0x18>
 8006ff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ff6:	181b      	adds	r3, r3, r0
 8006ff8:	6563      	str	r3, [r4, #84]	; 0x54
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	4a02      	ldr	r2, [pc, #8]	; (8007008 <__sread+0x24>)
 8007000:	4013      	ands	r3, r2
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	e7f9      	b.n	8006ffa <__sread+0x16>
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	ffffefff 	.word	0xffffefff

0800700c <__swrite>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	001f      	movs	r7, r3
 8007010:	898b      	ldrh	r3, [r1, #12]
 8007012:	0005      	movs	r5, r0
 8007014:	000c      	movs	r4, r1
 8007016:	0016      	movs	r6, r2
 8007018:	05db      	lsls	r3, r3, #23
 800701a:	d505      	bpl.n	8007028 <__swrite+0x1c>
 800701c:	230e      	movs	r3, #14
 800701e:	5ec9      	ldrsh	r1, [r1, r3]
 8007020:	2200      	movs	r2, #0
 8007022:	2302      	movs	r3, #2
 8007024:	f000 f8ee 	bl	8007204 <_lseek_r>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	4a05      	ldr	r2, [pc, #20]	; (8007040 <__swrite+0x34>)
 800702c:	0028      	movs	r0, r5
 800702e:	4013      	ands	r3, r2
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	0032      	movs	r2, r6
 8007034:	230e      	movs	r3, #14
 8007036:	5ee1      	ldrsh	r1, [r4, r3]
 8007038:	003b      	movs	r3, r7
 800703a:	f000 f90b 	bl	8007254 <_write_r>
 800703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007040:	ffffefff 	.word	0xffffefff

08007044 <__sseek>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	000c      	movs	r4, r1
 8007048:	250e      	movs	r5, #14
 800704a:	5f49      	ldrsh	r1, [r1, r5]
 800704c:	f000 f8da 	bl	8007204 <_lseek_r>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	1c42      	adds	r2, r0, #1
 8007054:	d103      	bne.n	800705e <__sseek+0x1a>
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <__sseek+0x28>)
 8007058:	4013      	ands	r3, r2
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	bd70      	pop	{r4, r5, r6, pc}
 800705e:	2280      	movs	r2, #128	; 0x80
 8007060:	0152      	lsls	r2, r2, #5
 8007062:	4313      	orrs	r3, r2
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	6560      	str	r0, [r4, #84]	; 0x54
 8007068:	e7f8      	b.n	800705c <__sseek+0x18>
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	ffffefff 	.word	0xffffefff

08007070 <__sclose>:
 8007070:	b510      	push	{r4, lr}
 8007072:	230e      	movs	r3, #14
 8007074:	5ec9      	ldrsh	r1, [r1, r3]
 8007076:	f000 f8b3 	bl	80071e0 <_close_r>
 800707a:	bd10      	pop	{r4, pc}

0800707c <__swbuf_r>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	0006      	movs	r6, r0
 8007080:	000d      	movs	r5, r1
 8007082:	0014      	movs	r4, r2
 8007084:	2800      	cmp	r0, #0
 8007086:	d004      	beq.n	8007092 <__swbuf_r+0x16>
 8007088:	6a03      	ldr	r3, [r0, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <__swbuf_r+0x16>
 800708e:	f7ff feeb 	bl	8006e68 <__sinit>
 8007092:	69a3      	ldr	r3, [r4, #24]
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	071b      	lsls	r3, r3, #28
 800709a:	d528      	bpl.n	80070ee <__swbuf_r+0x72>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d025      	beq.n	80070ee <__swbuf_r+0x72>
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	b2ef      	uxtb	r7, r5
 80070a8:	1ac0      	subs	r0, r0, r3
 80070aa:	6963      	ldr	r3, [r4, #20]
 80070ac:	b2ed      	uxtb	r5, r5
 80070ae:	4283      	cmp	r3, r0
 80070b0:	dc05      	bgt.n	80070be <__swbuf_r+0x42>
 80070b2:	0021      	movs	r1, r4
 80070b4:	0030      	movs	r0, r6
 80070b6:	f002 fe1f 	bl	8009cf8 <_fflush_r>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d11d      	bne.n	80070fa <__swbuf_r+0x7e>
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	3001      	adds	r0, #1
 80070c2:	3b01      	subs	r3, #1
 80070c4:	60a3      	str	r3, [r4, #8]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	701f      	strb	r7, [r3, #0]
 80070ce:	6963      	ldr	r3, [r4, #20]
 80070d0:	4283      	cmp	r3, r0
 80070d2:	d004      	beq.n	80070de <__swbuf_r+0x62>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	07db      	lsls	r3, r3, #31
 80070d8:	d507      	bpl.n	80070ea <__swbuf_r+0x6e>
 80070da:	2d0a      	cmp	r5, #10
 80070dc:	d105      	bne.n	80070ea <__swbuf_r+0x6e>
 80070de:	0021      	movs	r1, r4
 80070e0:	0030      	movs	r0, r6
 80070e2:	f002 fe09 	bl	8009cf8 <_fflush_r>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d107      	bne.n	80070fa <__swbuf_r+0x7e>
 80070ea:	0028      	movs	r0, r5
 80070ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ee:	0021      	movs	r1, r4
 80070f0:	0030      	movs	r0, r6
 80070f2:	f000 f805 	bl	8007100 <__swsetup_r>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d0d3      	beq.n	80070a2 <__swbuf_r+0x26>
 80070fa:	2501      	movs	r5, #1
 80070fc:	426d      	negs	r5, r5
 80070fe:	e7f4      	b.n	80070ea <__swbuf_r+0x6e>

08007100 <__swsetup_r>:
 8007100:	4b30      	ldr	r3, [pc, #192]	; (80071c4 <__swsetup_r+0xc4>)
 8007102:	b570      	push	{r4, r5, r6, lr}
 8007104:	0005      	movs	r5, r0
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	000c      	movs	r4, r1
 800710a:	2800      	cmp	r0, #0
 800710c:	d004      	beq.n	8007118 <__swsetup_r+0x18>
 800710e:	6a03      	ldr	r3, [r0, #32]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <__swsetup_r+0x18>
 8007114:	f7ff fea8 	bl	8006e68 <__sinit>
 8007118:	230c      	movs	r3, #12
 800711a:	5ee2      	ldrsh	r2, [r4, r3]
 800711c:	b293      	uxth	r3, r2
 800711e:	0711      	lsls	r1, r2, #28
 8007120:	d423      	bmi.n	800716a <__swsetup_r+0x6a>
 8007122:	06d9      	lsls	r1, r3, #27
 8007124:	d407      	bmi.n	8007136 <__swsetup_r+0x36>
 8007126:	2309      	movs	r3, #9
 8007128:	2001      	movs	r0, #1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	3337      	adds	r3, #55	; 0x37
 800712e:	4313      	orrs	r3, r2
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	4240      	negs	r0, r0
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	075b      	lsls	r3, r3, #29
 8007138:	d513      	bpl.n	8007162 <__swsetup_r+0x62>
 800713a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713c:	2900      	cmp	r1, #0
 800713e:	d008      	beq.n	8007152 <__swsetup_r+0x52>
 8007140:	0023      	movs	r3, r4
 8007142:	3344      	adds	r3, #68	; 0x44
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <__swsetup_r+0x4e>
 8007148:	0028      	movs	r0, r5
 800714a:	f000 ff71 	bl	8008030 <_free_r>
 800714e:	2300      	movs	r3, #0
 8007150:	6363      	str	r3, [r4, #52]	; 0x34
 8007152:	2224      	movs	r2, #36	; 0x24
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	4393      	bics	r3, r2
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	2308      	movs	r3, #8
 8007164:	89a2      	ldrh	r2, [r4, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <__swsetup_r+0x88>
 8007170:	21a0      	movs	r1, #160	; 0xa0
 8007172:	2280      	movs	r2, #128	; 0x80
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	0089      	lsls	r1, r1, #2
 8007178:	0092      	lsls	r2, r2, #2
 800717a:	400b      	ands	r3, r1
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <__swsetup_r+0x88>
 8007180:	0021      	movs	r1, r4
 8007182:	0028      	movs	r0, r5
 8007184:	f002 fe0c 	bl	8009da0 <__smakebuf_r>
 8007188:	220c      	movs	r2, #12
 800718a:	5ea3      	ldrsh	r3, [r4, r2]
 800718c:	2001      	movs	r0, #1
 800718e:	001a      	movs	r2, r3
 8007190:	b299      	uxth	r1, r3
 8007192:	4002      	ands	r2, r0
 8007194:	4203      	tst	r3, r0
 8007196:	d00f      	beq.n	80071b8 <__swsetup_r+0xb8>
 8007198:	2200      	movs	r2, #0
 800719a:	60a2      	str	r2, [r4, #8]
 800719c:	6962      	ldr	r2, [r4, #20]
 800719e:	4252      	negs	r2, r2
 80071a0:	61a2      	str	r2, [r4, #24]
 80071a2:	2000      	movs	r0, #0
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	4282      	cmp	r2, r0
 80071a8:	d1c4      	bne.n	8007134 <__swsetup_r+0x34>
 80071aa:	0609      	lsls	r1, r1, #24
 80071ac:	d5c2      	bpl.n	8007134 <__swsetup_r+0x34>
 80071ae:	2240      	movs	r2, #64	; 0x40
 80071b0:	4313      	orrs	r3, r2
 80071b2:	81a3      	strh	r3, [r4, #12]
 80071b4:	3801      	subs	r0, #1
 80071b6:	e7bd      	b.n	8007134 <__swsetup_r+0x34>
 80071b8:	0788      	lsls	r0, r1, #30
 80071ba:	d400      	bmi.n	80071be <__swsetup_r+0xbe>
 80071bc:	6962      	ldr	r2, [r4, #20]
 80071be:	60a2      	str	r2, [r4, #8]
 80071c0:	e7ef      	b.n	80071a2 <__swsetup_r+0xa2>
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	20000064 	.word	0x20000064

080071c8 <memset>:
 80071c8:	0003      	movs	r3, r0
 80071ca:	1882      	adds	r2, r0, r2
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d100      	bne.n	80071d2 <memset+0xa>
 80071d0:	4770      	bx	lr
 80071d2:	7019      	strb	r1, [r3, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	e7f9      	b.n	80071cc <memset+0x4>

080071d8 <_localeconv_r>:
 80071d8:	4800      	ldr	r0, [pc, #0]	; (80071dc <_localeconv_r+0x4>)
 80071da:	4770      	bx	lr
 80071dc:	20000158 	.word	0x20000158

080071e0 <_close_r>:
 80071e0:	2300      	movs	r3, #0
 80071e2:	b570      	push	{r4, r5, r6, lr}
 80071e4:	4d06      	ldr	r5, [pc, #24]	; (8007200 <_close_r+0x20>)
 80071e6:	0004      	movs	r4, r0
 80071e8:	0008      	movs	r0, r1
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	f7fb ff39 	bl	8003062 <_close>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d103      	bne.n	80071fc <_close_r+0x1c>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d000      	beq.n	80071fc <_close_r+0x1c>
 80071fa:	6023      	str	r3, [r4, #0]
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	200004ec 	.word	0x200004ec

08007204 <_lseek_r>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	0004      	movs	r4, r0
 8007208:	0008      	movs	r0, r1
 800720a:	0011      	movs	r1, r2
 800720c:	001a      	movs	r2, r3
 800720e:	2300      	movs	r3, #0
 8007210:	4d05      	ldr	r5, [pc, #20]	; (8007228 <_lseek_r+0x24>)
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7fb ff46 	bl	80030a4 <_lseek>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d103      	bne.n	8007224 <_lseek_r+0x20>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d000      	beq.n	8007224 <_lseek_r+0x20>
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	200004ec 	.word	0x200004ec

0800722c <_read_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	0004      	movs	r4, r0
 8007230:	0008      	movs	r0, r1
 8007232:	0011      	movs	r1, r2
 8007234:	001a      	movs	r2, r3
 8007236:	2300      	movs	r3, #0
 8007238:	4d05      	ldr	r5, [pc, #20]	; (8007250 <_read_r+0x24>)
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7fb fef4 	bl	8003028 <_read>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d103      	bne.n	800724c <_read_r+0x20>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d000      	beq.n	800724c <_read_r+0x20>
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	bd70      	pop	{r4, r5, r6, pc}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	200004ec 	.word	0x200004ec

08007254 <_write_r>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	0004      	movs	r4, r0
 8007258:	0008      	movs	r0, r1
 800725a:	0011      	movs	r1, r2
 800725c:	001a      	movs	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	4d05      	ldr	r5, [pc, #20]	; (8007278 <_write_r+0x24>)
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7fb f9ea 	bl	800263c <_write>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d103      	bne.n	8007274 <_write_r+0x20>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d000      	beq.n	8007274 <_write_r+0x20>
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	bd70      	pop	{r4, r5, r6, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	200004ec 	.word	0x200004ec

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	; (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	20000064 	.word	0x20000064

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	2600      	movs	r6, #0
 800728c:	4c0c      	ldr	r4, [pc, #48]	; (80072c0 <__libc_init_array+0x38>)
 800728e:	4d0d      	ldr	r5, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 8007290:	1b64      	subs	r4, r4, r5
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	2600      	movs	r6, #0
 800729a:	f003 fc01 	bl	800aaa0 <_init>
 800729e:	4c0a      	ldr	r4, [pc, #40]	; (80072c8 <__libc_init_array+0x40>)
 80072a0:	4d0a      	ldr	r5, [pc, #40]	; (80072cc <__libc_init_array+0x44>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	00b3      	lsls	r3, r6, #2
 80072ae:	58eb      	ldr	r3, [r5, r3]
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	00b3      	lsls	r3, r6, #2
 80072b8:	58eb      	ldr	r3, [r5, r3]
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	0800b030 	.word	0x0800b030
 80072c4:	0800b030 	.word	0x0800b030
 80072c8:	0800b034 	.word	0x0800b034
 80072cc:	0800b030 	.word	0x0800b030

080072d0 <__retarget_lock_init_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_acquire_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <__retarget_lock_release_recursive>:
 80072d4:	4770      	bx	lr

080072d6 <memchr>:
 80072d6:	b2c9      	uxtb	r1, r1
 80072d8:	1882      	adds	r2, r0, r2
 80072da:	4290      	cmp	r0, r2
 80072dc:	d101      	bne.n	80072e2 <memchr+0xc>
 80072de:	2000      	movs	r0, #0
 80072e0:	4770      	bx	lr
 80072e2:	7803      	ldrb	r3, [r0, #0]
 80072e4:	428b      	cmp	r3, r1
 80072e6:	d0fb      	beq.n	80072e0 <memchr+0xa>
 80072e8:	3001      	adds	r0, #1
 80072ea:	e7f6      	b.n	80072da <memchr+0x4>

080072ec <nanf>:
 80072ec:	4800      	ldr	r0, [pc, #0]	; (80072f0 <nanf+0x4>)
 80072ee:	4770      	bx	lr
 80072f0:	7fc00000 	.word	0x7fc00000

080072f4 <quorem>:
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	6902      	ldr	r2, [r0, #16]
 80072f8:	690b      	ldr	r3, [r1, #16]
 80072fa:	b089      	sub	sp, #36	; 0x24
 80072fc:	0007      	movs	r7, r0
 80072fe:	9104      	str	r1, [sp, #16]
 8007300:	2000      	movs	r0, #0
 8007302:	429a      	cmp	r2, r3
 8007304:	db69      	blt.n	80073da <quorem+0xe6>
 8007306:	3b01      	subs	r3, #1
 8007308:	009c      	lsls	r4, r3, #2
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	000b      	movs	r3, r1
 800730e:	3314      	adds	r3, #20
 8007310:	9306      	str	r3, [sp, #24]
 8007312:	191b      	adds	r3, r3, r4
 8007314:	9305      	str	r3, [sp, #20]
 8007316:	003b      	movs	r3, r7
 8007318:	3314      	adds	r3, #20
 800731a:	9303      	str	r3, [sp, #12]
 800731c:	191c      	adds	r4, r3, r4
 800731e:	9b05      	ldr	r3, [sp, #20]
 8007320:	6826      	ldr	r6, [r4, #0]
 8007322:	681d      	ldr	r5, [r3, #0]
 8007324:	0030      	movs	r0, r6
 8007326:	3501      	adds	r5, #1
 8007328:	0029      	movs	r1, r5
 800732a:	f7f8 ff09 	bl	8000140 <__udivsi3>
 800732e:	9002      	str	r0, [sp, #8]
 8007330:	42ae      	cmp	r6, r5
 8007332:	d329      	bcc.n	8007388 <quorem+0x94>
 8007334:	9b06      	ldr	r3, [sp, #24]
 8007336:	2600      	movs	r6, #0
 8007338:	469c      	mov	ip, r3
 800733a:	9d03      	ldr	r5, [sp, #12]
 800733c:	9606      	str	r6, [sp, #24]
 800733e:	4662      	mov	r2, ip
 8007340:	ca08      	ldmia	r2!, {r3}
 8007342:	6828      	ldr	r0, [r5, #0]
 8007344:	4694      	mov	ip, r2
 8007346:	9a02      	ldr	r2, [sp, #8]
 8007348:	b299      	uxth	r1, r3
 800734a:	4351      	muls	r1, r2
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	4353      	muls	r3, r2
 8007350:	1989      	adds	r1, r1, r6
 8007352:	0c0a      	lsrs	r2, r1, #16
 8007354:	189b      	adds	r3, r3, r2
 8007356:	9307      	str	r3, [sp, #28]
 8007358:	0c1e      	lsrs	r6, r3, #16
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	b282      	uxth	r2, r0
 800735e:	18d2      	adds	r2, r2, r3
 8007360:	466b      	mov	r3, sp
 8007362:	b289      	uxth	r1, r1
 8007364:	8b9b      	ldrh	r3, [r3, #28]
 8007366:	1a52      	subs	r2, r2, r1
 8007368:	0c01      	lsrs	r1, r0, #16
 800736a:	1ac9      	subs	r1, r1, r3
 800736c:	1413      	asrs	r3, r2, #16
 800736e:	18cb      	adds	r3, r1, r3
 8007370:	1419      	asrs	r1, r3, #16
 8007372:	b292      	uxth	r2, r2
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	4313      	orrs	r3, r2
 8007378:	c508      	stmia	r5!, {r3}
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	9106      	str	r1, [sp, #24]
 800737e:	4563      	cmp	r3, ip
 8007380:	d2dd      	bcs.n	800733e <quorem+0x4a>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d030      	beq.n	80073ea <quorem+0xf6>
 8007388:	0038      	movs	r0, r7
 800738a:	9904      	ldr	r1, [sp, #16]
 800738c:	f001 fa2a 	bl	80087e4 <__mcmp>
 8007390:	2800      	cmp	r0, #0
 8007392:	db21      	blt.n	80073d8 <quorem+0xe4>
 8007394:	0038      	movs	r0, r7
 8007396:	2600      	movs	r6, #0
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	9c04      	ldr	r4, [sp, #16]
 800739c:	3301      	adds	r3, #1
 800739e:	9302      	str	r3, [sp, #8]
 80073a0:	3014      	adds	r0, #20
 80073a2:	3414      	adds	r4, #20
 80073a4:	6803      	ldr	r3, [r0, #0]
 80073a6:	cc02      	ldmia	r4!, {r1}
 80073a8:	b29d      	uxth	r5, r3
 80073aa:	19ad      	adds	r5, r5, r6
 80073ac:	b28a      	uxth	r2, r1
 80073ae:	1aaa      	subs	r2, r5, r2
 80073b0:	0c09      	lsrs	r1, r1, #16
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	1a5b      	subs	r3, r3, r1
 80073b6:	1411      	asrs	r1, r2, #16
 80073b8:	185b      	adds	r3, r3, r1
 80073ba:	141e      	asrs	r6, r3, #16
 80073bc:	b292      	uxth	r2, r2
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	4313      	orrs	r3, r2
 80073c2:	c008      	stmia	r0!, {r3}
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	d2ec      	bcs.n	80073a4 <quorem+0xb0>
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	18d3      	adds	r3, r2, r3
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	d015      	beq.n	8007404 <quorem+0x110>
 80073d8:	9802      	ldr	r0, [sp, #8]
 80073da:	b009      	add	sp, #36	; 0x24
 80073dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <quorem+0xfe>
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	3c04      	subs	r4, #4
 80073ee:	42a3      	cmp	r3, r4
 80073f0:	d3f5      	bcc.n	80073de <quorem+0xea>
 80073f2:	9b01      	ldr	r3, [sp, #4]
 80073f4:	613b      	str	r3, [r7, #16]
 80073f6:	e7c7      	b.n	8007388 <quorem+0x94>
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	d106      	bne.n	800740c <quorem+0x118>
 80073fe:	9a01      	ldr	r2, [sp, #4]
 8007400:	3a01      	subs	r2, #1
 8007402:	9201      	str	r2, [sp, #4]
 8007404:	9a03      	ldr	r2, [sp, #12]
 8007406:	3b04      	subs	r3, #4
 8007408:	429a      	cmp	r2, r3
 800740a:	d3f5      	bcc.n	80073f8 <quorem+0x104>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	e7e2      	b.n	80073d8 <quorem+0xe4>
	...

08007414 <_dtoa_r>:
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	0014      	movs	r4, r2
 8007418:	001d      	movs	r5, r3
 800741a:	69c6      	ldr	r6, [r0, #28]
 800741c:	b09d      	sub	sp, #116	; 0x74
 800741e:	9408      	str	r4, [sp, #32]
 8007420:	9509      	str	r5, [sp, #36]	; 0x24
 8007422:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007424:	9004      	str	r0, [sp, #16]
 8007426:	2e00      	cmp	r6, #0
 8007428:	d10f      	bne.n	800744a <_dtoa_r+0x36>
 800742a:	2010      	movs	r0, #16
 800742c:	f000 fe4a 	bl	80080c4 <malloc>
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	1e02      	subs	r2, r0, #0
 8007434:	61d8      	str	r0, [r3, #28]
 8007436:	d104      	bne.n	8007442 <_dtoa_r+0x2e>
 8007438:	21ef      	movs	r1, #239	; 0xef
 800743a:	4bc6      	ldr	r3, [pc, #792]	; (8007754 <_dtoa_r+0x340>)
 800743c:	48c6      	ldr	r0, [pc, #792]	; (8007758 <_dtoa_r+0x344>)
 800743e:	f002 fd8d 	bl	8009f5c <__assert_func>
 8007442:	6046      	str	r6, [r0, #4]
 8007444:	6086      	str	r6, [r0, #8]
 8007446:	6006      	str	r6, [r0, #0]
 8007448:	60c6      	str	r6, [r0, #12]
 800744a:	9b04      	ldr	r3, [sp, #16]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	2900      	cmp	r1, #0
 8007452:	d00b      	beq.n	800746c <_dtoa_r+0x58>
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	2301      	movs	r3, #1
 8007458:	4093      	lsls	r3, r2
 800745a:	604a      	str	r2, [r1, #4]
 800745c:	608b      	str	r3, [r1, #8]
 800745e:	9804      	ldr	r0, [sp, #16]
 8007460:	f000 ff32 	bl	80082c8 <_Bfree>
 8007464:	2200      	movs	r2, #0
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	2d00      	cmp	r5, #0
 800746e:	da1e      	bge.n	80074ae <_dtoa_r+0x9a>
 8007470:	2301      	movs	r3, #1
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	006b      	lsls	r3, r5, #1
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	9309      	str	r3, [sp, #36]	; 0x24
 800747a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800747c:	4bb7      	ldr	r3, [pc, #732]	; (800775c <_dtoa_r+0x348>)
 800747e:	4ab7      	ldr	r2, [pc, #732]	; (800775c <_dtoa_r+0x348>)
 8007480:	403b      	ands	r3, r7
 8007482:	4293      	cmp	r3, r2
 8007484:	d116      	bne.n	80074b4 <_dtoa_r+0xa0>
 8007486:	4bb6      	ldr	r3, [pc, #728]	; (8007760 <_dtoa_r+0x34c>)
 8007488:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	033b      	lsls	r3, r7, #12
 800748e:	0b1b      	lsrs	r3, r3, #12
 8007490:	4323      	orrs	r3, r4
 8007492:	d101      	bne.n	8007498 <_dtoa_r+0x84>
 8007494:	f000 fdb5 	bl	8008002 <_dtoa_r+0xbee>
 8007498:	4bb2      	ldr	r3, [pc, #712]	; (8007764 <_dtoa_r+0x350>)
 800749a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800749c:	9306      	str	r3, [sp, #24]
 800749e:	2a00      	cmp	r2, #0
 80074a0:	d002      	beq.n	80074a8 <_dtoa_r+0x94>
 80074a2:	4bb1      	ldr	r3, [pc, #708]	; (8007768 <_dtoa_r+0x354>)
 80074a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	9806      	ldr	r0, [sp, #24]
 80074aa:	b01d      	add	sp, #116	; 0x74
 80074ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ae:	2300      	movs	r3, #0
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	e7e2      	b.n	800747a <_dtoa_r+0x66>
 80074b4:	9a08      	ldr	r2, [sp, #32]
 80074b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b8:	9210      	str	r2, [sp, #64]	; 0x40
 80074ba:	9311      	str	r3, [sp, #68]	; 0x44
 80074bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80074be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074c0:	2200      	movs	r2, #0
 80074c2:	2300      	movs	r3, #0
 80074c4:	f7f8 ffc2 	bl	800044c <__aeabi_dcmpeq>
 80074c8:	1e06      	subs	r6, r0, #0
 80074ca:	d009      	beq.n	80074e0 <_dtoa_r+0xcc>
 80074cc:	2301      	movs	r3, #1
 80074ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	4ba6      	ldr	r3, [pc, #664]	; (800776c <_dtoa_r+0x358>)
 80074d4:	9306      	str	r3, [sp, #24]
 80074d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0e5      	beq.n	80074a8 <_dtoa_r+0x94>
 80074dc:	4ba4      	ldr	r3, [pc, #656]	; (8007770 <_dtoa_r+0x35c>)
 80074de:	e7e1      	b.n	80074a4 <_dtoa_r+0x90>
 80074e0:	ab1a      	add	r3, sp, #104	; 0x68
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	ab1b      	add	r3, sp, #108	; 0x6c
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	9804      	ldr	r0, [sp, #16]
 80074ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ee:	f001 fa95 	bl	8008a1c <__d2b>
 80074f2:	007a      	lsls	r2, r7, #1
 80074f4:	9005      	str	r0, [sp, #20]
 80074f6:	0d52      	lsrs	r2, r2, #21
 80074f8:	d100      	bne.n	80074fc <_dtoa_r+0xe8>
 80074fa:	e07b      	b.n	80075f4 <_dtoa_r+0x1e0>
 80074fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074fe:	9617      	str	r6, [sp, #92]	; 0x5c
 8007500:	0319      	lsls	r1, r3, #12
 8007502:	4b9c      	ldr	r3, [pc, #624]	; (8007774 <_dtoa_r+0x360>)
 8007504:	0b09      	lsrs	r1, r1, #12
 8007506:	430b      	orrs	r3, r1
 8007508:	499b      	ldr	r1, [pc, #620]	; (8007778 <_dtoa_r+0x364>)
 800750a:	1857      	adds	r7, r2, r1
 800750c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800750e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007510:	0019      	movs	r1, r3
 8007512:	2200      	movs	r2, #0
 8007514:	4b99      	ldr	r3, [pc, #612]	; (800777c <_dtoa_r+0x368>)
 8007516:	f7fa fb6d 	bl	8001bf4 <__aeabi_dsub>
 800751a:	4a99      	ldr	r2, [pc, #612]	; (8007780 <_dtoa_r+0x36c>)
 800751c:	4b99      	ldr	r3, [pc, #612]	; (8007784 <_dtoa_r+0x370>)
 800751e:	f7fa f8a7 	bl	8001670 <__aeabi_dmul>
 8007522:	4a99      	ldr	r2, [pc, #612]	; (8007788 <_dtoa_r+0x374>)
 8007524:	4b99      	ldr	r3, [pc, #612]	; (800778c <_dtoa_r+0x378>)
 8007526:	f7f9 f949 	bl	80007bc <__aeabi_dadd>
 800752a:	0004      	movs	r4, r0
 800752c:	0038      	movs	r0, r7
 800752e:	000d      	movs	r5, r1
 8007530:	f7fa ff36 	bl	80023a0 <__aeabi_i2d>
 8007534:	4a96      	ldr	r2, [pc, #600]	; (8007790 <_dtoa_r+0x37c>)
 8007536:	4b97      	ldr	r3, [pc, #604]	; (8007794 <_dtoa_r+0x380>)
 8007538:	f7fa f89a 	bl	8001670 <__aeabi_dmul>
 800753c:	0002      	movs	r2, r0
 800753e:	000b      	movs	r3, r1
 8007540:	0020      	movs	r0, r4
 8007542:	0029      	movs	r1, r5
 8007544:	f7f9 f93a 	bl	80007bc <__aeabi_dadd>
 8007548:	0004      	movs	r4, r0
 800754a:	000d      	movs	r5, r1
 800754c:	f7fa fef2 	bl	8002334 <__aeabi_d2iz>
 8007550:	2200      	movs	r2, #0
 8007552:	9003      	str	r0, [sp, #12]
 8007554:	2300      	movs	r3, #0
 8007556:	0020      	movs	r0, r4
 8007558:	0029      	movs	r1, r5
 800755a:	f7f8 ff7d 	bl	8000458 <__aeabi_dcmplt>
 800755e:	2800      	cmp	r0, #0
 8007560:	d00b      	beq.n	800757a <_dtoa_r+0x166>
 8007562:	9803      	ldr	r0, [sp, #12]
 8007564:	f7fa ff1c 	bl	80023a0 <__aeabi_i2d>
 8007568:	002b      	movs	r3, r5
 800756a:	0022      	movs	r2, r4
 800756c:	f7f8 ff6e 	bl	800044c <__aeabi_dcmpeq>
 8007570:	4243      	negs	r3, r0
 8007572:	4158      	adcs	r0, r3
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	1a1b      	subs	r3, r3, r0
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	2301      	movs	r3, #1
 800757c:	9316      	str	r3, [sp, #88]	; 0x58
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	2b16      	cmp	r3, #22
 8007582:	d810      	bhi.n	80075a6 <_dtoa_r+0x192>
 8007584:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007586:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007588:	9a03      	ldr	r2, [sp, #12]
 800758a:	4b83      	ldr	r3, [pc, #524]	; (8007798 <_dtoa_r+0x384>)
 800758c:	00d2      	lsls	r2, r2, #3
 800758e:	189b      	adds	r3, r3, r2
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f7f8 ff60 	bl	8000458 <__aeabi_dcmplt>
 8007598:	2800      	cmp	r0, #0
 800759a:	d047      	beq.n	800762c <_dtoa_r+0x218>
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	3b01      	subs	r3, #1
 80075a0:	9303      	str	r3, [sp, #12]
 80075a2:	2300      	movs	r3, #0
 80075a4:	9316      	str	r3, [sp, #88]	; 0x58
 80075a6:	2200      	movs	r2, #0
 80075a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80075aa:	920a      	str	r2, [sp, #40]	; 0x28
 80075ac:	1bdb      	subs	r3, r3, r7
 80075ae:	1e5a      	subs	r2, r3, #1
 80075b0:	d53e      	bpl.n	8007630 <_dtoa_r+0x21c>
 80075b2:	2201      	movs	r2, #1
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	930a      	str	r3, [sp, #40]	; 0x28
 80075b8:	2300      	movs	r3, #0
 80075ba:	930c      	str	r3, [sp, #48]	; 0x30
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	db38      	blt.n	8007634 <_dtoa_r+0x220>
 80075c2:	9a03      	ldr	r2, [sp, #12]
 80075c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075c6:	4694      	mov	ip, r2
 80075c8:	4463      	add	r3, ip
 80075ca:	930c      	str	r3, [sp, #48]	; 0x30
 80075cc:	2300      	movs	r3, #0
 80075ce:	9213      	str	r2, [sp, #76]	; 0x4c
 80075d0:	930d      	str	r3, [sp, #52]	; 0x34
 80075d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075d4:	2401      	movs	r4, #1
 80075d6:	2b09      	cmp	r3, #9
 80075d8:	d867      	bhi.n	80076aa <_dtoa_r+0x296>
 80075da:	2b05      	cmp	r3, #5
 80075dc:	dd02      	ble.n	80075e4 <_dtoa_r+0x1d0>
 80075de:	2400      	movs	r4, #0
 80075e0:	3b04      	subs	r3, #4
 80075e2:	9322      	str	r3, [sp, #136]	; 0x88
 80075e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075e6:	1e98      	subs	r0, r3, #2
 80075e8:	2803      	cmp	r0, #3
 80075ea:	d867      	bhi.n	80076bc <_dtoa_r+0x2a8>
 80075ec:	f7f8 fd94 	bl	8000118 <__gnu_thumb1_case_uqi>
 80075f0:	5b383a2b 	.word	0x5b383a2b
 80075f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075f6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80075f8:	18f6      	adds	r6, r6, r3
 80075fa:	4b68      	ldr	r3, [pc, #416]	; (800779c <_dtoa_r+0x388>)
 80075fc:	18f2      	adds	r2, r6, r3
 80075fe:	2a20      	cmp	r2, #32
 8007600:	dd0f      	ble.n	8007622 <_dtoa_r+0x20e>
 8007602:	2340      	movs	r3, #64	; 0x40
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	409f      	lsls	r7, r3
 8007608:	4b65      	ldr	r3, [pc, #404]	; (80077a0 <_dtoa_r+0x38c>)
 800760a:	0038      	movs	r0, r7
 800760c:	18f3      	adds	r3, r6, r3
 800760e:	40dc      	lsrs	r4, r3
 8007610:	4320      	orrs	r0, r4
 8007612:	f7fa fef5 	bl	8002400 <__aeabi_ui2d>
 8007616:	2201      	movs	r2, #1
 8007618:	4b62      	ldr	r3, [pc, #392]	; (80077a4 <_dtoa_r+0x390>)
 800761a:	1e77      	subs	r7, r6, #1
 800761c:	18cb      	adds	r3, r1, r3
 800761e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007620:	e776      	b.n	8007510 <_dtoa_r+0xfc>
 8007622:	2320      	movs	r3, #32
 8007624:	0020      	movs	r0, r4
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	4098      	lsls	r0, r3
 800762a:	e7f2      	b.n	8007612 <_dtoa_r+0x1fe>
 800762c:	9016      	str	r0, [sp, #88]	; 0x58
 800762e:	e7ba      	b.n	80075a6 <_dtoa_r+0x192>
 8007630:	920c      	str	r2, [sp, #48]	; 0x30
 8007632:	e7c3      	b.n	80075bc <_dtoa_r+0x1a8>
 8007634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007636:	9a03      	ldr	r2, [sp, #12]
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	930a      	str	r3, [sp, #40]	; 0x28
 800763c:	4253      	negs	r3, r2
 800763e:	930d      	str	r3, [sp, #52]	; 0x34
 8007640:	2300      	movs	r3, #0
 8007642:	9313      	str	r3, [sp, #76]	; 0x4c
 8007644:	e7c5      	b.n	80075d2 <_dtoa_r+0x1be>
 8007646:	2300      	movs	r3, #0
 8007648:	930f      	str	r3, [sp, #60]	; 0x3c
 800764a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800764c:	930b      	str	r3, [sp, #44]	; 0x2c
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dc13      	bgt.n	800767c <_dtoa_r+0x268>
 8007654:	2301      	movs	r3, #1
 8007656:	001a      	movs	r2, r3
 8007658:	930b      	str	r3, [sp, #44]	; 0x2c
 800765a:	9307      	str	r3, [sp, #28]
 800765c:	9223      	str	r2, [sp, #140]	; 0x8c
 800765e:	e00d      	b.n	800767c <_dtoa_r+0x268>
 8007660:	2301      	movs	r3, #1
 8007662:	e7f1      	b.n	8007648 <_dtoa_r+0x234>
 8007664:	2300      	movs	r3, #0
 8007666:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007668:	930f      	str	r3, [sp, #60]	; 0x3c
 800766a:	4694      	mov	ip, r2
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	4463      	add	r3, ip
 8007670:	930b      	str	r3, [sp, #44]	; 0x2c
 8007672:	3301      	adds	r3, #1
 8007674:	9307      	str	r3, [sp, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	dc00      	bgt.n	800767c <_dtoa_r+0x268>
 800767a:	2301      	movs	r3, #1
 800767c:	9a04      	ldr	r2, [sp, #16]
 800767e:	2100      	movs	r1, #0
 8007680:	69d0      	ldr	r0, [r2, #28]
 8007682:	2204      	movs	r2, #4
 8007684:	0015      	movs	r5, r2
 8007686:	3514      	adds	r5, #20
 8007688:	429d      	cmp	r5, r3
 800768a:	d91b      	bls.n	80076c4 <_dtoa_r+0x2b0>
 800768c:	6041      	str	r1, [r0, #4]
 800768e:	9804      	ldr	r0, [sp, #16]
 8007690:	f000 fdd6 	bl	8008240 <_Balloc>
 8007694:	9006      	str	r0, [sp, #24]
 8007696:	2800      	cmp	r0, #0
 8007698:	d117      	bne.n	80076ca <_dtoa_r+0x2b6>
 800769a:	21b0      	movs	r1, #176	; 0xb0
 800769c:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <_dtoa_r+0x394>)
 800769e:	482e      	ldr	r0, [pc, #184]	; (8007758 <_dtoa_r+0x344>)
 80076a0:	9a06      	ldr	r2, [sp, #24]
 80076a2:	31ff      	adds	r1, #255	; 0xff
 80076a4:	e6cb      	b.n	800743e <_dtoa_r+0x2a>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e7dd      	b.n	8007666 <_dtoa_r+0x252>
 80076aa:	2300      	movs	r3, #0
 80076ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80076ae:	9322      	str	r3, [sp, #136]	; 0x88
 80076b0:	3b01      	subs	r3, #1
 80076b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b4:	9307      	str	r3, [sp, #28]
 80076b6:	2200      	movs	r2, #0
 80076b8:	3313      	adds	r3, #19
 80076ba:	e7cf      	b.n	800765c <_dtoa_r+0x248>
 80076bc:	2301      	movs	r3, #1
 80076be:	930f      	str	r3, [sp, #60]	; 0x3c
 80076c0:	3b02      	subs	r3, #2
 80076c2:	e7f6      	b.n	80076b2 <_dtoa_r+0x29e>
 80076c4:	3101      	adds	r1, #1
 80076c6:	0052      	lsls	r2, r2, #1
 80076c8:	e7dc      	b.n	8007684 <_dtoa_r+0x270>
 80076ca:	9b04      	ldr	r3, [sp, #16]
 80076cc:	9a06      	ldr	r2, [sp, #24]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	9b07      	ldr	r3, [sp, #28]
 80076d4:	2b0e      	cmp	r3, #14
 80076d6:	d900      	bls.n	80076da <_dtoa_r+0x2c6>
 80076d8:	e0e5      	b.n	80078a6 <_dtoa_r+0x492>
 80076da:	2c00      	cmp	r4, #0
 80076dc:	d100      	bne.n	80076e0 <_dtoa_r+0x2cc>
 80076de:	e0e2      	b.n	80078a6 <_dtoa_r+0x492>
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dd64      	ble.n	80077b0 <_dtoa_r+0x39c>
 80076e6:	210f      	movs	r1, #15
 80076e8:	9a03      	ldr	r2, [sp, #12]
 80076ea:	4b2b      	ldr	r3, [pc, #172]	; (8007798 <_dtoa_r+0x384>)
 80076ec:	400a      	ands	r2, r1
 80076ee:	00d2      	lsls	r2, r2, #3
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	681e      	ldr	r6, [r3, #0]
 80076f4:	685f      	ldr	r7, [r3, #4]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	2402      	movs	r4, #2
 80076fa:	111d      	asrs	r5, r3, #4
 80076fc:	05db      	lsls	r3, r3, #23
 80076fe:	d50a      	bpl.n	8007716 <_dtoa_r+0x302>
 8007700:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <_dtoa_r+0x398>)
 8007702:	400d      	ands	r5, r1
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	9810      	ldr	r0, [sp, #64]	; 0x40
 800770a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800770c:	f7f9 fbb6 	bl	8000e7c <__aeabi_ddiv>
 8007710:	9008      	str	r0, [sp, #32]
 8007712:	9109      	str	r1, [sp, #36]	; 0x24
 8007714:	3401      	adds	r4, #1
 8007716:	4b25      	ldr	r3, [pc, #148]	; (80077ac <_dtoa_r+0x398>)
 8007718:	930e      	str	r3, [sp, #56]	; 0x38
 800771a:	2d00      	cmp	r5, #0
 800771c:	d108      	bne.n	8007730 <_dtoa_r+0x31c>
 800771e:	9808      	ldr	r0, [sp, #32]
 8007720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007722:	0032      	movs	r2, r6
 8007724:	003b      	movs	r3, r7
 8007726:	f7f9 fba9 	bl	8000e7c <__aeabi_ddiv>
 800772a:	9008      	str	r0, [sp, #32]
 800772c:	9109      	str	r1, [sp, #36]	; 0x24
 800772e:	e05a      	b.n	80077e6 <_dtoa_r+0x3d2>
 8007730:	2301      	movs	r3, #1
 8007732:	421d      	tst	r5, r3
 8007734:	d009      	beq.n	800774a <_dtoa_r+0x336>
 8007736:	18e4      	adds	r4, r4, r3
 8007738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800773a:	0030      	movs	r0, r6
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	0039      	movs	r1, r7
 8007742:	f7f9 ff95 	bl	8001670 <__aeabi_dmul>
 8007746:	0006      	movs	r6, r0
 8007748:	000f      	movs	r7, r1
 800774a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800774c:	106d      	asrs	r5, r5, #1
 800774e:	3308      	adds	r3, #8
 8007750:	e7e2      	b.n	8007718 <_dtoa_r+0x304>
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	0800ac42 	.word	0x0800ac42
 8007758:	0800ac59 	.word	0x0800ac59
 800775c:	7ff00000 	.word	0x7ff00000
 8007760:	0000270f 	.word	0x0000270f
 8007764:	0800ac3e 	.word	0x0800ac3e
 8007768:	0800ac41 	.word	0x0800ac41
 800776c:	0800ac0c 	.word	0x0800ac0c
 8007770:	0800ac0d 	.word	0x0800ac0d
 8007774:	3ff00000 	.word	0x3ff00000
 8007778:	fffffc01 	.word	0xfffffc01
 800777c:	3ff80000 	.word	0x3ff80000
 8007780:	636f4361 	.word	0x636f4361
 8007784:	3fd287a7 	.word	0x3fd287a7
 8007788:	8b60c8b3 	.word	0x8b60c8b3
 800778c:	3fc68a28 	.word	0x3fc68a28
 8007790:	509f79fb 	.word	0x509f79fb
 8007794:	3fd34413 	.word	0x3fd34413
 8007798:	0800ad48 	.word	0x0800ad48
 800779c:	00000432 	.word	0x00000432
 80077a0:	00000412 	.word	0x00000412
 80077a4:	fe100000 	.word	0xfe100000
 80077a8:	0800acb1 	.word	0x0800acb1
 80077ac:	0800ad20 	.word	0x0800ad20
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	2402      	movs	r4, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d016      	beq.n	80077e6 <_dtoa_r+0x3d2>
 80077b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077bc:	220f      	movs	r2, #15
 80077be:	425d      	negs	r5, r3
 80077c0:	402a      	ands	r2, r5
 80077c2:	4bdd      	ldr	r3, [pc, #884]	; (8007b38 <_dtoa_r+0x724>)
 80077c4:	00d2      	lsls	r2, r2, #3
 80077c6:	189b      	adds	r3, r3, r2
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f7f9 ff50 	bl	8001670 <__aeabi_dmul>
 80077d0:	2701      	movs	r7, #1
 80077d2:	2300      	movs	r3, #0
 80077d4:	9008      	str	r0, [sp, #32]
 80077d6:	9109      	str	r1, [sp, #36]	; 0x24
 80077d8:	4ed8      	ldr	r6, [pc, #864]	; (8007b3c <_dtoa_r+0x728>)
 80077da:	112d      	asrs	r5, r5, #4
 80077dc:	2d00      	cmp	r5, #0
 80077de:	d000      	beq.n	80077e2 <_dtoa_r+0x3ce>
 80077e0:	e091      	b.n	8007906 <_dtoa_r+0x4f2>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1a1      	bne.n	800772a <_dtoa_r+0x316>
 80077e6:	9e08      	ldr	r6, [sp, #32]
 80077e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d100      	bne.n	80077f2 <_dtoa_r+0x3de>
 80077f0:	e094      	b.n	800791c <_dtoa_r+0x508>
 80077f2:	2200      	movs	r2, #0
 80077f4:	0030      	movs	r0, r6
 80077f6:	0039      	movs	r1, r7
 80077f8:	4bd1      	ldr	r3, [pc, #836]	; (8007b40 <_dtoa_r+0x72c>)
 80077fa:	f7f8 fe2d 	bl	8000458 <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d100      	bne.n	8007804 <_dtoa_r+0x3f0>
 8007802:	e08b      	b.n	800791c <_dtoa_r+0x508>
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d100      	bne.n	800780c <_dtoa_r+0x3f8>
 800780a:	e087      	b.n	800791c <_dtoa_r+0x508>
 800780c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd45      	ble.n	800789e <_dtoa_r+0x48a>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	3b01      	subs	r3, #1
 8007818:	930e      	str	r3, [sp, #56]	; 0x38
 800781a:	0030      	movs	r0, r6
 800781c:	4bc9      	ldr	r3, [pc, #804]	; (8007b44 <_dtoa_r+0x730>)
 800781e:	0039      	movs	r1, r7
 8007820:	f7f9 ff26 	bl	8001670 <__aeabi_dmul>
 8007824:	9008      	str	r0, [sp, #32]
 8007826:	9109      	str	r1, [sp, #36]	; 0x24
 8007828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782a:	3401      	adds	r4, #1
 800782c:	0020      	movs	r0, r4
 800782e:	9e08      	ldr	r6, [sp, #32]
 8007830:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007832:	9312      	str	r3, [sp, #72]	; 0x48
 8007834:	f7fa fdb4 	bl	80023a0 <__aeabi_i2d>
 8007838:	0032      	movs	r2, r6
 800783a:	003b      	movs	r3, r7
 800783c:	f7f9 ff18 	bl	8001670 <__aeabi_dmul>
 8007840:	2200      	movs	r2, #0
 8007842:	4bc1      	ldr	r3, [pc, #772]	; (8007b48 <_dtoa_r+0x734>)
 8007844:	f7f8 ffba 	bl	80007bc <__aeabi_dadd>
 8007848:	4ac0      	ldr	r2, [pc, #768]	; (8007b4c <_dtoa_r+0x738>)
 800784a:	9014      	str	r0, [sp, #80]	; 0x50
 800784c:	9115      	str	r1, [sp, #84]	; 0x54
 800784e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007850:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007852:	4694      	mov	ip, r2
 8007854:	9308      	str	r3, [sp, #32]
 8007856:	9409      	str	r4, [sp, #36]	; 0x24
 8007858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800785a:	4463      	add	r3, ip
 800785c:	9318      	str	r3, [sp, #96]	; 0x60
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007862:	2b00      	cmp	r3, #0
 8007864:	d15e      	bne.n	8007924 <_dtoa_r+0x510>
 8007866:	2200      	movs	r2, #0
 8007868:	4bb9      	ldr	r3, [pc, #740]	; (8007b50 <_dtoa_r+0x73c>)
 800786a:	0030      	movs	r0, r6
 800786c:	0039      	movs	r1, r7
 800786e:	f7fa f9c1 	bl	8001bf4 <__aeabi_dsub>
 8007872:	9a08      	ldr	r2, [sp, #32]
 8007874:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007876:	0004      	movs	r4, r0
 8007878:	000d      	movs	r5, r1
 800787a:	f7f8 fe01 	bl	8000480 <__aeabi_dcmpgt>
 800787e:	2800      	cmp	r0, #0
 8007880:	d000      	beq.n	8007884 <_dtoa_r+0x470>
 8007882:	e2b3      	b.n	8007dec <_dtoa_r+0x9d8>
 8007884:	48b3      	ldr	r0, [pc, #716]	; (8007b54 <_dtoa_r+0x740>)
 8007886:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007888:	4684      	mov	ip, r0
 800788a:	4461      	add	r1, ip
 800788c:	000b      	movs	r3, r1
 800788e:	0020      	movs	r0, r4
 8007890:	0029      	movs	r1, r5
 8007892:	9a08      	ldr	r2, [sp, #32]
 8007894:	f7f8 fde0 	bl	8000458 <__aeabi_dcmplt>
 8007898:	2800      	cmp	r0, #0
 800789a:	d000      	beq.n	800789e <_dtoa_r+0x48a>
 800789c:	e2a3      	b.n	8007de6 <_dtoa_r+0x9d2>
 800789e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80078a2:	9308      	str	r3, [sp, #32]
 80078a4:	9409      	str	r4, [sp, #36]	; 0x24
 80078a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da00      	bge.n	80078ae <_dtoa_r+0x49a>
 80078ac:	e179      	b.n	8007ba2 <_dtoa_r+0x78e>
 80078ae:	9a03      	ldr	r2, [sp, #12]
 80078b0:	2a0e      	cmp	r2, #14
 80078b2:	dd00      	ble.n	80078b6 <_dtoa_r+0x4a2>
 80078b4:	e175      	b.n	8007ba2 <_dtoa_r+0x78e>
 80078b6:	4ba0      	ldr	r3, [pc, #640]	; (8007b38 <_dtoa_r+0x724>)
 80078b8:	00d2      	lsls	r2, r2, #3
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	681e      	ldr	r6, [r3, #0]
 80078be:	685f      	ldr	r7, [r3, #4]
 80078c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db00      	blt.n	80078c8 <_dtoa_r+0x4b4>
 80078c6:	e0e5      	b.n	8007a94 <_dtoa_r+0x680>
 80078c8:	9b07      	ldr	r3, [sp, #28]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dd00      	ble.n	80078d0 <_dtoa_r+0x4bc>
 80078ce:	e0e1      	b.n	8007a94 <_dtoa_r+0x680>
 80078d0:	d000      	beq.n	80078d4 <_dtoa_r+0x4c0>
 80078d2:	e288      	b.n	8007de6 <_dtoa_r+0x9d2>
 80078d4:	2200      	movs	r2, #0
 80078d6:	0030      	movs	r0, r6
 80078d8:	0039      	movs	r1, r7
 80078da:	4b9d      	ldr	r3, [pc, #628]	; (8007b50 <_dtoa_r+0x73c>)
 80078dc:	f7f9 fec8 	bl	8001670 <__aeabi_dmul>
 80078e0:	9a08      	ldr	r2, [sp, #32]
 80078e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e4:	f7f8 fdd6 	bl	8000494 <__aeabi_dcmpge>
 80078e8:	9e07      	ldr	r6, [sp, #28]
 80078ea:	0037      	movs	r7, r6
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d000      	beq.n	80078f2 <_dtoa_r+0x4de>
 80078f0:	e25f      	b.n	8007db2 <_dtoa_r+0x99e>
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	9a06      	ldr	r2, [sp, #24]
 80078f6:	3301      	adds	r3, #1
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	2331      	movs	r3, #49	; 0x31
 80078fc:	7013      	strb	r3, [r2, #0]
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	9303      	str	r3, [sp, #12]
 8007904:	e25a      	b.n	8007dbc <_dtoa_r+0x9a8>
 8007906:	423d      	tst	r5, r7
 8007908:	d005      	beq.n	8007916 <_dtoa_r+0x502>
 800790a:	6832      	ldr	r2, [r6, #0]
 800790c:	6873      	ldr	r3, [r6, #4]
 800790e:	f7f9 feaf 	bl	8001670 <__aeabi_dmul>
 8007912:	003b      	movs	r3, r7
 8007914:	3401      	adds	r4, #1
 8007916:	106d      	asrs	r5, r5, #1
 8007918:	3608      	adds	r6, #8
 800791a:	e75f      	b.n	80077dc <_dtoa_r+0x3c8>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	930e      	str	r3, [sp, #56]	; 0x38
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	e783      	b.n	800782c <_dtoa_r+0x418>
 8007924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007926:	4b84      	ldr	r3, [pc, #528]	; (8007b38 <_dtoa_r+0x724>)
 8007928:	3a01      	subs	r2, #1
 800792a:	00d2      	lsls	r2, r2, #3
 800792c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800792e:	189b      	adds	r3, r3, r2
 8007930:	9c08      	ldr	r4, [sp, #32]
 8007932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2900      	cmp	r1, #0
 800793a:	d051      	beq.n	80079e0 <_dtoa_r+0x5cc>
 800793c:	2000      	movs	r0, #0
 800793e:	4986      	ldr	r1, [pc, #536]	; (8007b58 <_dtoa_r+0x744>)
 8007940:	f7f9 fa9c 	bl	8000e7c <__aeabi_ddiv>
 8007944:	0022      	movs	r2, r4
 8007946:	002b      	movs	r3, r5
 8007948:	f7fa f954 	bl	8001bf4 <__aeabi_dsub>
 800794c:	9a06      	ldr	r2, [sp, #24]
 800794e:	0004      	movs	r4, r0
 8007950:	4694      	mov	ip, r2
 8007952:	000d      	movs	r5, r1
 8007954:	9b06      	ldr	r3, [sp, #24]
 8007956:	9314      	str	r3, [sp, #80]	; 0x50
 8007958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800795a:	4463      	add	r3, ip
 800795c:	9318      	str	r3, [sp, #96]	; 0x60
 800795e:	0039      	movs	r1, r7
 8007960:	0030      	movs	r0, r6
 8007962:	f7fa fce7 	bl	8002334 <__aeabi_d2iz>
 8007966:	9012      	str	r0, [sp, #72]	; 0x48
 8007968:	f7fa fd1a 	bl	80023a0 <__aeabi_i2d>
 800796c:	0002      	movs	r2, r0
 800796e:	000b      	movs	r3, r1
 8007970:	0030      	movs	r0, r6
 8007972:	0039      	movs	r1, r7
 8007974:	f7fa f93e 	bl	8001bf4 <__aeabi_dsub>
 8007978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800797a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800797c:	3301      	adds	r3, #1
 800797e:	9308      	str	r3, [sp, #32]
 8007980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007982:	0006      	movs	r6, r0
 8007984:	3330      	adds	r3, #48	; 0x30
 8007986:	7013      	strb	r3, [r2, #0]
 8007988:	0022      	movs	r2, r4
 800798a:	002b      	movs	r3, r5
 800798c:	000f      	movs	r7, r1
 800798e:	f7f8 fd63 	bl	8000458 <__aeabi_dcmplt>
 8007992:	2800      	cmp	r0, #0
 8007994:	d174      	bne.n	8007a80 <_dtoa_r+0x66c>
 8007996:	0032      	movs	r2, r6
 8007998:	003b      	movs	r3, r7
 800799a:	2000      	movs	r0, #0
 800799c:	4968      	ldr	r1, [pc, #416]	; (8007b40 <_dtoa_r+0x72c>)
 800799e:	f7fa f929 	bl	8001bf4 <__aeabi_dsub>
 80079a2:	0022      	movs	r2, r4
 80079a4:	002b      	movs	r3, r5
 80079a6:	f7f8 fd57 	bl	8000458 <__aeabi_dcmplt>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d000      	beq.n	80079b0 <_dtoa_r+0x59c>
 80079ae:	e0d7      	b.n	8007b60 <_dtoa_r+0x74c>
 80079b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80079b2:	9a08      	ldr	r2, [sp, #32]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d100      	bne.n	80079ba <_dtoa_r+0x5a6>
 80079b8:	e771      	b.n	800789e <_dtoa_r+0x48a>
 80079ba:	2200      	movs	r2, #0
 80079bc:	0020      	movs	r0, r4
 80079be:	0029      	movs	r1, r5
 80079c0:	4b60      	ldr	r3, [pc, #384]	; (8007b44 <_dtoa_r+0x730>)
 80079c2:	f7f9 fe55 	bl	8001670 <__aeabi_dmul>
 80079c6:	4b5f      	ldr	r3, [pc, #380]	; (8007b44 <_dtoa_r+0x730>)
 80079c8:	0004      	movs	r4, r0
 80079ca:	000d      	movs	r5, r1
 80079cc:	0030      	movs	r0, r6
 80079ce:	0039      	movs	r1, r7
 80079d0:	2200      	movs	r2, #0
 80079d2:	f7f9 fe4d 	bl	8001670 <__aeabi_dmul>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	0006      	movs	r6, r0
 80079da:	000f      	movs	r7, r1
 80079dc:	9314      	str	r3, [sp, #80]	; 0x50
 80079de:	e7be      	b.n	800795e <_dtoa_r+0x54a>
 80079e0:	0020      	movs	r0, r4
 80079e2:	0029      	movs	r1, r5
 80079e4:	f7f9 fe44 	bl	8001670 <__aeabi_dmul>
 80079e8:	9a06      	ldr	r2, [sp, #24]
 80079ea:	9b06      	ldr	r3, [sp, #24]
 80079ec:	4694      	mov	ip, r2
 80079ee:	9308      	str	r3, [sp, #32]
 80079f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079f2:	9014      	str	r0, [sp, #80]	; 0x50
 80079f4:	9115      	str	r1, [sp, #84]	; 0x54
 80079f6:	4463      	add	r3, ip
 80079f8:	9319      	str	r3, [sp, #100]	; 0x64
 80079fa:	0030      	movs	r0, r6
 80079fc:	0039      	movs	r1, r7
 80079fe:	f7fa fc99 	bl	8002334 <__aeabi_d2iz>
 8007a02:	9018      	str	r0, [sp, #96]	; 0x60
 8007a04:	f7fa fccc 	bl	80023a0 <__aeabi_i2d>
 8007a08:	0002      	movs	r2, r0
 8007a0a:	000b      	movs	r3, r1
 8007a0c:	0030      	movs	r0, r6
 8007a0e:	0039      	movs	r1, r7
 8007a10:	f7fa f8f0 	bl	8001bf4 <__aeabi_dsub>
 8007a14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	3630      	adds	r6, #48	; 0x30
 8007a1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a1c:	701e      	strb	r6, [r3, #0]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	0004      	movs	r4, r0
 8007a22:	000d      	movs	r5, r1
 8007a24:	9308      	str	r3, [sp, #32]
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d12d      	bne.n	8007a86 <_dtoa_r+0x672>
 8007a2a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007a2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a2e:	9a06      	ldr	r2, [sp, #24]
 8007a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a32:	4694      	mov	ip, r2
 8007a34:	4463      	add	r3, ip
 8007a36:	2200      	movs	r2, #0
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	4b47      	ldr	r3, [pc, #284]	; (8007b58 <_dtoa_r+0x744>)
 8007a3c:	f7f8 febe 	bl	80007bc <__aeabi_dadd>
 8007a40:	0002      	movs	r2, r0
 8007a42:	000b      	movs	r3, r1
 8007a44:	0020      	movs	r0, r4
 8007a46:	0029      	movs	r1, r5
 8007a48:	f7f8 fd1a 	bl	8000480 <__aeabi_dcmpgt>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d000      	beq.n	8007a52 <_dtoa_r+0x63e>
 8007a50:	e086      	b.n	8007b60 <_dtoa_r+0x74c>
 8007a52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a56:	2000      	movs	r0, #0
 8007a58:	493f      	ldr	r1, [pc, #252]	; (8007b58 <_dtoa_r+0x744>)
 8007a5a:	f7fa f8cb 	bl	8001bf4 <__aeabi_dsub>
 8007a5e:	0002      	movs	r2, r0
 8007a60:	000b      	movs	r3, r1
 8007a62:	0020      	movs	r0, r4
 8007a64:	0029      	movs	r1, r5
 8007a66:	f7f8 fcf7 	bl	8000458 <__aeabi_dcmplt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d100      	bne.n	8007a70 <_dtoa_r+0x65c>
 8007a6e:	e716      	b.n	800789e <_dtoa_r+0x48a>
 8007a70:	9b08      	ldr	r3, [sp, #32]
 8007a72:	001a      	movs	r2, r3
 8007a74:	3a01      	subs	r2, #1
 8007a76:	9208      	str	r2, [sp, #32]
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	2a30      	cmp	r2, #48	; 0x30
 8007a7c:	d0f8      	beq.n	8007a70 <_dtoa_r+0x65c>
 8007a7e:	9308      	str	r3, [sp, #32]
 8007a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	e046      	b.n	8007b14 <_dtoa_r+0x700>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b2e      	ldr	r3, [pc, #184]	; (8007b44 <_dtoa_r+0x730>)
 8007a8a:	f7f9 fdf1 	bl	8001670 <__aeabi_dmul>
 8007a8e:	0006      	movs	r6, r0
 8007a90:	000f      	movs	r7, r1
 8007a92:	e7b2      	b.n	80079fa <_dtoa_r+0x5e6>
 8007a94:	9b06      	ldr	r3, [sp, #24]
 8007a96:	9a06      	ldr	r2, [sp, #24]
 8007a98:	930a      	str	r3, [sp, #40]	; 0x28
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	9c08      	ldr	r4, [sp, #32]
 8007a9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	189b      	adds	r3, r3, r2
 8007aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa6:	0032      	movs	r2, r6
 8007aa8:	003b      	movs	r3, r7
 8007aaa:	0020      	movs	r0, r4
 8007aac:	0029      	movs	r1, r5
 8007aae:	f7f9 f9e5 	bl	8000e7c <__aeabi_ddiv>
 8007ab2:	f7fa fc3f 	bl	8002334 <__aeabi_d2iz>
 8007ab6:	9007      	str	r0, [sp, #28]
 8007ab8:	f7fa fc72 	bl	80023a0 <__aeabi_i2d>
 8007abc:	0032      	movs	r2, r6
 8007abe:	003b      	movs	r3, r7
 8007ac0:	f7f9 fdd6 	bl	8001670 <__aeabi_dmul>
 8007ac4:	0002      	movs	r2, r0
 8007ac6:	000b      	movs	r3, r1
 8007ac8:	0020      	movs	r0, r4
 8007aca:	0029      	movs	r1, r5
 8007acc:	f7fa f892 	bl	8001bf4 <__aeabi_dsub>
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	3201      	adds	r2, #1
 8007ad6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ad8:	9208      	str	r2, [sp, #32]
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	3230      	adds	r2, #48	; 0x30
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d14f      	bne.n	8007b86 <_dtoa_r+0x772>
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	000b      	movs	r3, r1
 8007aea:	f7f8 fe67 	bl	80007bc <__aeabi_dadd>
 8007aee:	0032      	movs	r2, r6
 8007af0:	003b      	movs	r3, r7
 8007af2:	0004      	movs	r4, r0
 8007af4:	000d      	movs	r5, r1
 8007af6:	f7f8 fcc3 	bl	8000480 <__aeabi_dcmpgt>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d12e      	bne.n	8007b5c <_dtoa_r+0x748>
 8007afe:	0032      	movs	r2, r6
 8007b00:	003b      	movs	r3, r7
 8007b02:	0020      	movs	r0, r4
 8007b04:	0029      	movs	r1, r5
 8007b06:	f7f8 fca1 	bl	800044c <__aeabi_dcmpeq>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d002      	beq.n	8007b14 <_dtoa_r+0x700>
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	07de      	lsls	r6, r3, #31
 8007b12:	d423      	bmi.n	8007b5c <_dtoa_r+0x748>
 8007b14:	9905      	ldr	r1, [sp, #20]
 8007b16:	9804      	ldr	r0, [sp, #16]
 8007b18:	f000 fbd6 	bl	80082c8 <_Bfree>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9a08      	ldr	r2, [sp, #32]
 8007b20:	7013      	strb	r3, [r2, #0]
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b26:	3301      	adds	r3, #1
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d100      	bne.n	8007b32 <_dtoa_r+0x71e>
 8007b30:	e4ba      	b.n	80074a8 <_dtoa_r+0x94>
 8007b32:	9a08      	ldr	r2, [sp, #32]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e4b7      	b.n	80074a8 <_dtoa_r+0x94>
 8007b38:	0800ad48 	.word	0x0800ad48
 8007b3c:	0800ad20 	.word	0x0800ad20
 8007b40:	3ff00000 	.word	0x3ff00000
 8007b44:	40240000 	.word	0x40240000
 8007b48:	401c0000 	.word	0x401c0000
 8007b4c:	fcc00000 	.word	0xfcc00000
 8007b50:	40140000 	.word	0x40140000
 8007b54:	7cc00000 	.word	0x7cc00000
 8007b58:	3fe00000 	.word	0x3fe00000
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	930e      	str	r3, [sp, #56]	; 0x38
 8007b60:	9b08      	ldr	r3, [sp, #32]
 8007b62:	9308      	str	r3, [sp, #32]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	2a39      	cmp	r2, #57	; 0x39
 8007b6a:	d108      	bne.n	8007b7e <_dtoa_r+0x76a>
 8007b6c:	9a06      	ldr	r2, [sp, #24]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d1f7      	bne.n	8007b62 <_dtoa_r+0x74e>
 8007b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b74:	9906      	ldr	r1, [sp, #24]
 8007b76:	3201      	adds	r2, #1
 8007b78:	920e      	str	r2, [sp, #56]	; 0x38
 8007b7a:	2230      	movs	r2, #48	; 0x30
 8007b7c:	700a      	strb	r2, [r1, #0]
 8007b7e:	781a      	ldrb	r2, [r3, #0]
 8007b80:	3201      	adds	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e77c      	b.n	8007a80 <_dtoa_r+0x66c>
 8007b86:	2200      	movs	r2, #0
 8007b88:	4ba9      	ldr	r3, [pc, #676]	; (8007e30 <_dtoa_r+0xa1c>)
 8007b8a:	f7f9 fd71 	bl	8001670 <__aeabi_dmul>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2300      	movs	r3, #0
 8007b92:	0004      	movs	r4, r0
 8007b94:	000d      	movs	r5, r1
 8007b96:	f7f8 fc59 	bl	800044c <__aeabi_dcmpeq>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d100      	bne.n	8007ba0 <_dtoa_r+0x78c>
 8007b9e:	e782      	b.n	8007aa6 <_dtoa_r+0x692>
 8007ba0:	e7b8      	b.n	8007b14 <_dtoa_r+0x700>
 8007ba2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007ba4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007ba6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	d012      	beq.n	8007bd2 <_dtoa_r+0x7be>
 8007bac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007bae:	2a01      	cmp	r2, #1
 8007bb0:	dc6e      	bgt.n	8007c90 <_dtoa_r+0x87c>
 8007bb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d065      	beq.n	8007c84 <_dtoa_r+0x870>
 8007bb8:	4a9e      	ldr	r2, [pc, #632]	; (8007e34 <_dtoa_r+0xa20>)
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	18d2      	adds	r2, r2, r3
 8007bc2:	920a      	str	r2, [sp, #40]	; 0x28
 8007bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bc6:	9804      	ldr	r0, [sp, #16]
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	930c      	str	r3, [sp, #48]	; 0x30
 8007bcc:	f000 fc78 	bl	80084c0 <__i2b>
 8007bd0:	0007      	movs	r7, r0
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	d00e      	beq.n	8007bf4 <_dtoa_r+0x7e0>
 8007bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	dd0b      	ble.n	8007bf4 <_dtoa_r+0x7e0>
 8007bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bde:	0023      	movs	r3, r4
 8007be0:	4294      	cmp	r4, r2
 8007be2:	dd00      	ble.n	8007be6 <_dtoa_r+0x7d2>
 8007be4:	0013      	movs	r3, r2
 8007be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be8:	1ae4      	subs	r4, r4, r3
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	920a      	str	r2, [sp, #40]	; 0x28
 8007bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d01e      	beq.n	8007c38 <_dtoa_r+0x824>
 8007bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d05c      	beq.n	8007cba <_dtoa_r+0x8a6>
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	dd10      	ble.n	8007c26 <_dtoa_r+0x812>
 8007c04:	0039      	movs	r1, r7
 8007c06:	002a      	movs	r2, r5
 8007c08:	9804      	ldr	r0, [sp, #16]
 8007c0a:	f000 fd21 	bl	8008650 <__pow5mult>
 8007c0e:	9a05      	ldr	r2, [sp, #20]
 8007c10:	0001      	movs	r1, r0
 8007c12:	0007      	movs	r7, r0
 8007c14:	9804      	ldr	r0, [sp, #16]
 8007c16:	f000 fc6b 	bl	80084f0 <__multiply>
 8007c1a:	0006      	movs	r6, r0
 8007c1c:	9905      	ldr	r1, [sp, #20]
 8007c1e:	9804      	ldr	r0, [sp, #16]
 8007c20:	f000 fb52 	bl	80082c8 <_Bfree>
 8007c24:	9605      	str	r6, [sp, #20]
 8007c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c28:	1b5a      	subs	r2, r3, r5
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	d004      	beq.n	8007c38 <_dtoa_r+0x824>
 8007c2e:	9905      	ldr	r1, [sp, #20]
 8007c30:	9804      	ldr	r0, [sp, #16]
 8007c32:	f000 fd0d 	bl	8008650 <__pow5mult>
 8007c36:	9005      	str	r0, [sp, #20]
 8007c38:	2101      	movs	r1, #1
 8007c3a:	9804      	ldr	r0, [sp, #16]
 8007c3c:	f000 fc40 	bl	80084c0 <__i2b>
 8007c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c42:	0006      	movs	r6, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dd3a      	ble.n	8007cbe <_dtoa_r+0x8aa>
 8007c48:	001a      	movs	r2, r3
 8007c4a:	0001      	movs	r1, r0
 8007c4c:	9804      	ldr	r0, [sp, #16]
 8007c4e:	f000 fcff 	bl	8008650 <__pow5mult>
 8007c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c54:	0006      	movs	r6, r0
 8007c56:	2500      	movs	r5, #0
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	dc38      	bgt.n	8007cce <_dtoa_r+0x8ba>
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	9b08      	ldr	r3, [sp, #32]
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	d130      	bne.n	8007cc6 <_dtoa_r+0x8b2>
 8007c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c66:	031b      	lsls	r3, r3, #12
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	d12c      	bne.n	8007cc6 <_dtoa_r+0x8b2>
 8007c6c:	4b72      	ldr	r3, [pc, #456]	; (8007e38 <_dtoa_r+0xa24>)
 8007c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c70:	4213      	tst	r3, r2
 8007c72:	d028      	beq.n	8007cc6 <_dtoa_r+0x8b2>
 8007c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c76:	3501      	adds	r5, #1
 8007c78:	3301      	adds	r3, #1
 8007c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c7e:	3301      	adds	r3, #1
 8007c80:	930c      	str	r3, [sp, #48]	; 0x30
 8007c82:	e020      	b.n	8007cc6 <_dtoa_r+0x8b2>
 8007c84:	2336      	movs	r3, #54	; 0x36
 8007c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007c8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	e795      	b.n	8007bbc <_dtoa_r+0x7a8>
 8007c90:	9b07      	ldr	r3, [sp, #28]
 8007c92:	1e5d      	subs	r5, r3, #1
 8007c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c96:	42ab      	cmp	r3, r5
 8007c98:	db07      	blt.n	8007caa <_dtoa_r+0x896>
 8007c9a:	1b5d      	subs	r5, r3, r5
 8007c9c:	9b07      	ldr	r3, [sp, #28]
 8007c9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	da8b      	bge.n	8007bbc <_dtoa_r+0x7a8>
 8007ca4:	1ae4      	subs	r4, r4, r3
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e788      	b.n	8007bbc <_dtoa_r+0x7a8>
 8007caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cae:	1aeb      	subs	r3, r5, r3
 8007cb0:	18d3      	adds	r3, r2, r3
 8007cb2:	950d      	str	r5, [sp, #52]	; 0x34
 8007cb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cb6:	2500      	movs	r5, #0
 8007cb8:	e7f0      	b.n	8007c9c <_dtoa_r+0x888>
 8007cba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cbc:	e7b7      	b.n	8007c2e <_dtoa_r+0x81a>
 8007cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cc0:	2500      	movs	r5, #0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	ddca      	ble.n	8007c5c <_dtoa_r+0x848>
 8007cc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cc8:	2001      	movs	r0, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <_dtoa_r+0x8cc>
 8007cce:	6933      	ldr	r3, [r6, #16]
 8007cd0:	3303      	adds	r3, #3
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	18f3      	adds	r3, r6, r3
 8007cd6:	6858      	ldr	r0, [r3, #4]
 8007cd8:	f000 fbaa 	bl	8008430 <__hi0bits>
 8007cdc:	2320      	movs	r3, #32
 8007cde:	1a18      	subs	r0, r3, r0
 8007ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ce2:	1818      	adds	r0, r3, r0
 8007ce4:	0002      	movs	r2, r0
 8007ce6:	231f      	movs	r3, #31
 8007ce8:	401a      	ands	r2, r3
 8007cea:	4218      	tst	r0, r3
 8007cec:	d047      	beq.n	8007d7e <_dtoa_r+0x96a>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	dd3f      	ble.n	8007d76 <_dtoa_r+0x962>
 8007cf6:	231c      	movs	r3, #28
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfc:	18e4      	adds	r4, r4, r3
 8007cfe:	18d2      	adds	r2, r2, r3
 8007d00:	920a      	str	r2, [sp, #40]	; 0x28
 8007d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d04:	18d3      	adds	r3, r2, r3
 8007d06:	930c      	str	r3, [sp, #48]	; 0x30
 8007d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dd05      	ble.n	8007d1a <_dtoa_r+0x906>
 8007d0e:	001a      	movs	r2, r3
 8007d10:	9905      	ldr	r1, [sp, #20]
 8007d12:	9804      	ldr	r0, [sp, #16]
 8007d14:	f000 fcf8 	bl	8008708 <__lshift>
 8007d18:	9005      	str	r0, [sp, #20]
 8007d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dd05      	ble.n	8007d2c <_dtoa_r+0x918>
 8007d20:	0031      	movs	r1, r6
 8007d22:	001a      	movs	r2, r3
 8007d24:	9804      	ldr	r0, [sp, #16]
 8007d26:	f000 fcef 	bl	8008708 <__lshift>
 8007d2a:	0006      	movs	r6, r0
 8007d2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d027      	beq.n	8007d82 <_dtoa_r+0x96e>
 8007d32:	0031      	movs	r1, r6
 8007d34:	9805      	ldr	r0, [sp, #20]
 8007d36:	f000 fd55 	bl	80087e4 <__mcmp>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	da21      	bge.n	8007d82 <_dtoa_r+0x96e>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	220a      	movs	r2, #10
 8007d42:	3b01      	subs	r3, #1
 8007d44:	9303      	str	r3, [sp, #12]
 8007d46:	9905      	ldr	r1, [sp, #20]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9804      	ldr	r0, [sp, #16]
 8007d4c:	f000 fae0 	bl	8008310 <__multadd>
 8007d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d52:	9005      	str	r0, [sp, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d100      	bne.n	8007d5a <_dtoa_r+0x946>
 8007d58:	e15d      	b.n	8008016 <_dtoa_r+0xc02>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	0039      	movs	r1, r7
 8007d5e:	220a      	movs	r2, #10
 8007d60:	9804      	ldr	r0, [sp, #16]
 8007d62:	f000 fad5 	bl	8008310 <__multadd>
 8007d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d68:	0007      	movs	r7, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dc49      	bgt.n	8007e02 <_dtoa_r+0x9ee>
 8007d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	dc0e      	bgt.n	8007d92 <_dtoa_r+0x97e>
 8007d74:	e045      	b.n	8007e02 <_dtoa_r+0x9ee>
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d0c6      	beq.n	8007d08 <_dtoa_r+0x8f4>
 8007d7a:	331c      	adds	r3, #28
 8007d7c:	e7bd      	b.n	8007cfa <_dtoa_r+0x8e6>
 8007d7e:	0013      	movs	r3, r2
 8007d80:	e7fb      	b.n	8007d7a <_dtoa_r+0x966>
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dc36      	bgt.n	8007df6 <_dtoa_r+0x9e2>
 8007d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	dd33      	ble.n	8007df6 <_dtoa_r+0x9e2>
 8007d8e:	9b07      	ldr	r3, [sp, #28]
 8007d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <_dtoa_r+0x99e>
 8007d98:	0031      	movs	r1, r6
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	9804      	ldr	r0, [sp, #16]
 8007d9e:	f000 fab7 	bl	8008310 <__multadd>
 8007da2:	0006      	movs	r6, r0
 8007da4:	0001      	movs	r1, r0
 8007da6:	9805      	ldr	r0, [sp, #20]
 8007da8:	f000 fd1c 	bl	80087e4 <__mcmp>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	dd00      	ble.n	8007db2 <_dtoa_r+0x99e>
 8007db0:	e59f      	b.n	80078f2 <_dtoa_r+0x4de>
 8007db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007db4:	43db      	mvns	r3, r3
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b06      	ldr	r3, [sp, #24]
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	0031      	movs	r1, r6
 8007dc0:	9804      	ldr	r0, [sp, #16]
 8007dc2:	f000 fa81 	bl	80082c8 <_Bfree>
 8007dc6:	2f00      	cmp	r7, #0
 8007dc8:	d100      	bne.n	8007dcc <_dtoa_r+0x9b8>
 8007dca:	e6a3      	b.n	8007b14 <_dtoa_r+0x700>
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	d005      	beq.n	8007ddc <_dtoa_r+0x9c8>
 8007dd0:	42bd      	cmp	r5, r7
 8007dd2:	d003      	beq.n	8007ddc <_dtoa_r+0x9c8>
 8007dd4:	0029      	movs	r1, r5
 8007dd6:	9804      	ldr	r0, [sp, #16]
 8007dd8:	f000 fa76 	bl	80082c8 <_Bfree>
 8007ddc:	0039      	movs	r1, r7
 8007dde:	9804      	ldr	r0, [sp, #16]
 8007de0:	f000 fa72 	bl	80082c8 <_Bfree>
 8007de4:	e696      	b.n	8007b14 <_dtoa_r+0x700>
 8007de6:	2600      	movs	r6, #0
 8007de8:	0037      	movs	r7, r6
 8007dea:	e7e2      	b.n	8007db2 <_dtoa_r+0x99e>
 8007dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	0037      	movs	r7, r6
 8007df4:	e57d      	b.n	80078f2 <_dtoa_r+0x4de>
 8007df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d100      	bne.n	8007dfe <_dtoa_r+0x9ea>
 8007dfc:	e0c3      	b.n	8007f86 <_dtoa_r+0xb72>
 8007dfe:	9b07      	ldr	r3, [sp, #28]
 8007e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	dd05      	ble.n	8007e12 <_dtoa_r+0x9fe>
 8007e06:	0039      	movs	r1, r7
 8007e08:	0022      	movs	r2, r4
 8007e0a:	9804      	ldr	r0, [sp, #16]
 8007e0c:	f000 fc7c 	bl	8008708 <__lshift>
 8007e10:	0007      	movs	r7, r0
 8007e12:	0038      	movs	r0, r7
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	d024      	beq.n	8007e62 <_dtoa_r+0xa4e>
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	9804      	ldr	r0, [sp, #16]
 8007e1c:	f000 fa10 	bl	8008240 <_Balloc>
 8007e20:	1e04      	subs	r4, r0, #0
 8007e22:	d111      	bne.n	8007e48 <_dtoa_r+0xa34>
 8007e24:	0022      	movs	r2, r4
 8007e26:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <_dtoa_r+0xa28>)
 8007e28:	4805      	ldr	r0, [pc, #20]	; (8007e40 <_dtoa_r+0xa2c>)
 8007e2a:	4906      	ldr	r1, [pc, #24]	; (8007e44 <_dtoa_r+0xa30>)
 8007e2c:	f7ff fb07 	bl	800743e <_dtoa_r+0x2a>
 8007e30:	40240000 	.word	0x40240000
 8007e34:	00000433 	.word	0x00000433
 8007e38:	7ff00000 	.word	0x7ff00000
 8007e3c:	0800acb1 	.word	0x0800acb1
 8007e40:	0800ac59 	.word	0x0800ac59
 8007e44:	000002ef 	.word	0x000002ef
 8007e48:	0039      	movs	r1, r7
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	310c      	adds	r1, #12
 8007e4e:	3202      	adds	r2, #2
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	300c      	adds	r0, #12
 8007e54:	f002 f872 	bl	8009f3c <memcpy>
 8007e58:	2201      	movs	r2, #1
 8007e5a:	0021      	movs	r1, r4
 8007e5c:	9804      	ldr	r0, [sp, #16]
 8007e5e:	f000 fc53 	bl	8008708 <__lshift>
 8007e62:	9b06      	ldr	r3, [sp, #24]
 8007e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e66:	9307      	str	r3, [sp, #28]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	003d      	movs	r5, r7
 8007e70:	0007      	movs	r7, r0
 8007e72:	930e      	str	r3, [sp, #56]	; 0x38
 8007e74:	9b08      	ldr	r3, [sp, #32]
 8007e76:	4013      	ands	r3, r2
 8007e78:	930d      	str	r3, [sp, #52]	; 0x34
 8007e7a:	0031      	movs	r1, r6
 8007e7c:	9805      	ldr	r0, [sp, #20]
 8007e7e:	f7ff fa39 	bl	80072f4 <quorem>
 8007e82:	0029      	movs	r1, r5
 8007e84:	0004      	movs	r4, r0
 8007e86:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e88:	9805      	ldr	r0, [sp, #20]
 8007e8a:	f000 fcab 	bl	80087e4 <__mcmp>
 8007e8e:	003a      	movs	r2, r7
 8007e90:	900c      	str	r0, [sp, #48]	; 0x30
 8007e92:	0031      	movs	r1, r6
 8007e94:	9804      	ldr	r0, [sp, #16]
 8007e96:	f000 fcc1 	bl	800881c <__mdiff>
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	68c3      	ldr	r3, [r0, #12]
 8007e9e:	3430      	adds	r4, #48	; 0x30
 8007ea0:	9008      	str	r0, [sp, #32]
 8007ea2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <_dtoa_r+0xa9e>
 8007ea8:	0001      	movs	r1, r0
 8007eaa:	9805      	ldr	r0, [sp, #20]
 8007eac:	f000 fc9a 	bl	80087e4 <__mcmp>
 8007eb0:	900a      	str	r0, [sp, #40]	; 0x28
 8007eb2:	9908      	ldr	r1, [sp, #32]
 8007eb4:	9804      	ldr	r0, [sp, #16]
 8007eb6:	f000 fa07 	bl	80082c8 <_Bfree>
 8007eba:	9b07      	ldr	r3, [sp, #28]
 8007ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	9308      	str	r3, [sp, #32]
 8007ec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	d109      	bne.n	8007ee0 <_dtoa_r+0xacc>
 8007ecc:	2c39      	cmp	r4, #57	; 0x39
 8007ece:	d022      	beq.n	8007f16 <_dtoa_r+0xb02>
 8007ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd01      	ble.n	8007eda <_dtoa_r+0xac6>
 8007ed6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ed8:	3431      	adds	r4, #49	; 0x31
 8007eda:	9b07      	ldr	r3, [sp, #28]
 8007edc:	701c      	strb	r4, [r3, #0]
 8007ede:	e76e      	b.n	8007dbe <_dtoa_r+0x9aa>
 8007ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	db04      	blt.n	8007ef0 <_dtoa_r+0xadc>
 8007ee6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d11e      	bne.n	8007f2e <_dtoa_r+0xb1a>
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	ddf1      	ble.n	8007eda <_dtoa_r+0xac6>
 8007ef6:	9905      	ldr	r1, [sp, #20]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	9804      	ldr	r0, [sp, #16]
 8007efc:	f000 fc04 	bl	8008708 <__lshift>
 8007f00:	0031      	movs	r1, r6
 8007f02:	9005      	str	r0, [sp, #20]
 8007f04:	f000 fc6e 	bl	80087e4 <__mcmp>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	dc02      	bgt.n	8007f12 <_dtoa_r+0xafe>
 8007f0c:	d1e5      	bne.n	8007eda <_dtoa_r+0xac6>
 8007f0e:	07e3      	lsls	r3, r4, #31
 8007f10:	d5e3      	bpl.n	8007eda <_dtoa_r+0xac6>
 8007f12:	2c39      	cmp	r4, #57	; 0x39
 8007f14:	d1df      	bne.n	8007ed6 <_dtoa_r+0xac2>
 8007f16:	2339      	movs	r3, #57	; 0x39
 8007f18:	9a07      	ldr	r2, [sp, #28]
 8007f1a:	7013      	strb	r3, [r2, #0]
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	9308      	str	r3, [sp, #32]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	2a39      	cmp	r2, #57	; 0x39
 8007f26:	d063      	beq.n	8007ff0 <_dtoa_r+0xbdc>
 8007f28:	3201      	adds	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	e747      	b.n	8007dbe <_dtoa_r+0x9aa>
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dd03      	ble.n	8007f3c <_dtoa_r+0xb28>
 8007f34:	2c39      	cmp	r4, #57	; 0x39
 8007f36:	d0ee      	beq.n	8007f16 <_dtoa_r+0xb02>
 8007f38:	3401      	adds	r4, #1
 8007f3a:	e7ce      	b.n	8007eda <_dtoa_r+0xac6>
 8007f3c:	9b07      	ldr	r3, [sp, #28]
 8007f3e:	9a07      	ldr	r2, [sp, #28]
 8007f40:	701c      	strb	r4, [r3, #0]
 8007f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d03e      	beq.n	8007fc6 <_dtoa_r+0xbb2>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	220a      	movs	r2, #10
 8007f4c:	9905      	ldr	r1, [sp, #20]
 8007f4e:	9804      	ldr	r0, [sp, #16]
 8007f50:	f000 f9de 	bl	8008310 <__multadd>
 8007f54:	2300      	movs	r3, #0
 8007f56:	9005      	str	r0, [sp, #20]
 8007f58:	220a      	movs	r2, #10
 8007f5a:	0029      	movs	r1, r5
 8007f5c:	9804      	ldr	r0, [sp, #16]
 8007f5e:	42bd      	cmp	r5, r7
 8007f60:	d106      	bne.n	8007f70 <_dtoa_r+0xb5c>
 8007f62:	f000 f9d5 	bl	8008310 <__multadd>
 8007f66:	0005      	movs	r5, r0
 8007f68:	0007      	movs	r7, r0
 8007f6a:	9b08      	ldr	r3, [sp, #32]
 8007f6c:	9307      	str	r3, [sp, #28]
 8007f6e:	e784      	b.n	8007e7a <_dtoa_r+0xa66>
 8007f70:	f000 f9ce 	bl	8008310 <__multadd>
 8007f74:	0039      	movs	r1, r7
 8007f76:	0005      	movs	r5, r0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	9804      	ldr	r0, [sp, #16]
 8007f7e:	f000 f9c7 	bl	8008310 <__multadd>
 8007f82:	0007      	movs	r7, r0
 8007f84:	e7f1      	b.n	8007f6a <_dtoa_r+0xb56>
 8007f86:	9b07      	ldr	r3, [sp, #28]
 8007f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	0031      	movs	r1, r6
 8007f8e:	9805      	ldr	r0, [sp, #20]
 8007f90:	f7ff f9b0 	bl	80072f4 <quorem>
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	3030      	adds	r0, #48	; 0x30
 8007f98:	5558      	strb	r0, [r3, r5]
 8007f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	0004      	movs	r4, r0
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	dd07      	ble.n	8007fb4 <_dtoa_r+0xba0>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	9905      	ldr	r1, [sp, #20]
 8007faa:	9804      	ldr	r0, [sp, #16]
 8007fac:	f000 f9b0 	bl	8008310 <__multadd>
 8007fb0:	9005      	str	r0, [sp, #20]
 8007fb2:	e7eb      	b.n	8007f8c <_dtoa_r+0xb78>
 8007fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	dd00      	ble.n	8007fbe <_dtoa_r+0xbaa>
 8007fbc:	0013      	movs	r3, r2
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	9a06      	ldr	r2, [sp, #24]
 8007fc2:	18d3      	adds	r3, r2, r3
 8007fc4:	9308      	str	r3, [sp, #32]
 8007fc6:	9905      	ldr	r1, [sp, #20]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	9804      	ldr	r0, [sp, #16]
 8007fcc:	f000 fb9c 	bl	8008708 <__lshift>
 8007fd0:	0031      	movs	r1, r6
 8007fd2:	9005      	str	r0, [sp, #20]
 8007fd4:	f000 fc06 	bl	80087e4 <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dc9f      	bgt.n	8007f1c <_dtoa_r+0xb08>
 8007fdc:	d101      	bne.n	8007fe2 <_dtoa_r+0xbce>
 8007fde:	07e4      	lsls	r4, r4, #31
 8007fe0:	d49c      	bmi.n	8007f1c <_dtoa_r+0xb08>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	9308      	str	r3, [sp, #32]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	781a      	ldrb	r2, [r3, #0]
 8007fea:	2a30      	cmp	r2, #48	; 0x30
 8007fec:	d0fa      	beq.n	8007fe4 <_dtoa_r+0xbd0>
 8007fee:	e6e6      	b.n	8007dbe <_dtoa_r+0x9aa>
 8007ff0:	9a06      	ldr	r2, [sp, #24]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d193      	bne.n	8007f1e <_dtoa_r+0xb0a>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	2331      	movs	r3, #49	; 0x31
 8007ffe:	7013      	strb	r3, [r2, #0]
 8008000:	e6dd      	b.n	8007dbe <_dtoa_r+0x9aa>
 8008002:	4b09      	ldr	r3, [pc, #36]	; (8008028 <_dtoa_r+0xc14>)
 8008004:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008006:	9306      	str	r3, [sp, #24]
 8008008:	4b08      	ldr	r3, [pc, #32]	; (800802c <_dtoa_r+0xc18>)
 800800a:	2a00      	cmp	r2, #0
 800800c:	d001      	beq.n	8008012 <_dtoa_r+0xbfe>
 800800e:	f7ff fa49 	bl	80074a4 <_dtoa_r+0x90>
 8008012:	f7ff fa49 	bl	80074a8 <_dtoa_r+0x94>
 8008016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008018:	2b00      	cmp	r3, #0
 800801a:	dcb6      	bgt.n	8007f8a <_dtoa_r+0xb76>
 800801c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800801e:	2b02      	cmp	r3, #2
 8008020:	dd00      	ble.n	8008024 <_dtoa_r+0xc10>
 8008022:	e6b6      	b.n	8007d92 <_dtoa_r+0x97e>
 8008024:	e7b1      	b.n	8007f8a <_dtoa_r+0xb76>
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	0800ac35 	.word	0x0800ac35
 800802c:	0800ac3d 	.word	0x0800ac3d

08008030 <_free_r>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	0005      	movs	r5, r0
 8008034:	2900      	cmp	r1, #0
 8008036:	d010      	beq.n	800805a <_free_r+0x2a>
 8008038:	1f0c      	subs	r4, r1, #4
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da00      	bge.n	8008042 <_free_r+0x12>
 8008040:	18e4      	adds	r4, r4, r3
 8008042:	0028      	movs	r0, r5
 8008044:	f000 f8ec 	bl	8008220 <__malloc_lock>
 8008048:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <_free_r+0x90>)
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <_free_r+0x2c>
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6014      	str	r4, [r2, #0]
 8008054:	0028      	movs	r0, r5
 8008056:	f000 f8eb 	bl	8008230 <__malloc_unlock>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	42a3      	cmp	r3, r4
 800805e:	d908      	bls.n	8008072 <_free_r+0x42>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	1821      	adds	r1, r4, r0
 8008064:	428b      	cmp	r3, r1
 8008066:	d1f3      	bne.n	8008050 <_free_r+0x20>
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	1809      	adds	r1, r1, r0
 800806e:	6021      	str	r1, [r4, #0]
 8008070:	e7ee      	b.n	8008050 <_free_r+0x20>
 8008072:	001a      	movs	r2, r3
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <_free_r+0x4e>
 800807a:	42a3      	cmp	r3, r4
 800807c:	d9f9      	bls.n	8008072 <_free_r+0x42>
 800807e:	6811      	ldr	r1, [r2, #0]
 8008080:	1850      	adds	r0, r2, r1
 8008082:	42a0      	cmp	r0, r4
 8008084:	d10b      	bne.n	800809e <_free_r+0x6e>
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	1809      	adds	r1, r1, r0
 800808a:	1850      	adds	r0, r2, r1
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	4283      	cmp	r3, r0
 8008090:	d1e0      	bne.n	8008054 <_free_r+0x24>
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	1841      	adds	r1, r0, r1
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	6053      	str	r3, [r2, #4]
 800809c:	e7da      	b.n	8008054 <_free_r+0x24>
 800809e:	42a0      	cmp	r0, r4
 80080a0:	d902      	bls.n	80080a8 <_free_r+0x78>
 80080a2:	230c      	movs	r3, #12
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	e7d5      	b.n	8008054 <_free_r+0x24>
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	1821      	adds	r1, r4, r0
 80080ac:	428b      	cmp	r3, r1
 80080ae:	d103      	bne.n	80080b8 <_free_r+0x88>
 80080b0:	6819      	ldr	r1, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	1809      	adds	r1, r1, r0
 80080b6:	6021      	str	r1, [r4, #0]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	6054      	str	r4, [r2, #4]
 80080bc:	e7ca      	b.n	8008054 <_free_r+0x24>
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	200004f4 	.word	0x200004f4

080080c4 <malloc>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <malloc+0x10>)
 80080c8:	0001      	movs	r1, r0
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	f000 f826 	bl	800811c <_malloc_r>
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	20000064 	.word	0x20000064

080080d8 <sbrk_aligned>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4e0f      	ldr	r6, [pc, #60]	; (8008118 <sbrk_aligned+0x40>)
 80080dc:	000d      	movs	r5, r1
 80080de:	6831      	ldr	r1, [r6, #0]
 80080e0:	0004      	movs	r4, r0
 80080e2:	2900      	cmp	r1, #0
 80080e4:	d102      	bne.n	80080ec <sbrk_aligned+0x14>
 80080e6:	f001 ff17 	bl	8009f18 <_sbrk_r>
 80080ea:	6030      	str	r0, [r6, #0]
 80080ec:	0029      	movs	r1, r5
 80080ee:	0020      	movs	r0, r4
 80080f0:	f001 ff12 	bl	8009f18 <_sbrk_r>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d00a      	beq.n	800810e <sbrk_aligned+0x36>
 80080f8:	2303      	movs	r3, #3
 80080fa:	1cc5      	adds	r5, r0, #3
 80080fc:	439d      	bics	r5, r3
 80080fe:	42a8      	cmp	r0, r5
 8008100:	d007      	beq.n	8008112 <sbrk_aligned+0x3a>
 8008102:	1a29      	subs	r1, r5, r0
 8008104:	0020      	movs	r0, r4
 8008106:	f001 ff07 	bl	8009f18 <_sbrk_r>
 800810a:	3001      	adds	r0, #1
 800810c:	d101      	bne.n	8008112 <sbrk_aligned+0x3a>
 800810e:	2501      	movs	r5, #1
 8008110:	426d      	negs	r5, r5
 8008112:	0028      	movs	r0, r5
 8008114:	bd70      	pop	{r4, r5, r6, pc}
 8008116:	46c0      	nop			; (mov r8, r8)
 8008118:	200004f8 	.word	0x200004f8

0800811c <_malloc_r>:
 800811c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800811e:	2203      	movs	r2, #3
 8008120:	1ccb      	adds	r3, r1, #3
 8008122:	4393      	bics	r3, r2
 8008124:	3308      	adds	r3, #8
 8008126:	0006      	movs	r6, r0
 8008128:	001f      	movs	r7, r3
 800812a:	2b0c      	cmp	r3, #12
 800812c:	d238      	bcs.n	80081a0 <_malloc_r+0x84>
 800812e:	270c      	movs	r7, #12
 8008130:	42b9      	cmp	r1, r7
 8008132:	d837      	bhi.n	80081a4 <_malloc_r+0x88>
 8008134:	0030      	movs	r0, r6
 8008136:	f000 f873 	bl	8008220 <__malloc_lock>
 800813a:	4b38      	ldr	r3, [pc, #224]	; (800821c <_malloc_r+0x100>)
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	001c      	movs	r4, r3
 8008142:	2c00      	cmp	r4, #0
 8008144:	d133      	bne.n	80081ae <_malloc_r+0x92>
 8008146:	0039      	movs	r1, r7
 8008148:	0030      	movs	r0, r6
 800814a:	f7ff ffc5 	bl	80080d8 <sbrk_aligned>
 800814e:	0004      	movs	r4, r0
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d15e      	bne.n	8008212 <_malloc_r+0xf6>
 8008154:	9b00      	ldr	r3, [sp, #0]
 8008156:	681c      	ldr	r4, [r3, #0]
 8008158:	0025      	movs	r5, r4
 800815a:	2d00      	cmp	r5, #0
 800815c:	d14e      	bne.n	80081fc <_malloc_r+0xe0>
 800815e:	2c00      	cmp	r4, #0
 8008160:	d051      	beq.n	8008206 <_malloc_r+0xea>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	0029      	movs	r1, r5
 8008166:	18e3      	adds	r3, r4, r3
 8008168:	0030      	movs	r0, r6
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	f001 fed4 	bl	8009f18 <_sbrk_r>
 8008170:	9b01      	ldr	r3, [sp, #4]
 8008172:	4283      	cmp	r3, r0
 8008174:	d147      	bne.n	8008206 <_malloc_r+0xea>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	0030      	movs	r0, r6
 800817a:	1aff      	subs	r7, r7, r3
 800817c:	0039      	movs	r1, r7
 800817e:	f7ff ffab 	bl	80080d8 <sbrk_aligned>
 8008182:	3001      	adds	r0, #1
 8008184:	d03f      	beq.n	8008206 <_malloc_r+0xea>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	19db      	adds	r3, r3, r7
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d040      	beq.n	8008216 <_malloc_r+0xfa>
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	42a2      	cmp	r2, r4
 8008198:	d133      	bne.n	8008202 <_malloc_r+0xe6>
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	e014      	b.n	80081ca <_malloc_r+0xae>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dac5      	bge.n	8008130 <_malloc_r+0x14>
 80081a4:	230c      	movs	r3, #12
 80081a6:	2500      	movs	r5, #0
 80081a8:	6033      	str	r3, [r6, #0]
 80081aa:	0028      	movs	r0, r5
 80081ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081ae:	6821      	ldr	r1, [r4, #0]
 80081b0:	1bc9      	subs	r1, r1, r7
 80081b2:	d420      	bmi.n	80081f6 <_malloc_r+0xda>
 80081b4:	290b      	cmp	r1, #11
 80081b6:	d918      	bls.n	80081ea <_malloc_r+0xce>
 80081b8:	19e2      	adds	r2, r4, r7
 80081ba:	6027      	str	r7, [r4, #0]
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d112      	bne.n	80081e6 <_malloc_r+0xca>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	6011      	str	r1, [r2, #0]
 80081c8:	6053      	str	r3, [r2, #4]
 80081ca:	0030      	movs	r0, r6
 80081cc:	0025      	movs	r5, r4
 80081ce:	f000 f82f 	bl	8008230 <__malloc_unlock>
 80081d2:	2207      	movs	r2, #7
 80081d4:	350b      	adds	r5, #11
 80081d6:	1d23      	adds	r3, r4, #4
 80081d8:	4395      	bics	r5, r2
 80081da:	1aea      	subs	r2, r5, r3
 80081dc:	429d      	cmp	r5, r3
 80081de:	d0e4      	beq.n	80081aa <_malloc_r+0x8e>
 80081e0:	1b5b      	subs	r3, r3, r5
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7e1      	b.n	80081aa <_malloc_r+0x8e>
 80081e6:	605a      	str	r2, [r3, #4]
 80081e8:	e7ec      	b.n	80081c4 <_malloc_r+0xa8>
 80081ea:	6862      	ldr	r2, [r4, #4]
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	d1d5      	bne.n	800819c <_malloc_r+0x80>
 80081f0:	9b00      	ldr	r3, [sp, #0]
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e7e9      	b.n	80081ca <_malloc_r+0xae>
 80081f6:	0023      	movs	r3, r4
 80081f8:	6864      	ldr	r4, [r4, #4]
 80081fa:	e7a2      	b.n	8008142 <_malloc_r+0x26>
 80081fc:	002c      	movs	r4, r5
 80081fe:	686d      	ldr	r5, [r5, #4]
 8008200:	e7ab      	b.n	800815a <_malloc_r+0x3e>
 8008202:	0013      	movs	r3, r2
 8008204:	e7c4      	b.n	8008190 <_malloc_r+0x74>
 8008206:	230c      	movs	r3, #12
 8008208:	0030      	movs	r0, r6
 800820a:	6033      	str	r3, [r6, #0]
 800820c:	f000 f810 	bl	8008230 <__malloc_unlock>
 8008210:	e7cb      	b.n	80081aa <_malloc_r+0x8e>
 8008212:	6027      	str	r7, [r4, #0]
 8008214:	e7d9      	b.n	80081ca <_malloc_r+0xae>
 8008216:	605b      	str	r3, [r3, #4]
 8008218:	deff      	udf	#255	; 0xff
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	200004f4 	.word	0x200004f4

08008220 <__malloc_lock>:
 8008220:	b510      	push	{r4, lr}
 8008222:	4802      	ldr	r0, [pc, #8]	; (800822c <__malloc_lock+0xc>)
 8008224:	f7ff f855 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8008228:	bd10      	pop	{r4, pc}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	200004f0 	.word	0x200004f0

08008230 <__malloc_unlock>:
 8008230:	b510      	push	{r4, lr}
 8008232:	4802      	ldr	r0, [pc, #8]	; (800823c <__malloc_unlock+0xc>)
 8008234:	f7ff f84e 	bl	80072d4 <__retarget_lock_release_recursive>
 8008238:	bd10      	pop	{r4, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	200004f0 	.word	0x200004f0

08008240 <_Balloc>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	69c5      	ldr	r5, [r0, #28]
 8008244:	0006      	movs	r6, r0
 8008246:	000c      	movs	r4, r1
 8008248:	2d00      	cmp	r5, #0
 800824a:	d10e      	bne.n	800826a <_Balloc+0x2a>
 800824c:	2010      	movs	r0, #16
 800824e:	f7ff ff39 	bl	80080c4 <malloc>
 8008252:	1e02      	subs	r2, r0, #0
 8008254:	61f0      	str	r0, [r6, #28]
 8008256:	d104      	bne.n	8008262 <_Balloc+0x22>
 8008258:	216b      	movs	r1, #107	; 0x6b
 800825a:	4b19      	ldr	r3, [pc, #100]	; (80082c0 <_Balloc+0x80>)
 800825c:	4819      	ldr	r0, [pc, #100]	; (80082c4 <_Balloc+0x84>)
 800825e:	f001 fe7d 	bl	8009f5c <__assert_func>
 8008262:	6045      	str	r5, [r0, #4]
 8008264:	6085      	str	r5, [r0, #8]
 8008266:	6005      	str	r5, [r0, #0]
 8008268:	60c5      	str	r5, [r0, #12]
 800826a:	69f5      	ldr	r5, [r6, #28]
 800826c:	68eb      	ldr	r3, [r5, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d013      	beq.n	800829a <_Balloc+0x5a>
 8008272:	69f3      	ldr	r3, [r6, #28]
 8008274:	00a2      	lsls	r2, r4, #2
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	189b      	adds	r3, r3, r2
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	2800      	cmp	r0, #0
 800827e:	d118      	bne.n	80082b2 <_Balloc+0x72>
 8008280:	2101      	movs	r1, #1
 8008282:	000d      	movs	r5, r1
 8008284:	40a5      	lsls	r5, r4
 8008286:	1d6a      	adds	r2, r5, #5
 8008288:	0030      	movs	r0, r6
 800828a:	0092      	lsls	r2, r2, #2
 800828c:	f001 fe84 	bl	8009f98 <_calloc_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	d00c      	beq.n	80082ae <_Balloc+0x6e>
 8008294:	6044      	str	r4, [r0, #4]
 8008296:	6085      	str	r5, [r0, #8]
 8008298:	e00d      	b.n	80082b6 <_Balloc+0x76>
 800829a:	2221      	movs	r2, #33	; 0x21
 800829c:	2104      	movs	r1, #4
 800829e:	0030      	movs	r0, r6
 80082a0:	f001 fe7a 	bl	8009f98 <_calloc_r>
 80082a4:	69f3      	ldr	r3, [r6, #28]
 80082a6:	60e8      	str	r0, [r5, #12]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e1      	bne.n	8008272 <_Balloc+0x32>
 80082ae:	2000      	movs	r0, #0
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	6802      	ldr	r2, [r0, #0]
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	2300      	movs	r3, #0
 80082b8:	6103      	str	r3, [r0, #16]
 80082ba:	60c3      	str	r3, [r0, #12]
 80082bc:	e7f8      	b.n	80082b0 <_Balloc+0x70>
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	0800ac42 	.word	0x0800ac42
 80082c4:	0800acc2 	.word	0x0800acc2

080082c8 <_Bfree>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	69c6      	ldr	r6, [r0, #28]
 80082cc:	0005      	movs	r5, r0
 80082ce:	000c      	movs	r4, r1
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	d10e      	bne.n	80082f2 <_Bfree+0x2a>
 80082d4:	2010      	movs	r0, #16
 80082d6:	f7ff fef5 	bl	80080c4 <malloc>
 80082da:	1e02      	subs	r2, r0, #0
 80082dc:	61e8      	str	r0, [r5, #28]
 80082de:	d104      	bne.n	80082ea <_Bfree+0x22>
 80082e0:	218f      	movs	r1, #143	; 0x8f
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <_Bfree+0x40>)
 80082e4:	4809      	ldr	r0, [pc, #36]	; (800830c <_Bfree+0x44>)
 80082e6:	f001 fe39 	bl	8009f5c <__assert_func>
 80082ea:	6046      	str	r6, [r0, #4]
 80082ec:	6086      	str	r6, [r0, #8]
 80082ee:	6006      	str	r6, [r0, #0]
 80082f0:	60c6      	str	r6, [r0, #12]
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d007      	beq.n	8008306 <_Bfree+0x3e>
 80082f6:	69eb      	ldr	r3, [r5, #28]
 80082f8:	6862      	ldr	r2, [r4, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	0092      	lsls	r2, r2, #2
 80082fe:	189b      	adds	r3, r3, r2
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	6022      	str	r2, [r4, #0]
 8008304:	601c      	str	r4, [r3, #0]
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	0800ac42 	.word	0x0800ac42
 800830c:	0800acc2 	.word	0x0800acc2

08008310 <__multadd>:
 8008310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008312:	000e      	movs	r6, r1
 8008314:	9001      	str	r0, [sp, #4]
 8008316:	000c      	movs	r4, r1
 8008318:	001d      	movs	r5, r3
 800831a:	2000      	movs	r0, #0
 800831c:	690f      	ldr	r7, [r1, #16]
 800831e:	3614      	adds	r6, #20
 8008320:	6833      	ldr	r3, [r6, #0]
 8008322:	3001      	adds	r0, #1
 8008324:	b299      	uxth	r1, r3
 8008326:	4351      	muls	r1, r2
 8008328:	0c1b      	lsrs	r3, r3, #16
 800832a:	4353      	muls	r3, r2
 800832c:	1949      	adds	r1, r1, r5
 800832e:	0c0d      	lsrs	r5, r1, #16
 8008330:	195b      	adds	r3, r3, r5
 8008332:	0c1d      	lsrs	r5, r3, #16
 8008334:	b289      	uxth	r1, r1
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	185b      	adds	r3, r3, r1
 800833a:	c608      	stmia	r6!, {r3}
 800833c:	4287      	cmp	r7, r0
 800833e:	dcef      	bgt.n	8008320 <__multadd+0x10>
 8008340:	2d00      	cmp	r5, #0
 8008342:	d022      	beq.n	800838a <__multadd+0x7a>
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	42bb      	cmp	r3, r7
 8008348:	dc19      	bgt.n	800837e <__multadd+0x6e>
 800834a:	6861      	ldr	r1, [r4, #4]
 800834c:	9801      	ldr	r0, [sp, #4]
 800834e:	3101      	adds	r1, #1
 8008350:	f7ff ff76 	bl	8008240 <_Balloc>
 8008354:	1e06      	subs	r6, r0, #0
 8008356:	d105      	bne.n	8008364 <__multadd+0x54>
 8008358:	0032      	movs	r2, r6
 800835a:	21ba      	movs	r1, #186	; 0xba
 800835c:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <__multadd+0x80>)
 800835e:	480d      	ldr	r0, [pc, #52]	; (8008394 <__multadd+0x84>)
 8008360:	f001 fdfc 	bl	8009f5c <__assert_func>
 8008364:	0021      	movs	r1, r4
 8008366:	6922      	ldr	r2, [r4, #16]
 8008368:	310c      	adds	r1, #12
 800836a:	3202      	adds	r2, #2
 800836c:	0092      	lsls	r2, r2, #2
 800836e:	300c      	adds	r0, #12
 8008370:	f001 fde4 	bl	8009f3c <memcpy>
 8008374:	0021      	movs	r1, r4
 8008376:	9801      	ldr	r0, [sp, #4]
 8008378:	f7ff ffa6 	bl	80082c8 <_Bfree>
 800837c:	0034      	movs	r4, r6
 800837e:	1d3b      	adds	r3, r7, #4
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	18e3      	adds	r3, r4, r3
 8008384:	605d      	str	r5, [r3, #4]
 8008386:	1c7b      	adds	r3, r7, #1
 8008388:	6123      	str	r3, [r4, #16]
 800838a:	0020      	movs	r0, r4
 800838c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	0800acb1 	.word	0x0800acb1
 8008394:	0800acc2 	.word	0x0800acc2

08008398 <__s2b>:
 8008398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800839a:	0006      	movs	r6, r0
 800839c:	0018      	movs	r0, r3
 800839e:	000c      	movs	r4, r1
 80083a0:	3008      	adds	r0, #8
 80083a2:	2109      	movs	r1, #9
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	0015      	movs	r5, r2
 80083a8:	f7f7 ff54 	bl	8000254 <__divsi3>
 80083ac:	2301      	movs	r3, #1
 80083ae:	2100      	movs	r1, #0
 80083b0:	4283      	cmp	r3, r0
 80083b2:	db0a      	blt.n	80083ca <__s2b+0x32>
 80083b4:	0030      	movs	r0, r6
 80083b6:	f7ff ff43 	bl	8008240 <_Balloc>
 80083ba:	1e01      	subs	r1, r0, #0
 80083bc:	d108      	bne.n	80083d0 <__s2b+0x38>
 80083be:	000a      	movs	r2, r1
 80083c0:	4b19      	ldr	r3, [pc, #100]	; (8008428 <__s2b+0x90>)
 80083c2:	481a      	ldr	r0, [pc, #104]	; (800842c <__s2b+0x94>)
 80083c4:	31d3      	adds	r1, #211	; 0xd3
 80083c6:	f001 fdc9 	bl	8009f5c <__assert_func>
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	3101      	adds	r1, #1
 80083ce:	e7ef      	b.n	80083b0 <__s2b+0x18>
 80083d0:	9b08      	ldr	r3, [sp, #32]
 80083d2:	6143      	str	r3, [r0, #20]
 80083d4:	2301      	movs	r3, #1
 80083d6:	6103      	str	r3, [r0, #16]
 80083d8:	2d09      	cmp	r5, #9
 80083da:	dd18      	ble.n	800840e <__s2b+0x76>
 80083dc:	0023      	movs	r3, r4
 80083de:	3309      	adds	r3, #9
 80083e0:	001f      	movs	r7, r3
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	1964      	adds	r4, r4, r5
 80083e6:	783b      	ldrb	r3, [r7, #0]
 80083e8:	220a      	movs	r2, #10
 80083ea:	0030      	movs	r0, r6
 80083ec:	3b30      	subs	r3, #48	; 0x30
 80083ee:	f7ff ff8f 	bl	8008310 <__multadd>
 80083f2:	3701      	adds	r7, #1
 80083f4:	0001      	movs	r1, r0
 80083f6:	42a7      	cmp	r7, r4
 80083f8:	d1f5      	bne.n	80083e6 <__s2b+0x4e>
 80083fa:	002c      	movs	r4, r5
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	3c08      	subs	r4, #8
 8008400:	191c      	adds	r4, r3, r4
 8008402:	002f      	movs	r7, r5
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	429f      	cmp	r7, r3
 8008408:	db04      	blt.n	8008414 <__s2b+0x7c>
 800840a:	0008      	movs	r0, r1
 800840c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800840e:	2509      	movs	r5, #9
 8008410:	340a      	adds	r4, #10
 8008412:	e7f6      	b.n	8008402 <__s2b+0x6a>
 8008414:	1b63      	subs	r3, r4, r5
 8008416:	5ddb      	ldrb	r3, [r3, r7]
 8008418:	220a      	movs	r2, #10
 800841a:	0030      	movs	r0, r6
 800841c:	3b30      	subs	r3, #48	; 0x30
 800841e:	f7ff ff77 	bl	8008310 <__multadd>
 8008422:	3701      	adds	r7, #1
 8008424:	0001      	movs	r1, r0
 8008426:	e7ed      	b.n	8008404 <__s2b+0x6c>
 8008428:	0800acb1 	.word	0x0800acb1
 800842c:	0800acc2 	.word	0x0800acc2

08008430 <__hi0bits>:
 8008430:	0003      	movs	r3, r0
 8008432:	0c02      	lsrs	r2, r0, #16
 8008434:	2000      	movs	r0, #0
 8008436:	4282      	cmp	r2, r0
 8008438:	d101      	bne.n	800843e <__hi0bits+0xe>
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	3010      	adds	r0, #16
 800843e:	0e1a      	lsrs	r2, r3, #24
 8008440:	d101      	bne.n	8008446 <__hi0bits+0x16>
 8008442:	3008      	adds	r0, #8
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	0f1a      	lsrs	r2, r3, #28
 8008448:	d101      	bne.n	800844e <__hi0bits+0x1e>
 800844a:	3004      	adds	r0, #4
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	0f9a      	lsrs	r2, r3, #30
 8008450:	d101      	bne.n	8008456 <__hi0bits+0x26>
 8008452:	3002      	adds	r0, #2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	db03      	blt.n	8008462 <__hi0bits+0x32>
 800845a:	3001      	adds	r0, #1
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	d400      	bmi.n	8008462 <__hi0bits+0x32>
 8008460:	2020      	movs	r0, #32
 8008462:	4770      	bx	lr

08008464 <__lo0bits>:
 8008464:	6803      	ldr	r3, [r0, #0]
 8008466:	0001      	movs	r1, r0
 8008468:	2207      	movs	r2, #7
 800846a:	0018      	movs	r0, r3
 800846c:	4010      	ands	r0, r2
 800846e:	4213      	tst	r3, r2
 8008470:	d00d      	beq.n	800848e <__lo0bits+0x2a>
 8008472:	3a06      	subs	r2, #6
 8008474:	2000      	movs	r0, #0
 8008476:	4213      	tst	r3, r2
 8008478:	d105      	bne.n	8008486 <__lo0bits+0x22>
 800847a:	3002      	adds	r0, #2
 800847c:	4203      	tst	r3, r0
 800847e:	d003      	beq.n	8008488 <__lo0bits+0x24>
 8008480:	40d3      	lsrs	r3, r2
 8008482:	0010      	movs	r0, r2
 8008484:	600b      	str	r3, [r1, #0]
 8008486:	4770      	bx	lr
 8008488:	089b      	lsrs	r3, r3, #2
 800848a:	600b      	str	r3, [r1, #0]
 800848c:	e7fb      	b.n	8008486 <__lo0bits+0x22>
 800848e:	b29a      	uxth	r2, r3
 8008490:	2a00      	cmp	r2, #0
 8008492:	d101      	bne.n	8008498 <__lo0bits+0x34>
 8008494:	2010      	movs	r0, #16
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	b2da      	uxtb	r2, r3
 800849a:	2a00      	cmp	r2, #0
 800849c:	d101      	bne.n	80084a2 <__lo0bits+0x3e>
 800849e:	3008      	adds	r0, #8
 80084a0:	0a1b      	lsrs	r3, r3, #8
 80084a2:	071a      	lsls	r2, r3, #28
 80084a4:	d101      	bne.n	80084aa <__lo0bits+0x46>
 80084a6:	3004      	adds	r0, #4
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	079a      	lsls	r2, r3, #30
 80084ac:	d101      	bne.n	80084b2 <__lo0bits+0x4e>
 80084ae:	3002      	adds	r0, #2
 80084b0:	089b      	lsrs	r3, r3, #2
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d4e9      	bmi.n	800848a <__lo0bits+0x26>
 80084b6:	3001      	adds	r0, #1
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	d1e6      	bne.n	800848a <__lo0bits+0x26>
 80084bc:	2020      	movs	r0, #32
 80084be:	e7e2      	b.n	8008486 <__lo0bits+0x22>

080084c0 <__i2b>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	000c      	movs	r4, r1
 80084c4:	2101      	movs	r1, #1
 80084c6:	f7ff febb 	bl	8008240 <_Balloc>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d107      	bne.n	80084de <__i2b+0x1e>
 80084ce:	2146      	movs	r1, #70	; 0x46
 80084d0:	4c05      	ldr	r4, [pc, #20]	; (80084e8 <__i2b+0x28>)
 80084d2:	0002      	movs	r2, r0
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <__i2b+0x2c>)
 80084d6:	0020      	movs	r0, r4
 80084d8:	31ff      	adds	r1, #255	; 0xff
 80084da:	f001 fd3f 	bl	8009f5c <__assert_func>
 80084de:	2301      	movs	r3, #1
 80084e0:	6144      	str	r4, [r0, #20]
 80084e2:	6103      	str	r3, [r0, #16]
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	0800acc2 	.word	0x0800acc2
 80084ec:	0800acb1 	.word	0x0800acb1

080084f0 <__multiply>:
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	0015      	movs	r5, r2
 80084f4:	690a      	ldr	r2, [r1, #16]
 80084f6:	692b      	ldr	r3, [r5, #16]
 80084f8:	000c      	movs	r4, r1
 80084fa:	b08b      	sub	sp, #44	; 0x2c
 80084fc:	429a      	cmp	r2, r3
 80084fe:	da01      	bge.n	8008504 <__multiply+0x14>
 8008500:	002c      	movs	r4, r5
 8008502:	000d      	movs	r5, r1
 8008504:	6927      	ldr	r7, [r4, #16]
 8008506:	692e      	ldr	r6, [r5, #16]
 8008508:	6861      	ldr	r1, [r4, #4]
 800850a:	19bb      	adds	r3, r7, r6
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	19ba      	adds	r2, r7, r6
 8008512:	4293      	cmp	r3, r2
 8008514:	da00      	bge.n	8008518 <__multiply+0x28>
 8008516:	3101      	adds	r1, #1
 8008518:	f7ff fe92 	bl	8008240 <_Balloc>
 800851c:	9002      	str	r0, [sp, #8]
 800851e:	2800      	cmp	r0, #0
 8008520:	d106      	bne.n	8008530 <__multiply+0x40>
 8008522:	21b1      	movs	r1, #177	; 0xb1
 8008524:	4b48      	ldr	r3, [pc, #288]	; (8008648 <__multiply+0x158>)
 8008526:	4849      	ldr	r0, [pc, #292]	; (800864c <__multiply+0x15c>)
 8008528:	9a02      	ldr	r2, [sp, #8]
 800852a:	0049      	lsls	r1, r1, #1
 800852c:	f001 fd16 	bl	8009f5c <__assert_func>
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	2200      	movs	r2, #0
 8008534:	3314      	adds	r3, #20
 8008536:	469c      	mov	ip, r3
 8008538:	19bb      	adds	r3, r7, r6
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4463      	add	r3, ip
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	4663      	mov	r3, ip
 8008542:	9904      	ldr	r1, [sp, #16]
 8008544:	428b      	cmp	r3, r1
 8008546:	d32a      	bcc.n	800859e <__multiply+0xae>
 8008548:	0023      	movs	r3, r4
 800854a:	00bf      	lsls	r7, r7, #2
 800854c:	3314      	adds	r3, #20
 800854e:	3514      	adds	r5, #20
 8008550:	9308      	str	r3, [sp, #32]
 8008552:	00b6      	lsls	r6, r6, #2
 8008554:	19db      	adds	r3, r3, r7
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	19ab      	adds	r3, r5, r6
 800855a:	9309      	str	r3, [sp, #36]	; 0x24
 800855c:	2304      	movs	r3, #4
 800855e:	9306      	str	r3, [sp, #24]
 8008560:	0023      	movs	r3, r4
 8008562:	9a05      	ldr	r2, [sp, #20]
 8008564:	3315      	adds	r3, #21
 8008566:	9501      	str	r5, [sp, #4]
 8008568:	429a      	cmp	r2, r3
 800856a:	d305      	bcc.n	8008578 <__multiply+0x88>
 800856c:	1b13      	subs	r3, r2, r4
 800856e:	3b15      	subs	r3, #21
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	3301      	adds	r3, #1
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	9306      	str	r3, [sp, #24]
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	4293      	cmp	r3, r2
 800857e:	d310      	bcc.n	80085a2 <__multiply+0xb2>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd05      	ble.n	8008592 <__multiply+0xa2>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	3b04      	subs	r3, #4
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d056      	beq.n	8008640 <__multiply+0x150>
 8008592:	9b02      	ldr	r3, [sp, #8]
 8008594:	9a03      	ldr	r2, [sp, #12]
 8008596:	0018      	movs	r0, r3
 8008598:	611a      	str	r2, [r3, #16]
 800859a:	b00b      	add	sp, #44	; 0x2c
 800859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800859e:	c304      	stmia	r3!, {r2}
 80085a0:	e7cf      	b.n	8008542 <__multiply+0x52>
 80085a2:	9b01      	ldr	r3, [sp, #4]
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	b280      	uxth	r0, r0
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d01e      	beq.n	80085ea <__multiply+0xfa>
 80085ac:	4667      	mov	r7, ip
 80085ae:	2500      	movs	r5, #0
 80085b0:	9e08      	ldr	r6, [sp, #32]
 80085b2:	ce02      	ldmia	r6!, {r1}
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	b28b      	uxth	r3, r1
 80085ba:	4343      	muls	r3, r0
 80085bc:	001a      	movs	r2, r3
 80085be:	466b      	mov	r3, sp
 80085c0:	8b9b      	ldrh	r3, [r3, #28]
 80085c2:	18d3      	adds	r3, r2, r3
 80085c4:	195b      	adds	r3, r3, r5
 80085c6:	0c0d      	lsrs	r5, r1, #16
 80085c8:	4345      	muls	r5, r0
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	0c11      	lsrs	r1, r2, #16
 80085ce:	1869      	adds	r1, r5, r1
 80085d0:	0c1a      	lsrs	r2, r3, #16
 80085d2:	188a      	adds	r2, r1, r2
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	0c15      	lsrs	r5, r2, #16
 80085d8:	0412      	lsls	r2, r2, #16
 80085da:	431a      	orrs	r2, r3
 80085dc:	9b05      	ldr	r3, [sp, #20]
 80085de:	c704      	stmia	r7!, {r2}
 80085e0:	42b3      	cmp	r3, r6
 80085e2:	d8e6      	bhi.n	80085b2 <__multiply+0xc2>
 80085e4:	4663      	mov	r3, ip
 80085e6:	9a06      	ldr	r2, [sp, #24]
 80085e8:	509d      	str	r5, [r3, r2]
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	0c00      	lsrs	r0, r0, #16
 80085f0:	d020      	beq.n	8008634 <__multiply+0x144>
 80085f2:	4663      	mov	r3, ip
 80085f4:	0025      	movs	r5, r4
 80085f6:	4661      	mov	r1, ip
 80085f8:	2700      	movs	r7, #0
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3514      	adds	r5, #20
 80085fe:	682a      	ldr	r2, [r5, #0]
 8008600:	680e      	ldr	r6, [r1, #0]
 8008602:	b292      	uxth	r2, r2
 8008604:	4342      	muls	r2, r0
 8008606:	0c36      	lsrs	r6, r6, #16
 8008608:	1992      	adds	r2, r2, r6
 800860a:	19d2      	adds	r2, r2, r7
 800860c:	0416      	lsls	r6, r2, #16
 800860e:	b29b      	uxth	r3, r3
 8008610:	431e      	orrs	r6, r3
 8008612:	600e      	str	r6, [r1, #0]
 8008614:	cd40      	ldmia	r5!, {r6}
 8008616:	684b      	ldr	r3, [r1, #4]
 8008618:	0c36      	lsrs	r6, r6, #16
 800861a:	4346      	muls	r6, r0
 800861c:	b29b      	uxth	r3, r3
 800861e:	0c12      	lsrs	r2, r2, #16
 8008620:	18f3      	adds	r3, r6, r3
 8008622:	189b      	adds	r3, r3, r2
 8008624:	9a05      	ldr	r2, [sp, #20]
 8008626:	0c1f      	lsrs	r7, r3, #16
 8008628:	3104      	adds	r1, #4
 800862a:	42aa      	cmp	r2, r5
 800862c:	d8e7      	bhi.n	80085fe <__multiply+0x10e>
 800862e:	4662      	mov	r2, ip
 8008630:	9906      	ldr	r1, [sp, #24]
 8008632:	5053      	str	r3, [r2, r1]
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	2304      	movs	r3, #4
 800863c:	449c      	add	ip, r3
 800863e:	e79b      	b.n	8008578 <__multiply+0x88>
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	3b01      	subs	r3, #1
 8008644:	9303      	str	r3, [sp, #12]
 8008646:	e79b      	b.n	8008580 <__multiply+0x90>
 8008648:	0800acb1 	.word	0x0800acb1
 800864c:	0800acc2 	.word	0x0800acc2

08008650 <__pow5mult>:
 8008650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008652:	2303      	movs	r3, #3
 8008654:	0015      	movs	r5, r2
 8008656:	0007      	movs	r7, r0
 8008658:	000e      	movs	r6, r1
 800865a:	401a      	ands	r2, r3
 800865c:	421d      	tst	r5, r3
 800865e:	d008      	beq.n	8008672 <__pow5mult+0x22>
 8008660:	4925      	ldr	r1, [pc, #148]	; (80086f8 <__pow5mult+0xa8>)
 8008662:	3a01      	subs	r2, #1
 8008664:	0092      	lsls	r2, r2, #2
 8008666:	5852      	ldr	r2, [r2, r1]
 8008668:	2300      	movs	r3, #0
 800866a:	0031      	movs	r1, r6
 800866c:	f7ff fe50 	bl	8008310 <__multadd>
 8008670:	0006      	movs	r6, r0
 8008672:	10ad      	asrs	r5, r5, #2
 8008674:	d03d      	beq.n	80086f2 <__pow5mult+0xa2>
 8008676:	69fc      	ldr	r4, [r7, #28]
 8008678:	2c00      	cmp	r4, #0
 800867a:	d10f      	bne.n	800869c <__pow5mult+0x4c>
 800867c:	2010      	movs	r0, #16
 800867e:	f7ff fd21 	bl	80080c4 <malloc>
 8008682:	1e02      	subs	r2, r0, #0
 8008684:	61f8      	str	r0, [r7, #28]
 8008686:	d105      	bne.n	8008694 <__pow5mult+0x44>
 8008688:	21b4      	movs	r1, #180	; 0xb4
 800868a:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <__pow5mult+0xac>)
 800868c:	481c      	ldr	r0, [pc, #112]	; (8008700 <__pow5mult+0xb0>)
 800868e:	31ff      	adds	r1, #255	; 0xff
 8008690:	f001 fc64 	bl	8009f5c <__assert_func>
 8008694:	6044      	str	r4, [r0, #4]
 8008696:	6084      	str	r4, [r0, #8]
 8008698:	6004      	str	r4, [r0, #0]
 800869a:	60c4      	str	r4, [r0, #12]
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	689c      	ldr	r4, [r3, #8]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d108      	bne.n	80086b8 <__pow5mult+0x68>
 80086a6:	0038      	movs	r0, r7
 80086a8:	4916      	ldr	r1, [pc, #88]	; (8008704 <__pow5mult+0xb4>)
 80086aa:	f7ff ff09 	bl	80084c0 <__i2b>
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	0004      	movs	r4, r0
 80086b2:	6098      	str	r0, [r3, #8]
 80086b4:	2300      	movs	r3, #0
 80086b6:	6003      	str	r3, [r0, #0]
 80086b8:	2301      	movs	r3, #1
 80086ba:	421d      	tst	r5, r3
 80086bc:	d00a      	beq.n	80086d4 <__pow5mult+0x84>
 80086be:	0031      	movs	r1, r6
 80086c0:	0022      	movs	r2, r4
 80086c2:	0038      	movs	r0, r7
 80086c4:	f7ff ff14 	bl	80084f0 <__multiply>
 80086c8:	0031      	movs	r1, r6
 80086ca:	9001      	str	r0, [sp, #4]
 80086cc:	0038      	movs	r0, r7
 80086ce:	f7ff fdfb 	bl	80082c8 <_Bfree>
 80086d2:	9e01      	ldr	r6, [sp, #4]
 80086d4:	106d      	asrs	r5, r5, #1
 80086d6:	d00c      	beq.n	80086f2 <__pow5mult+0xa2>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	2800      	cmp	r0, #0
 80086dc:	d107      	bne.n	80086ee <__pow5mult+0x9e>
 80086de:	0022      	movs	r2, r4
 80086e0:	0021      	movs	r1, r4
 80086e2:	0038      	movs	r0, r7
 80086e4:	f7ff ff04 	bl	80084f0 <__multiply>
 80086e8:	2300      	movs	r3, #0
 80086ea:	6020      	str	r0, [r4, #0]
 80086ec:	6003      	str	r3, [r0, #0]
 80086ee:	0004      	movs	r4, r0
 80086f0:	e7e2      	b.n	80086b8 <__pow5mult+0x68>
 80086f2:	0030      	movs	r0, r6
 80086f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	0800ae10 	.word	0x0800ae10
 80086fc:	0800ac42 	.word	0x0800ac42
 8008700:	0800acc2 	.word	0x0800acc2
 8008704:	00000271 	.word	0x00000271

08008708 <__lshift>:
 8008708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870a:	000c      	movs	r4, r1
 800870c:	0017      	movs	r7, r2
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	1155      	asrs	r5, r2, #5
 8008712:	b087      	sub	sp, #28
 8008714:	18eb      	adds	r3, r5, r3
 8008716:	9302      	str	r3, [sp, #8]
 8008718:	3301      	adds	r3, #1
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	6849      	ldr	r1, [r1, #4]
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	9004      	str	r0, [sp, #16]
 8008722:	9a01      	ldr	r2, [sp, #4]
 8008724:	4293      	cmp	r3, r2
 8008726:	db10      	blt.n	800874a <__lshift+0x42>
 8008728:	9804      	ldr	r0, [sp, #16]
 800872a:	f7ff fd89 	bl	8008240 <_Balloc>
 800872e:	2300      	movs	r3, #0
 8008730:	0002      	movs	r2, r0
 8008732:	0006      	movs	r6, r0
 8008734:	0019      	movs	r1, r3
 8008736:	3214      	adds	r2, #20
 8008738:	4298      	cmp	r0, r3
 800873a:	d10c      	bne.n	8008756 <__lshift+0x4e>
 800873c:	31df      	adds	r1, #223	; 0xdf
 800873e:	0032      	movs	r2, r6
 8008740:	4b26      	ldr	r3, [pc, #152]	; (80087dc <__lshift+0xd4>)
 8008742:	4827      	ldr	r0, [pc, #156]	; (80087e0 <__lshift+0xd8>)
 8008744:	31ff      	adds	r1, #255	; 0xff
 8008746:	f001 fc09 	bl	8009f5c <__assert_func>
 800874a:	3101      	adds	r1, #1
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	e7e8      	b.n	8008722 <__lshift+0x1a>
 8008750:	0098      	lsls	r0, r3, #2
 8008752:	5011      	str	r1, [r2, r0]
 8008754:	3301      	adds	r3, #1
 8008756:	42ab      	cmp	r3, r5
 8008758:	dbfa      	blt.n	8008750 <__lshift+0x48>
 800875a:	43eb      	mvns	r3, r5
 800875c:	17db      	asrs	r3, r3, #31
 800875e:	401d      	ands	r5, r3
 8008760:	211f      	movs	r1, #31
 8008762:	0023      	movs	r3, r4
 8008764:	0038      	movs	r0, r7
 8008766:	00ad      	lsls	r5, r5, #2
 8008768:	1955      	adds	r5, r2, r5
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	3314      	adds	r3, #20
 800876e:	0092      	lsls	r2, r2, #2
 8008770:	4008      	ands	r0, r1
 8008772:	4684      	mov	ip, r0
 8008774:	189a      	adds	r2, r3, r2
 8008776:	420f      	tst	r7, r1
 8008778:	d02a      	beq.n	80087d0 <__lshift+0xc8>
 800877a:	3101      	adds	r1, #1
 800877c:	1a09      	subs	r1, r1, r0
 800877e:	9105      	str	r1, [sp, #20]
 8008780:	2100      	movs	r1, #0
 8008782:	9503      	str	r5, [sp, #12]
 8008784:	4667      	mov	r7, ip
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	40b8      	lsls	r0, r7
 800878a:	4308      	orrs	r0, r1
 800878c:	9903      	ldr	r1, [sp, #12]
 800878e:	c101      	stmia	r1!, {r0}
 8008790:	9103      	str	r1, [sp, #12]
 8008792:	9805      	ldr	r0, [sp, #20]
 8008794:	cb02      	ldmia	r3!, {r1}
 8008796:	40c1      	lsrs	r1, r0
 8008798:	429a      	cmp	r2, r3
 800879a:	d8f3      	bhi.n	8008784 <__lshift+0x7c>
 800879c:	0020      	movs	r0, r4
 800879e:	3015      	adds	r0, #21
 80087a0:	2304      	movs	r3, #4
 80087a2:	4282      	cmp	r2, r0
 80087a4:	d304      	bcc.n	80087b0 <__lshift+0xa8>
 80087a6:	1b13      	subs	r3, r2, r4
 80087a8:	3b15      	subs	r3, #21
 80087aa:	089b      	lsrs	r3, r3, #2
 80087ac:	3301      	adds	r3, #1
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	50e9      	str	r1, [r5, r3]
 80087b2:	2900      	cmp	r1, #0
 80087b4:	d002      	beq.n	80087bc <__lshift+0xb4>
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	3302      	adds	r3, #2
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	9804      	ldr	r0, [sp, #16]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	0021      	movs	r1, r4
 80087c4:	6133      	str	r3, [r6, #16]
 80087c6:	f7ff fd7f 	bl	80082c8 <_Bfree>
 80087ca:	0030      	movs	r0, r6
 80087cc:	b007      	add	sp, #28
 80087ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d0:	cb02      	ldmia	r3!, {r1}
 80087d2:	c502      	stmia	r5!, {r1}
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d8fb      	bhi.n	80087d0 <__lshift+0xc8>
 80087d8:	e7f0      	b.n	80087bc <__lshift+0xb4>
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	0800acb1 	.word	0x0800acb1
 80087e0:	0800acc2 	.word	0x0800acc2

080087e4 <__mcmp>:
 80087e4:	b530      	push	{r4, r5, lr}
 80087e6:	690b      	ldr	r3, [r1, #16]
 80087e8:	6904      	ldr	r4, [r0, #16]
 80087ea:	0002      	movs	r2, r0
 80087ec:	1ae0      	subs	r0, r4, r3
 80087ee:	429c      	cmp	r4, r3
 80087f0:	d10e      	bne.n	8008810 <__mcmp+0x2c>
 80087f2:	3214      	adds	r2, #20
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	3114      	adds	r1, #20
 80087f8:	0014      	movs	r4, r2
 80087fa:	18c9      	adds	r1, r1, r3
 80087fc:	18d2      	adds	r2, r2, r3
 80087fe:	3a04      	subs	r2, #4
 8008800:	3904      	subs	r1, #4
 8008802:	6815      	ldr	r5, [r2, #0]
 8008804:	680b      	ldr	r3, [r1, #0]
 8008806:	429d      	cmp	r5, r3
 8008808:	d003      	beq.n	8008812 <__mcmp+0x2e>
 800880a:	2001      	movs	r0, #1
 800880c:	429d      	cmp	r5, r3
 800880e:	d303      	bcc.n	8008818 <__mcmp+0x34>
 8008810:	bd30      	pop	{r4, r5, pc}
 8008812:	4294      	cmp	r4, r2
 8008814:	d3f3      	bcc.n	80087fe <__mcmp+0x1a>
 8008816:	e7fb      	b.n	8008810 <__mcmp+0x2c>
 8008818:	4240      	negs	r0, r0
 800881a:	e7f9      	b.n	8008810 <__mcmp+0x2c>

0800881c <__mdiff>:
 800881c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881e:	000e      	movs	r6, r1
 8008820:	0007      	movs	r7, r0
 8008822:	0011      	movs	r1, r2
 8008824:	0030      	movs	r0, r6
 8008826:	b087      	sub	sp, #28
 8008828:	0014      	movs	r4, r2
 800882a:	f7ff ffdb 	bl	80087e4 <__mcmp>
 800882e:	1e05      	subs	r5, r0, #0
 8008830:	d110      	bne.n	8008854 <__mdiff+0x38>
 8008832:	0001      	movs	r1, r0
 8008834:	0038      	movs	r0, r7
 8008836:	f7ff fd03 	bl	8008240 <_Balloc>
 800883a:	1e02      	subs	r2, r0, #0
 800883c:	d104      	bne.n	8008848 <__mdiff+0x2c>
 800883e:	4b3f      	ldr	r3, [pc, #252]	; (800893c <__mdiff+0x120>)
 8008840:	483f      	ldr	r0, [pc, #252]	; (8008940 <__mdiff+0x124>)
 8008842:	4940      	ldr	r1, [pc, #256]	; (8008944 <__mdiff+0x128>)
 8008844:	f001 fb8a 	bl	8009f5c <__assert_func>
 8008848:	2301      	movs	r3, #1
 800884a:	6145      	str	r5, [r0, #20]
 800884c:	6103      	str	r3, [r0, #16]
 800884e:	0010      	movs	r0, r2
 8008850:	b007      	add	sp, #28
 8008852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008854:	2301      	movs	r3, #1
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	2800      	cmp	r0, #0
 800885a:	db04      	blt.n	8008866 <__mdiff+0x4a>
 800885c:	0023      	movs	r3, r4
 800885e:	0034      	movs	r4, r6
 8008860:	001e      	movs	r6, r3
 8008862:	2300      	movs	r3, #0
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	0038      	movs	r0, r7
 8008868:	6861      	ldr	r1, [r4, #4]
 800886a:	f7ff fce9 	bl	8008240 <_Balloc>
 800886e:	1e02      	subs	r2, r0, #0
 8008870:	d103      	bne.n	800887a <__mdiff+0x5e>
 8008872:	4b32      	ldr	r3, [pc, #200]	; (800893c <__mdiff+0x120>)
 8008874:	4832      	ldr	r0, [pc, #200]	; (8008940 <__mdiff+0x124>)
 8008876:	4934      	ldr	r1, [pc, #208]	; (8008948 <__mdiff+0x12c>)
 8008878:	e7e4      	b.n	8008844 <__mdiff+0x28>
 800887a:	9b01      	ldr	r3, [sp, #4]
 800887c:	2700      	movs	r7, #0
 800887e:	60c3      	str	r3, [r0, #12]
 8008880:	6920      	ldr	r0, [r4, #16]
 8008882:	3414      	adds	r4, #20
 8008884:	0083      	lsls	r3, r0, #2
 8008886:	18e3      	adds	r3, r4, r3
 8008888:	0021      	movs	r1, r4
 800888a:	9401      	str	r4, [sp, #4]
 800888c:	0034      	movs	r4, r6
 800888e:	9302      	str	r3, [sp, #8]
 8008890:	6933      	ldr	r3, [r6, #16]
 8008892:	3414      	adds	r4, #20
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	18e3      	adds	r3, r4, r3
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	0013      	movs	r3, r2
 800889c:	3314      	adds	r3, #20
 800889e:	469c      	mov	ip, r3
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	9104      	str	r1, [sp, #16]
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	cc02      	ldmia	r4!, {r1}
 80088a8:	cb20      	ldmia	r3!, {r5}
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	b2ab      	uxth	r3, r5
 80088ae:	19df      	adds	r7, r3, r7
 80088b0:	b28b      	uxth	r3, r1
 80088b2:	1afb      	subs	r3, r7, r3
 80088b4:	0c09      	lsrs	r1, r1, #16
 80088b6:	0c2d      	lsrs	r5, r5, #16
 80088b8:	1a6d      	subs	r5, r5, r1
 80088ba:	1419      	asrs	r1, r3, #16
 80088bc:	1869      	adds	r1, r5, r1
 80088be:	b29b      	uxth	r3, r3
 80088c0:	140f      	asrs	r7, r1, #16
 80088c2:	0409      	lsls	r1, r1, #16
 80088c4:	4319      	orrs	r1, r3
 80088c6:	4663      	mov	r3, ip
 80088c8:	c302      	stmia	r3!, {r1}
 80088ca:	469c      	mov	ip, r3
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	d8e8      	bhi.n	80088a4 <__mdiff+0x88>
 80088d2:	0031      	movs	r1, r6
 80088d4:	9c03      	ldr	r4, [sp, #12]
 80088d6:	3115      	adds	r1, #21
 80088d8:	2304      	movs	r3, #4
 80088da:	428c      	cmp	r4, r1
 80088dc:	d304      	bcc.n	80088e8 <__mdiff+0xcc>
 80088de:	1ba3      	subs	r3, r4, r6
 80088e0:	3b15      	subs	r3, #21
 80088e2:	089b      	lsrs	r3, r3, #2
 80088e4:	3301      	adds	r3, #1
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	9901      	ldr	r1, [sp, #4]
 80088ea:	18cd      	adds	r5, r1, r3
 80088ec:	9905      	ldr	r1, [sp, #20]
 80088ee:	002e      	movs	r6, r5
 80088f0:	18cb      	adds	r3, r1, r3
 80088f2:	469c      	mov	ip, r3
 80088f4:	9902      	ldr	r1, [sp, #8]
 80088f6:	428e      	cmp	r6, r1
 80088f8:	d310      	bcc.n	800891c <__mdiff+0x100>
 80088fa:	9e02      	ldr	r6, [sp, #8]
 80088fc:	1ee9      	subs	r1, r5, #3
 80088fe:	2400      	movs	r4, #0
 8008900:	428e      	cmp	r6, r1
 8008902:	d304      	bcc.n	800890e <__mdiff+0xf2>
 8008904:	0031      	movs	r1, r6
 8008906:	3103      	adds	r1, #3
 8008908:	1b49      	subs	r1, r1, r5
 800890a:	0889      	lsrs	r1, r1, #2
 800890c:	008c      	lsls	r4, r1, #2
 800890e:	191b      	adds	r3, r3, r4
 8008910:	3b04      	subs	r3, #4
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	2900      	cmp	r1, #0
 8008916:	d00f      	beq.n	8008938 <__mdiff+0x11c>
 8008918:	6110      	str	r0, [r2, #16]
 800891a:	e798      	b.n	800884e <__mdiff+0x32>
 800891c:	ce02      	ldmia	r6!, {r1}
 800891e:	b28c      	uxth	r4, r1
 8008920:	19e4      	adds	r4, r4, r7
 8008922:	0c0f      	lsrs	r7, r1, #16
 8008924:	1421      	asrs	r1, r4, #16
 8008926:	1879      	adds	r1, r7, r1
 8008928:	b2a4      	uxth	r4, r4
 800892a:	140f      	asrs	r7, r1, #16
 800892c:	0409      	lsls	r1, r1, #16
 800892e:	4321      	orrs	r1, r4
 8008930:	4664      	mov	r4, ip
 8008932:	c402      	stmia	r4!, {r1}
 8008934:	46a4      	mov	ip, r4
 8008936:	e7dd      	b.n	80088f4 <__mdiff+0xd8>
 8008938:	3801      	subs	r0, #1
 800893a:	e7e9      	b.n	8008910 <__mdiff+0xf4>
 800893c:	0800acb1 	.word	0x0800acb1
 8008940:	0800acc2 	.word	0x0800acc2
 8008944:	00000237 	.word	0x00000237
 8008948:	00000245 	.word	0x00000245

0800894c <__ulp>:
 800894c:	2000      	movs	r0, #0
 800894e:	4b0b      	ldr	r3, [pc, #44]	; (800897c <__ulp+0x30>)
 8008950:	4019      	ands	r1, r3
 8008952:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <__ulp+0x34>)
 8008954:	18c9      	adds	r1, r1, r3
 8008956:	4281      	cmp	r1, r0
 8008958:	dc06      	bgt.n	8008968 <__ulp+0x1c>
 800895a:	4249      	negs	r1, r1
 800895c:	150b      	asrs	r3, r1, #20
 800895e:	2b13      	cmp	r3, #19
 8008960:	dc03      	bgt.n	800896a <__ulp+0x1e>
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	0309      	lsls	r1, r1, #12
 8008966:	4119      	asrs	r1, r3
 8008968:	4770      	bx	lr
 800896a:	3b14      	subs	r3, #20
 800896c:	2001      	movs	r0, #1
 800896e:	2b1e      	cmp	r3, #30
 8008970:	dc02      	bgt.n	8008978 <__ulp+0x2c>
 8008972:	2080      	movs	r0, #128	; 0x80
 8008974:	0600      	lsls	r0, r0, #24
 8008976:	40d8      	lsrs	r0, r3
 8008978:	2100      	movs	r1, #0
 800897a:	e7f5      	b.n	8008968 <__ulp+0x1c>
 800897c:	7ff00000 	.word	0x7ff00000
 8008980:	fcc00000 	.word	0xfcc00000

08008984 <__b2d>:
 8008984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008986:	0006      	movs	r6, r0
 8008988:	6903      	ldr	r3, [r0, #16]
 800898a:	3614      	adds	r6, #20
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	18f3      	adds	r3, r6, r3
 8008990:	1f1d      	subs	r5, r3, #4
 8008992:	682c      	ldr	r4, [r5, #0]
 8008994:	000f      	movs	r7, r1
 8008996:	0020      	movs	r0, r4
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	f7ff fd49 	bl	8008430 <__hi0bits>
 800899e:	2220      	movs	r2, #32
 80089a0:	1a12      	subs	r2, r2, r0
 80089a2:	603a      	str	r2, [r7, #0]
 80089a4:	0003      	movs	r3, r0
 80089a6:	4a1c      	ldr	r2, [pc, #112]	; (8008a18 <__b2d+0x94>)
 80089a8:	280a      	cmp	r0, #10
 80089aa:	dc15      	bgt.n	80089d8 <__b2d+0x54>
 80089ac:	210b      	movs	r1, #11
 80089ae:	0027      	movs	r7, r4
 80089b0:	1a09      	subs	r1, r1, r0
 80089b2:	40cf      	lsrs	r7, r1
 80089b4:	433a      	orrs	r2, r7
 80089b6:	468c      	mov	ip, r1
 80089b8:	0011      	movs	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	42ae      	cmp	r6, r5
 80089be:	d202      	bcs.n	80089c6 <__b2d+0x42>
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	3a08      	subs	r2, #8
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	3315      	adds	r3, #21
 80089c8:	409c      	lsls	r4, r3
 80089ca:	4663      	mov	r3, ip
 80089cc:	0027      	movs	r7, r4
 80089ce:	40da      	lsrs	r2, r3
 80089d0:	4317      	orrs	r7, r2
 80089d2:	0038      	movs	r0, r7
 80089d4:	b003      	add	sp, #12
 80089d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d8:	2700      	movs	r7, #0
 80089da:	42ae      	cmp	r6, r5
 80089dc:	d202      	bcs.n	80089e4 <__b2d+0x60>
 80089de:	9d01      	ldr	r5, [sp, #4]
 80089e0:	3d08      	subs	r5, #8
 80089e2:	682f      	ldr	r7, [r5, #0]
 80089e4:	210b      	movs	r1, #11
 80089e6:	4249      	negs	r1, r1
 80089e8:	468c      	mov	ip, r1
 80089ea:	449c      	add	ip, r3
 80089ec:	2b0b      	cmp	r3, #11
 80089ee:	d010      	beq.n	8008a12 <__b2d+0x8e>
 80089f0:	4661      	mov	r1, ip
 80089f2:	2320      	movs	r3, #32
 80089f4:	408c      	lsls	r4, r1
 80089f6:	1a5b      	subs	r3, r3, r1
 80089f8:	0039      	movs	r1, r7
 80089fa:	40d9      	lsrs	r1, r3
 80089fc:	430c      	orrs	r4, r1
 80089fe:	4322      	orrs	r2, r4
 8008a00:	0011      	movs	r1, r2
 8008a02:	2200      	movs	r2, #0
 8008a04:	42b5      	cmp	r5, r6
 8008a06:	d901      	bls.n	8008a0c <__b2d+0x88>
 8008a08:	3d04      	subs	r5, #4
 8008a0a:	682a      	ldr	r2, [r5, #0]
 8008a0c:	4664      	mov	r4, ip
 8008a0e:	40a7      	lsls	r7, r4
 8008a10:	e7dd      	b.n	80089ce <__b2d+0x4a>
 8008a12:	4322      	orrs	r2, r4
 8008a14:	0011      	movs	r1, r2
 8008a16:	e7dc      	b.n	80089d2 <__b2d+0x4e>
 8008a18:	3ff00000 	.word	0x3ff00000

08008a1c <__d2b>:
 8008a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1e:	2101      	movs	r1, #1
 8008a20:	0014      	movs	r4, r2
 8008a22:	001d      	movs	r5, r3
 8008a24:	9f08      	ldr	r7, [sp, #32]
 8008a26:	f7ff fc0b 	bl	8008240 <_Balloc>
 8008a2a:	1e06      	subs	r6, r0, #0
 8008a2c:	d105      	bne.n	8008a3a <__d2b+0x1e>
 8008a2e:	0032      	movs	r2, r6
 8008a30:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <__d2b+0xa8>)
 8008a32:	4825      	ldr	r0, [pc, #148]	; (8008ac8 <__d2b+0xac>)
 8008a34:	4925      	ldr	r1, [pc, #148]	; (8008acc <__d2b+0xb0>)
 8008a36:	f001 fa91 	bl	8009f5c <__assert_func>
 8008a3a:	032b      	lsls	r3, r5, #12
 8008a3c:	006d      	lsls	r5, r5, #1
 8008a3e:	0b1b      	lsrs	r3, r3, #12
 8008a40:	0d6d      	lsrs	r5, r5, #21
 8008a42:	d125      	bne.n	8008a90 <__d2b+0x74>
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	2c00      	cmp	r4, #0
 8008a48:	d028      	beq.n	8008a9c <__d2b+0x80>
 8008a4a:	4668      	mov	r0, sp
 8008a4c:	9400      	str	r4, [sp, #0]
 8008a4e:	f7ff fd09 	bl	8008464 <__lo0bits>
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	9900      	ldr	r1, [sp, #0]
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d01e      	beq.n	8008a98 <__d2b+0x7c>
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	001c      	movs	r4, r3
 8008a5e:	1a12      	subs	r2, r2, r0
 8008a60:	4094      	lsls	r4, r2
 8008a62:	0022      	movs	r2, r4
 8008a64:	40c3      	lsrs	r3, r0
 8008a66:	430a      	orrs	r2, r1
 8008a68:	6172      	str	r2, [r6, #20]
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	9c01      	ldr	r4, [sp, #4]
 8008a6e:	61b4      	str	r4, [r6, #24]
 8008a70:	1e63      	subs	r3, r4, #1
 8008a72:	419c      	sbcs	r4, r3
 8008a74:	3401      	adds	r4, #1
 8008a76:	6134      	str	r4, [r6, #16]
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	d017      	beq.n	8008aac <__d2b+0x90>
 8008a7c:	2435      	movs	r4, #53	; 0x35
 8008a7e:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <__d2b+0xb4>)
 8008a80:	18ed      	adds	r5, r5, r3
 8008a82:	182d      	adds	r5, r5, r0
 8008a84:	603d      	str	r5, [r7, #0]
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	1a24      	subs	r4, r4, r0
 8008a8a:	601c      	str	r4, [r3, #0]
 8008a8c:	0030      	movs	r0, r6
 8008a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a90:	2280      	movs	r2, #128	; 0x80
 8008a92:	0352      	lsls	r2, r2, #13
 8008a94:	4313      	orrs	r3, r2
 8008a96:	e7d5      	b.n	8008a44 <__d2b+0x28>
 8008a98:	6171      	str	r1, [r6, #20]
 8008a9a:	e7e7      	b.n	8008a6c <__d2b+0x50>
 8008a9c:	a801      	add	r0, sp, #4
 8008a9e:	f7ff fce1 	bl	8008464 <__lo0bits>
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	2401      	movs	r4, #1
 8008aa6:	6173      	str	r3, [r6, #20]
 8008aa8:	3020      	adds	r0, #32
 8008aaa:	e7e4      	b.n	8008a76 <__d2b+0x5a>
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <__d2b+0xb8>)
 8008aae:	18c0      	adds	r0, r0, r3
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <__d2b+0xbc>)
 8008ab2:	6038      	str	r0, [r7, #0]
 8008ab4:	18e3      	adds	r3, r4, r3
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	18f3      	adds	r3, r6, r3
 8008aba:	6958      	ldr	r0, [r3, #20]
 8008abc:	f7ff fcb8 	bl	8008430 <__hi0bits>
 8008ac0:	0164      	lsls	r4, r4, #5
 8008ac2:	e7e0      	b.n	8008a86 <__d2b+0x6a>
 8008ac4:	0800acb1 	.word	0x0800acb1
 8008ac8:	0800acc2 	.word	0x0800acc2
 8008acc:	0000030f 	.word	0x0000030f
 8008ad0:	fffffbcd 	.word	0xfffffbcd
 8008ad4:	fffffbce 	.word	0xfffffbce
 8008ad8:	3fffffff 	.word	0x3fffffff

08008adc <__ratio>:
 8008adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	000f      	movs	r7, r1
 8008ae2:	a904      	add	r1, sp, #16
 8008ae4:	0006      	movs	r6, r0
 8008ae6:	f7ff ff4d 	bl	8008984 <__b2d>
 8008aea:	9000      	str	r0, [sp, #0]
 8008aec:	9101      	str	r1, [sp, #4]
 8008aee:	9c00      	ldr	r4, [sp, #0]
 8008af0:	9d01      	ldr	r5, [sp, #4]
 8008af2:	0038      	movs	r0, r7
 8008af4:	a905      	add	r1, sp, #20
 8008af6:	f7ff ff45 	bl	8008984 <__b2d>
 8008afa:	9002      	str	r0, [sp, #8]
 8008afc:	9103      	str	r1, [sp, #12]
 8008afe:	9a02      	ldr	r2, [sp, #8]
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	6930      	ldr	r0, [r6, #16]
 8008b04:	6939      	ldr	r1, [r7, #16]
 8008b06:	9e04      	ldr	r6, [sp, #16]
 8008b08:	1a40      	subs	r0, r0, r1
 8008b0a:	9905      	ldr	r1, [sp, #20]
 8008b0c:	0140      	lsls	r0, r0, #5
 8008b0e:	1a71      	subs	r1, r6, r1
 8008b10:	1841      	adds	r1, r0, r1
 8008b12:	0508      	lsls	r0, r1, #20
 8008b14:	2900      	cmp	r1, #0
 8008b16:	dd07      	ble.n	8008b28 <__ratio+0x4c>
 8008b18:	9901      	ldr	r1, [sp, #4]
 8008b1a:	1845      	adds	r5, r0, r1
 8008b1c:	0020      	movs	r0, r4
 8008b1e:	0029      	movs	r1, r5
 8008b20:	f7f8 f9ac 	bl	8000e7c <__aeabi_ddiv>
 8008b24:	b007      	add	sp, #28
 8008b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b28:	9903      	ldr	r1, [sp, #12]
 8008b2a:	1a0b      	subs	r3, r1, r0
 8008b2c:	e7f6      	b.n	8008b1c <__ratio+0x40>

08008b2e <__copybits>:
 8008b2e:	b570      	push	{r4, r5, r6, lr}
 8008b30:	0014      	movs	r4, r2
 8008b32:	0005      	movs	r5, r0
 8008b34:	3901      	subs	r1, #1
 8008b36:	6913      	ldr	r3, [r2, #16]
 8008b38:	1149      	asrs	r1, r1, #5
 8008b3a:	3101      	adds	r1, #1
 8008b3c:	0089      	lsls	r1, r1, #2
 8008b3e:	3414      	adds	r4, #20
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	1841      	adds	r1, r0, r1
 8008b44:	18e3      	adds	r3, r4, r3
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	d80d      	bhi.n	8008b66 <__copybits+0x38>
 8008b4a:	0014      	movs	r4, r2
 8008b4c:	3411      	adds	r4, #17
 8008b4e:	2500      	movs	r5, #0
 8008b50:	429c      	cmp	r4, r3
 8008b52:	d803      	bhi.n	8008b5c <__copybits+0x2e>
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	3b11      	subs	r3, #17
 8008b58:	089b      	lsrs	r3, r3, #2
 8008b5a:	009d      	lsls	r5, r3, #2
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	1940      	adds	r0, r0, r5
 8008b60:	4281      	cmp	r1, r0
 8008b62:	d803      	bhi.n	8008b6c <__copybits+0x3e>
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	cc40      	ldmia	r4!, {r6}
 8008b68:	c540      	stmia	r5!, {r6}
 8008b6a:	e7ec      	b.n	8008b46 <__copybits+0x18>
 8008b6c:	c008      	stmia	r0!, {r3}
 8008b6e:	e7f7      	b.n	8008b60 <__copybits+0x32>

08008b70 <__any_on>:
 8008b70:	0002      	movs	r2, r0
 8008b72:	6900      	ldr	r0, [r0, #16]
 8008b74:	b510      	push	{r4, lr}
 8008b76:	3214      	adds	r2, #20
 8008b78:	114b      	asrs	r3, r1, #5
 8008b7a:	4298      	cmp	r0, r3
 8008b7c:	db13      	blt.n	8008ba6 <__any_on+0x36>
 8008b7e:	dd0c      	ble.n	8008b9a <__any_on+0x2a>
 8008b80:	241f      	movs	r4, #31
 8008b82:	0008      	movs	r0, r1
 8008b84:	4020      	ands	r0, r4
 8008b86:	4221      	tst	r1, r4
 8008b88:	d007      	beq.n	8008b9a <__any_on+0x2a>
 8008b8a:	0099      	lsls	r1, r3, #2
 8008b8c:	588c      	ldr	r4, [r1, r2]
 8008b8e:	0021      	movs	r1, r4
 8008b90:	40c1      	lsrs	r1, r0
 8008b92:	4081      	lsls	r1, r0
 8008b94:	2001      	movs	r0, #1
 8008b96:	428c      	cmp	r4, r1
 8008b98:	d104      	bne.n	8008ba4 <__any_on+0x34>
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	18d3      	adds	r3, r2, r3
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d803      	bhi.n	8008baa <__any_on+0x3a>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	e7f7      	b.n	8008b9a <__any_on+0x2a>
 8008baa:	3b04      	subs	r3, #4
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	2900      	cmp	r1, #0
 8008bb0:	d0f5      	beq.n	8008b9e <__any_on+0x2e>
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7f6      	b.n	8008ba4 <__any_on+0x34>
	...

08008bb8 <sulp>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	0016      	movs	r6, r2
 8008bbc:	000d      	movs	r5, r1
 8008bbe:	f7ff fec5 	bl	800894c <__ulp>
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d00d      	beq.n	8008be2 <sulp+0x2a>
 8008bc6:	236b      	movs	r3, #107	; 0x6b
 8008bc8:	006a      	lsls	r2, r5, #1
 8008bca:	0d52      	lsrs	r2, r2, #21
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dd07      	ble.n	8008be2 <sulp+0x2a>
 8008bd2:	2400      	movs	r4, #0
 8008bd4:	4a03      	ldr	r2, [pc, #12]	; (8008be4 <sulp+0x2c>)
 8008bd6:	051b      	lsls	r3, r3, #20
 8008bd8:	189d      	adds	r5, r3, r2
 8008bda:	002b      	movs	r3, r5
 8008bdc:	0022      	movs	r2, r4
 8008bde:	f7f8 fd47 	bl	8001670 <__aeabi_dmul>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	3ff00000 	.word	0x3ff00000

08008be8 <_strtod_l>:
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	b0a1      	sub	sp, #132	; 0x84
 8008bec:	9219      	str	r2, [sp, #100]	; 0x64
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2600      	movs	r6, #0
 8008bf2:	2700      	movs	r7, #0
 8008bf4:	9004      	str	r0, [sp, #16]
 8008bf6:	9107      	str	r1, [sp, #28]
 8008bf8:	921c      	str	r2, [sp, #112]	; 0x70
 8008bfa:	911b      	str	r1, [sp, #108]	; 0x6c
 8008bfc:	780a      	ldrb	r2, [r1, #0]
 8008bfe:	2a2b      	cmp	r2, #43	; 0x2b
 8008c00:	d055      	beq.n	8008cae <_strtod_l+0xc6>
 8008c02:	d841      	bhi.n	8008c88 <_strtod_l+0xa0>
 8008c04:	2a0d      	cmp	r2, #13
 8008c06:	d83b      	bhi.n	8008c80 <_strtod_l+0x98>
 8008c08:	2a08      	cmp	r2, #8
 8008c0a:	d83b      	bhi.n	8008c84 <_strtod_l+0x9c>
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d044      	beq.n	8008c9a <_strtod_l+0xb2>
 8008c10:	2200      	movs	r2, #0
 8008c12:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c14:	2100      	movs	r1, #0
 8008c16:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008c18:	9109      	str	r1, [sp, #36]	; 0x24
 8008c1a:	782a      	ldrb	r2, [r5, #0]
 8008c1c:	2a30      	cmp	r2, #48	; 0x30
 8008c1e:	d000      	beq.n	8008c22 <_strtod_l+0x3a>
 8008c20:	e085      	b.n	8008d2e <_strtod_l+0x146>
 8008c22:	786a      	ldrb	r2, [r5, #1]
 8008c24:	3120      	adds	r1, #32
 8008c26:	438a      	bics	r2, r1
 8008c28:	2a58      	cmp	r2, #88	; 0x58
 8008c2a:	d000      	beq.n	8008c2e <_strtod_l+0x46>
 8008c2c:	e075      	b.n	8008d1a <_strtod_l+0x132>
 8008c2e:	9302      	str	r3, [sp, #8]
 8008c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c32:	4a97      	ldr	r2, [pc, #604]	; (8008e90 <_strtod_l+0x2a8>)
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	ab1c      	add	r3, sp, #112	; 0x70
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	9804      	ldr	r0, [sp, #16]
 8008c3c:	ab1d      	add	r3, sp, #116	; 0x74
 8008c3e:	a91b      	add	r1, sp, #108	; 0x6c
 8008c40:	f001 fa42 	bl	800a0c8 <__gethex>
 8008c44:	230f      	movs	r3, #15
 8008c46:	0002      	movs	r2, r0
 8008c48:	401a      	ands	r2, r3
 8008c4a:	0004      	movs	r4, r0
 8008c4c:	9205      	str	r2, [sp, #20]
 8008c4e:	4218      	tst	r0, r3
 8008c50:	d005      	beq.n	8008c5e <_strtod_l+0x76>
 8008c52:	2a06      	cmp	r2, #6
 8008c54:	d12d      	bne.n	8008cb2 <_strtod_l+0xca>
 8008c56:	1c6b      	adds	r3, r5, #1
 8008c58:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <_strtod_l+0x82>
 8008c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01b      	beq.n	8008ca8 <_strtod_l+0xc0>
 8008c70:	2380      	movs	r3, #128	; 0x80
 8008c72:	0032      	movs	r2, r6
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	18fb      	adds	r3, r7, r3
 8008c78:	0010      	movs	r0, r2
 8008c7a:	0019      	movs	r1, r3
 8008c7c:	b021      	add	sp, #132	; 0x84
 8008c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c80:	2a20      	cmp	r2, #32
 8008c82:	d1c5      	bne.n	8008c10 <_strtod_l+0x28>
 8008c84:	3101      	adds	r1, #1
 8008c86:	e7b8      	b.n	8008bfa <_strtod_l+0x12>
 8008c88:	2a2d      	cmp	r2, #45	; 0x2d
 8008c8a:	d1c1      	bne.n	8008c10 <_strtod_l+0x28>
 8008c8c:	3a2c      	subs	r2, #44	; 0x2c
 8008c8e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c90:	1c4a      	adds	r2, r1, #1
 8008c92:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c94:	784a      	ldrb	r2, [r1, #1]
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	d1bc      	bne.n	8008c14 <_strtod_l+0x2c>
 8008c9a:	9b07      	ldr	r3, [sp, #28]
 8008c9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1dd      	bne.n	8008c64 <_strtod_l+0x7c>
 8008ca8:	0032      	movs	r2, r6
 8008caa:	003b      	movs	r3, r7
 8008cac:	e7e4      	b.n	8008c78 <_strtod_l+0x90>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	e7ed      	b.n	8008c8e <_strtod_l+0xa6>
 8008cb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d007      	beq.n	8008cc8 <_strtod_l+0xe0>
 8008cb8:	2135      	movs	r1, #53	; 0x35
 8008cba:	a81e      	add	r0, sp, #120	; 0x78
 8008cbc:	f7ff ff37 	bl	8008b2e <__copybits>
 8008cc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008cc2:	9804      	ldr	r0, [sp, #16]
 8008cc4:	f7ff fb00 	bl	80082c8 <_Bfree>
 8008cc8:	9805      	ldr	r0, [sp, #20]
 8008cca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ccc:	3801      	subs	r0, #1
 8008cce:	2804      	cmp	r0, #4
 8008cd0:	d806      	bhi.n	8008ce0 <_strtod_l+0xf8>
 8008cd2:	f7f7 fa21 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008cd6:	0312      	.short	0x0312
 8008cd8:	1e1c      	.short	0x1e1c
 8008cda:	12          	.byte	0x12
 8008cdb:	00          	.byte	0x00
 8008cdc:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008cde:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008ce0:	05e4      	lsls	r4, r4, #23
 8008ce2:	d502      	bpl.n	8008cea <_strtod_l+0x102>
 8008ce4:	2380      	movs	r3, #128	; 0x80
 8008ce6:	061b      	lsls	r3, r3, #24
 8008ce8:	431f      	orrs	r7, r3
 8008cea:	4b6a      	ldr	r3, [pc, #424]	; (8008e94 <_strtod_l+0x2ac>)
 8008cec:	423b      	tst	r3, r7
 8008cee:	d1b6      	bne.n	8008c5e <_strtod_l+0x76>
 8008cf0:	f7fe fac4 	bl	800727c <__errno>
 8008cf4:	2322      	movs	r3, #34	; 0x22
 8008cf6:	6003      	str	r3, [r0, #0]
 8008cf8:	e7b1      	b.n	8008c5e <_strtod_l+0x76>
 8008cfa:	4967      	ldr	r1, [pc, #412]	; (8008e98 <_strtod_l+0x2b0>)
 8008cfc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008cfe:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008d00:	400a      	ands	r2, r1
 8008d02:	4966      	ldr	r1, [pc, #408]	; (8008e9c <_strtod_l+0x2b4>)
 8008d04:	185b      	adds	r3, r3, r1
 8008d06:	051b      	lsls	r3, r3, #20
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	0017      	movs	r7, r2
 8008d0c:	e7e8      	b.n	8008ce0 <_strtod_l+0xf8>
 8008d0e:	4f61      	ldr	r7, [pc, #388]	; (8008e94 <_strtod_l+0x2ac>)
 8008d10:	e7e6      	b.n	8008ce0 <_strtod_l+0xf8>
 8008d12:	2601      	movs	r6, #1
 8008d14:	4f62      	ldr	r7, [pc, #392]	; (8008ea0 <_strtod_l+0x2b8>)
 8008d16:	4276      	negs	r6, r6
 8008d18:	e7e2      	b.n	8008ce0 <_strtod_l+0xf8>
 8008d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b30      	cmp	r3, #48	; 0x30
 8008d24:	d0f9      	beq.n	8008d1a <_strtod_l+0x132>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d099      	beq.n	8008c5e <_strtod_l+0x76>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2e:	2500      	movs	r5, #0
 8008d30:	220a      	movs	r2, #10
 8008d32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d34:	950d      	str	r5, [sp, #52]	; 0x34
 8008d36:	9310      	str	r3, [sp, #64]	; 0x40
 8008d38:	9508      	str	r5, [sp, #32]
 8008d3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008d3c:	7804      	ldrb	r4, [r0, #0]
 8008d3e:	0023      	movs	r3, r4
 8008d40:	3b30      	subs	r3, #48	; 0x30
 8008d42:	b2d9      	uxtb	r1, r3
 8008d44:	2909      	cmp	r1, #9
 8008d46:	d927      	bls.n	8008d98 <_strtod_l+0x1b0>
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4956      	ldr	r1, [pc, #344]	; (8008ea4 <_strtod_l+0x2bc>)
 8008d4c:	f001 f8af 	bl	8009eae <strncmp>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d031      	beq.n	8008db8 <_strtod_l+0x1d0>
 8008d54:	2000      	movs	r0, #0
 8008d56:	0023      	movs	r3, r4
 8008d58:	4684      	mov	ip, r0
 8008d5a:	9a08      	ldr	r2, [sp, #32]
 8008d5c:	900c      	str	r0, [sp, #48]	; 0x30
 8008d5e:	9205      	str	r2, [sp, #20]
 8008d60:	2220      	movs	r2, #32
 8008d62:	0019      	movs	r1, r3
 8008d64:	4391      	bics	r1, r2
 8008d66:	000a      	movs	r2, r1
 8008d68:	2100      	movs	r1, #0
 8008d6a:	9106      	str	r1, [sp, #24]
 8008d6c:	2a45      	cmp	r2, #69	; 0x45
 8008d6e:	d000      	beq.n	8008d72 <_strtod_l+0x18a>
 8008d70:	e0c2      	b.n	8008ef8 <_strtod_l+0x310>
 8008d72:	9b05      	ldr	r3, [sp, #20]
 8008d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d76:	4303      	orrs	r3, r0
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	428b      	cmp	r3, r1
 8008d7c:	d08d      	beq.n	8008c9a <_strtod_l+0xb2>
 8008d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	3301      	adds	r3, #1
 8008d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	2b2b      	cmp	r3, #43	; 0x2b
 8008d8c:	d071      	beq.n	8008e72 <_strtod_l+0x28a>
 8008d8e:	000c      	movs	r4, r1
 8008d90:	2b2d      	cmp	r3, #45	; 0x2d
 8008d92:	d174      	bne.n	8008e7e <_strtod_l+0x296>
 8008d94:	2401      	movs	r4, #1
 8008d96:	e06d      	b.n	8008e74 <_strtod_l+0x28c>
 8008d98:	9908      	ldr	r1, [sp, #32]
 8008d9a:	2908      	cmp	r1, #8
 8008d9c:	dc09      	bgt.n	8008db2 <_strtod_l+0x1ca>
 8008d9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008da0:	4351      	muls	r1, r2
 8008da2:	185b      	adds	r3, r3, r1
 8008da4:	930d      	str	r3, [sp, #52]	; 0x34
 8008da6:	9b08      	ldr	r3, [sp, #32]
 8008da8:	3001      	adds	r0, #1
 8008daa:	3301      	adds	r3, #1
 8008dac:	9308      	str	r3, [sp, #32]
 8008dae:	901b      	str	r0, [sp, #108]	; 0x6c
 8008db0:	e7c3      	b.n	8008d3a <_strtod_l+0x152>
 8008db2:	4355      	muls	r5, r2
 8008db4:	195d      	adds	r5, r3, r5
 8008db6:	e7f6      	b.n	8008da6 <_strtod_l+0x1be>
 8008db8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	921b      	str	r2, [sp, #108]	; 0x6c
 8008dbe:	9a08      	ldr	r2, [sp, #32]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	d03a      	beq.n	8008e3c <_strtod_l+0x254>
 8008dc6:	900c      	str	r0, [sp, #48]	; 0x30
 8008dc8:	9205      	str	r2, [sp, #20]
 8008dca:	001a      	movs	r2, r3
 8008dcc:	3a30      	subs	r2, #48	; 0x30
 8008dce:	2a09      	cmp	r2, #9
 8008dd0:	d912      	bls.n	8008df8 <_strtod_l+0x210>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	4694      	mov	ip, r2
 8008dd6:	e7c3      	b.n	8008d60 <_strtod_l+0x178>
 8008dd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dda:	3001      	adds	r0, #1
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	921b      	str	r2, [sp, #108]	; 0x6c
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b30      	cmp	r3, #48	; 0x30
 8008de4:	d0f8      	beq.n	8008dd8 <_strtod_l+0x1f0>
 8008de6:	001a      	movs	r2, r3
 8008de8:	3a31      	subs	r2, #49	; 0x31
 8008dea:	2a08      	cmp	r2, #8
 8008dec:	d83c      	bhi.n	8008e68 <_strtod_l+0x280>
 8008dee:	900c      	str	r0, [sp, #48]	; 0x30
 8008df0:	2000      	movs	r0, #0
 8008df2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008df4:	9005      	str	r0, [sp, #20]
 8008df6:	9210      	str	r2, [sp, #64]	; 0x40
 8008df8:	001a      	movs	r2, r3
 8008dfa:	1c41      	adds	r1, r0, #1
 8008dfc:	3a30      	subs	r2, #48	; 0x30
 8008dfe:	2b30      	cmp	r3, #48	; 0x30
 8008e00:	d016      	beq.n	8008e30 <_strtod_l+0x248>
 8008e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e04:	185b      	adds	r3, r3, r1
 8008e06:	930c      	str	r3, [sp, #48]	; 0x30
 8008e08:	9b05      	ldr	r3, [sp, #20]
 8008e0a:	210a      	movs	r1, #10
 8008e0c:	469c      	mov	ip, r3
 8008e0e:	4484      	add	ip, r0
 8008e10:	4563      	cmp	r3, ip
 8008e12:	d115      	bne.n	8008e40 <_strtod_l+0x258>
 8008e14:	9905      	ldr	r1, [sp, #20]
 8008e16:	9b05      	ldr	r3, [sp, #20]
 8008e18:	3101      	adds	r1, #1
 8008e1a:	1809      	adds	r1, r1, r0
 8008e1c:	181b      	adds	r3, r3, r0
 8008e1e:	9105      	str	r1, [sp, #20]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	dc19      	bgt.n	8008e58 <_strtod_l+0x270>
 8008e24:	230a      	movs	r3, #10
 8008e26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e28:	434b      	muls	r3, r1
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	18d3      	adds	r3, r2, r3
 8008e2e:	930d      	str	r3, [sp, #52]	; 0x34
 8008e30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e32:	0008      	movs	r0, r1
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	e7c6      	b.n	8008dca <_strtod_l+0x1e2>
 8008e3c:	9808      	ldr	r0, [sp, #32]
 8008e3e:	e7d0      	b.n	8008de2 <_strtod_l+0x1fa>
 8008e40:	1c5c      	adds	r4, r3, #1
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	dc04      	bgt.n	8008e50 <_strtod_l+0x268>
 8008e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e48:	434b      	muls	r3, r1
 8008e4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e4c:	0023      	movs	r3, r4
 8008e4e:	e7df      	b.n	8008e10 <_strtod_l+0x228>
 8008e50:	2c10      	cmp	r4, #16
 8008e52:	dcfb      	bgt.n	8008e4c <_strtod_l+0x264>
 8008e54:	434d      	muls	r5, r1
 8008e56:	e7f9      	b.n	8008e4c <_strtod_l+0x264>
 8008e58:	9b05      	ldr	r3, [sp, #20]
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	2b10      	cmp	r3, #16
 8008e5e:	dce7      	bgt.n	8008e30 <_strtod_l+0x248>
 8008e60:	230a      	movs	r3, #10
 8008e62:	435d      	muls	r5, r3
 8008e64:	1955      	adds	r5, r2, r5
 8008e66:	e7e3      	b.n	8008e30 <_strtod_l+0x248>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	920c      	str	r2, [sp, #48]	; 0x30
 8008e6c:	9205      	str	r2, [sp, #20]
 8008e6e:	3201      	adds	r2, #1
 8008e70:	e7b0      	b.n	8008dd4 <_strtod_l+0x1ec>
 8008e72:	2400      	movs	r4, #0
 8008e74:	9b07      	ldr	r3, [sp, #28]
 8008e76:	3302      	adds	r3, #2
 8008e78:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e7a:	9b07      	ldr	r3, [sp, #28]
 8008e7c:	789b      	ldrb	r3, [r3, #2]
 8008e7e:	001a      	movs	r2, r3
 8008e80:	3a30      	subs	r2, #48	; 0x30
 8008e82:	2a09      	cmp	r2, #9
 8008e84:	d914      	bls.n	8008eb0 <_strtod_l+0x2c8>
 8008e86:	9a07      	ldr	r2, [sp, #28]
 8008e88:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	e033      	b.n	8008ef6 <_strtod_l+0x30e>
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	0800ae20 	.word	0x0800ae20
 8008e94:	7ff00000 	.word	0x7ff00000
 8008e98:	ffefffff 	.word	0xffefffff
 8008e9c:	00000433 	.word	0x00000433
 8008ea0:	7fffffff 	.word	0x7fffffff
 8008ea4:	0800ae1c 	.word	0x0800ae1c
 8008ea8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	921b      	str	r2, [sp, #108]	; 0x6c
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b30      	cmp	r3, #48	; 0x30
 8008eb2:	d0f9      	beq.n	8008ea8 <_strtod_l+0x2c0>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	9206      	str	r2, [sp, #24]
 8008eb8:	001a      	movs	r2, r3
 8008eba:	3a31      	subs	r2, #49	; 0x31
 8008ebc:	2a08      	cmp	r2, #8
 8008ebe:	d81b      	bhi.n	8008ef8 <_strtod_l+0x310>
 8008ec0:	3b30      	subs	r3, #48	; 0x30
 8008ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ec6:	9306      	str	r3, [sp, #24]
 8008ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eca:	1c59      	adds	r1, r3, #1
 8008ecc:	911b      	str	r1, [sp, #108]	; 0x6c
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	001a      	movs	r2, r3
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	2a09      	cmp	r2, #9
 8008ed6:	d93a      	bls.n	8008f4e <_strtod_l+0x366>
 8008ed8:	9a06      	ldr	r2, [sp, #24]
 8008eda:	1a8a      	subs	r2, r1, r2
 8008edc:	49b2      	ldr	r1, [pc, #712]	; (80091a8 <_strtod_l+0x5c0>)
 8008ede:	9106      	str	r1, [sp, #24]
 8008ee0:	2a08      	cmp	r2, #8
 8008ee2:	dc04      	bgt.n	8008eee <_strtod_l+0x306>
 8008ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ee6:	9206      	str	r2, [sp, #24]
 8008ee8:	428a      	cmp	r2, r1
 8008eea:	dd00      	ble.n	8008eee <_strtod_l+0x306>
 8008eec:	9106      	str	r1, [sp, #24]
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d002      	beq.n	8008ef8 <_strtod_l+0x310>
 8008ef2:	9a06      	ldr	r2, [sp, #24]
 8008ef4:	4252      	negs	r2, r2
 8008ef6:	9206      	str	r2, [sp, #24]
 8008ef8:	9a05      	ldr	r2, [sp, #20]
 8008efa:	2a00      	cmp	r2, #0
 8008efc:	d14d      	bne.n	8008f9a <_strtod_l+0x3b2>
 8008efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f00:	4310      	orrs	r0, r2
 8008f02:	d000      	beq.n	8008f06 <_strtod_l+0x31e>
 8008f04:	e6ab      	b.n	8008c5e <_strtod_l+0x76>
 8008f06:	4662      	mov	r2, ip
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	d000      	beq.n	8008f0e <_strtod_l+0x326>
 8008f0c:	e6c5      	b.n	8008c9a <_strtod_l+0xb2>
 8008f0e:	2b69      	cmp	r3, #105	; 0x69
 8008f10:	d027      	beq.n	8008f62 <_strtod_l+0x37a>
 8008f12:	dc23      	bgt.n	8008f5c <_strtod_l+0x374>
 8008f14:	2b49      	cmp	r3, #73	; 0x49
 8008f16:	d024      	beq.n	8008f62 <_strtod_l+0x37a>
 8008f18:	2b4e      	cmp	r3, #78	; 0x4e
 8008f1a:	d000      	beq.n	8008f1e <_strtod_l+0x336>
 8008f1c:	e6bd      	b.n	8008c9a <_strtod_l+0xb2>
 8008f1e:	49a3      	ldr	r1, [pc, #652]	; (80091ac <_strtod_l+0x5c4>)
 8008f20:	a81b      	add	r0, sp, #108	; 0x6c
 8008f22:	f001 fb07 	bl	800a534 <__match>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d100      	bne.n	8008f2c <_strtod_l+0x344>
 8008f2a:	e6b6      	b.n	8008c9a <_strtod_l+0xb2>
 8008f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b28      	cmp	r3, #40	; 0x28
 8008f32:	d12c      	bne.n	8008f8e <_strtod_l+0x3a6>
 8008f34:	499e      	ldr	r1, [pc, #632]	; (80091b0 <_strtod_l+0x5c8>)
 8008f36:	aa1e      	add	r2, sp, #120	; 0x78
 8008f38:	a81b      	add	r0, sp, #108	; 0x6c
 8008f3a:	f001 fb0f 	bl	800a55c <__hexnan>
 8008f3e:	2805      	cmp	r0, #5
 8008f40:	d125      	bne.n	8008f8e <_strtod_l+0x3a6>
 8008f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f44:	4a9b      	ldr	r2, [pc, #620]	; (80091b4 <_strtod_l+0x5cc>)
 8008f46:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	0017      	movs	r7, r2
 8008f4c:	e687      	b.n	8008c5e <_strtod_l+0x76>
 8008f4e:	220a      	movs	r2, #10
 8008f50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008f52:	434a      	muls	r2, r1
 8008f54:	18d2      	adds	r2, r2, r3
 8008f56:	3a30      	subs	r2, #48	; 0x30
 8008f58:	920e      	str	r2, [sp, #56]	; 0x38
 8008f5a:	e7b5      	b.n	8008ec8 <_strtod_l+0x2e0>
 8008f5c:	2b6e      	cmp	r3, #110	; 0x6e
 8008f5e:	d0de      	beq.n	8008f1e <_strtod_l+0x336>
 8008f60:	e69b      	b.n	8008c9a <_strtod_l+0xb2>
 8008f62:	4995      	ldr	r1, [pc, #596]	; (80091b8 <_strtod_l+0x5d0>)
 8008f64:	a81b      	add	r0, sp, #108	; 0x6c
 8008f66:	f001 fae5 	bl	800a534 <__match>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d100      	bne.n	8008f70 <_strtod_l+0x388>
 8008f6e:	e694      	b.n	8008c9a <_strtod_l+0xb2>
 8008f70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f72:	4992      	ldr	r1, [pc, #584]	; (80091bc <_strtod_l+0x5d4>)
 8008f74:	3b01      	subs	r3, #1
 8008f76:	a81b      	add	r0, sp, #108	; 0x6c
 8008f78:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f7a:	f001 fadb 	bl	800a534 <__match>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d102      	bne.n	8008f88 <_strtod_l+0x3a0>
 8008f82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f84:	3301      	adds	r3, #1
 8008f86:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f88:	2600      	movs	r6, #0
 8008f8a:	4f8a      	ldr	r7, [pc, #552]	; (80091b4 <_strtod_l+0x5cc>)
 8008f8c:	e667      	b.n	8008c5e <_strtod_l+0x76>
 8008f8e:	488c      	ldr	r0, [pc, #560]	; (80091c0 <_strtod_l+0x5d8>)
 8008f90:	f000 ffde 	bl	8009f50 <nan>
 8008f94:	0006      	movs	r6, r0
 8008f96:	000f      	movs	r7, r1
 8008f98:	e661      	b.n	8008c5e <_strtod_l+0x76>
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <_strtod_l+0x3c4>
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	9c05      	ldr	r4, [sp, #20]
 8008fae:	2c10      	cmp	r4, #16
 8008fb0:	dd00      	ble.n	8008fb4 <_strtod_l+0x3cc>
 8008fb2:	2410      	movs	r4, #16
 8008fb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008fb6:	f7f9 fa23 	bl	8002400 <__aeabi_ui2d>
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	0006      	movs	r6, r0
 8008fbe:	000f      	movs	r7, r1
 8008fc0:	2b09      	cmp	r3, #9
 8008fc2:	dd15      	ble.n	8008ff0 <_strtod_l+0x408>
 8008fc4:	0022      	movs	r2, r4
 8008fc6:	4b7f      	ldr	r3, [pc, #508]	; (80091c4 <_strtod_l+0x5dc>)
 8008fc8:	3a09      	subs	r2, #9
 8008fca:	00d2      	lsls	r2, r2, #3
 8008fcc:	189b      	adds	r3, r3, r2
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f7f8 fb4d 	bl	8001670 <__aeabi_dmul>
 8008fd6:	0006      	movs	r6, r0
 8008fd8:	0028      	movs	r0, r5
 8008fda:	000f      	movs	r7, r1
 8008fdc:	f7f9 fa10 	bl	8002400 <__aeabi_ui2d>
 8008fe0:	0002      	movs	r2, r0
 8008fe2:	000b      	movs	r3, r1
 8008fe4:	0030      	movs	r0, r6
 8008fe6:	0039      	movs	r1, r7
 8008fe8:	f7f7 fbe8 	bl	80007bc <__aeabi_dadd>
 8008fec:	0006      	movs	r6, r0
 8008fee:	000f      	movs	r7, r1
 8008ff0:	9b05      	ldr	r3, [sp, #20]
 8008ff2:	2b0f      	cmp	r3, #15
 8008ff4:	dc39      	bgt.n	800906a <_strtod_l+0x482>
 8008ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d100      	bne.n	8008ffe <_strtod_l+0x416>
 8008ffc:	e62f      	b.n	8008c5e <_strtod_l+0x76>
 8008ffe:	dd24      	ble.n	800904a <_strtod_l+0x462>
 8009000:	2b16      	cmp	r3, #22
 8009002:	dc09      	bgt.n	8009018 <_strtod_l+0x430>
 8009004:	496f      	ldr	r1, [pc, #444]	; (80091c4 <_strtod_l+0x5dc>)
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	18c9      	adds	r1, r1, r3
 800900a:	0032      	movs	r2, r6
 800900c:	6808      	ldr	r0, [r1, #0]
 800900e:	6849      	ldr	r1, [r1, #4]
 8009010:	003b      	movs	r3, r7
 8009012:	f7f8 fb2d 	bl	8001670 <__aeabi_dmul>
 8009016:	e7bd      	b.n	8008f94 <_strtod_l+0x3ac>
 8009018:	2325      	movs	r3, #37	; 0x25
 800901a:	9a05      	ldr	r2, [sp, #20]
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009020:	4293      	cmp	r3, r2
 8009022:	db22      	blt.n	800906a <_strtod_l+0x482>
 8009024:	240f      	movs	r4, #15
 8009026:	9b05      	ldr	r3, [sp, #20]
 8009028:	4d66      	ldr	r5, [pc, #408]	; (80091c4 <_strtod_l+0x5dc>)
 800902a:	1ae4      	subs	r4, r4, r3
 800902c:	00e1      	lsls	r1, r4, #3
 800902e:	1869      	adds	r1, r5, r1
 8009030:	0032      	movs	r2, r6
 8009032:	6808      	ldr	r0, [r1, #0]
 8009034:	6849      	ldr	r1, [r1, #4]
 8009036:	003b      	movs	r3, r7
 8009038:	f7f8 fb1a 	bl	8001670 <__aeabi_dmul>
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	1b1c      	subs	r4, r3, r4
 8009040:	00e4      	lsls	r4, r4, #3
 8009042:	192d      	adds	r5, r5, r4
 8009044:	682a      	ldr	r2, [r5, #0]
 8009046:	686b      	ldr	r3, [r5, #4]
 8009048:	e7e3      	b.n	8009012 <_strtod_l+0x42a>
 800904a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904c:	3316      	adds	r3, #22
 800904e:	db0c      	blt.n	800906a <_strtod_l+0x482>
 8009050:	9906      	ldr	r1, [sp, #24]
 8009052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009054:	4b5b      	ldr	r3, [pc, #364]	; (80091c4 <_strtod_l+0x5dc>)
 8009056:	1a52      	subs	r2, r2, r1
 8009058:	00d2      	lsls	r2, r2, #3
 800905a:	189b      	adds	r3, r3, r2
 800905c:	0030      	movs	r0, r6
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	0039      	movs	r1, r7
 8009064:	f7f7 ff0a 	bl	8000e7c <__aeabi_ddiv>
 8009068:	e794      	b.n	8008f94 <_strtod_l+0x3ac>
 800906a:	9b05      	ldr	r3, [sp, #20]
 800906c:	1b1c      	subs	r4, r3, r4
 800906e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009070:	18e4      	adds	r4, r4, r3
 8009072:	2c00      	cmp	r4, #0
 8009074:	dd72      	ble.n	800915c <_strtod_l+0x574>
 8009076:	220f      	movs	r2, #15
 8009078:	0023      	movs	r3, r4
 800907a:	4013      	ands	r3, r2
 800907c:	4214      	tst	r4, r2
 800907e:	d00a      	beq.n	8009096 <_strtod_l+0x4ae>
 8009080:	4950      	ldr	r1, [pc, #320]	; (80091c4 <_strtod_l+0x5dc>)
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	18c9      	adds	r1, r1, r3
 8009086:	0032      	movs	r2, r6
 8009088:	6808      	ldr	r0, [r1, #0]
 800908a:	6849      	ldr	r1, [r1, #4]
 800908c:	003b      	movs	r3, r7
 800908e:	f7f8 faef 	bl	8001670 <__aeabi_dmul>
 8009092:	0006      	movs	r6, r0
 8009094:	000f      	movs	r7, r1
 8009096:	230f      	movs	r3, #15
 8009098:	439c      	bics	r4, r3
 800909a:	d04a      	beq.n	8009132 <_strtod_l+0x54a>
 800909c:	3326      	adds	r3, #38	; 0x26
 800909e:	33ff      	adds	r3, #255	; 0xff
 80090a0:	429c      	cmp	r4, r3
 80090a2:	dd22      	ble.n	80090ea <_strtod_l+0x502>
 80090a4:	2300      	movs	r3, #0
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	930d      	str	r3, [sp, #52]	; 0x34
 80090ac:	9308      	str	r3, [sp, #32]
 80090ae:	2322      	movs	r3, #34	; 0x22
 80090b0:	2600      	movs	r6, #0
 80090b2:	9a04      	ldr	r2, [sp, #16]
 80090b4:	4f3f      	ldr	r7, [pc, #252]	; (80091b4 <_strtod_l+0x5cc>)
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	d100      	bne.n	80090c0 <_strtod_l+0x4d8>
 80090be:	e5ce      	b.n	8008c5e <_strtod_l+0x76>
 80090c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090c2:	9804      	ldr	r0, [sp, #16]
 80090c4:	f7ff f900 	bl	80082c8 <_Bfree>
 80090c8:	9908      	ldr	r1, [sp, #32]
 80090ca:	9804      	ldr	r0, [sp, #16]
 80090cc:	f7ff f8fc 	bl	80082c8 <_Bfree>
 80090d0:	9906      	ldr	r1, [sp, #24]
 80090d2:	9804      	ldr	r0, [sp, #16]
 80090d4:	f7ff f8f8 	bl	80082c8 <_Bfree>
 80090d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090da:	9804      	ldr	r0, [sp, #16]
 80090dc:	f7ff f8f4 	bl	80082c8 <_Bfree>
 80090e0:	9905      	ldr	r1, [sp, #20]
 80090e2:	9804      	ldr	r0, [sp, #16]
 80090e4:	f7ff f8f0 	bl	80082c8 <_Bfree>
 80090e8:	e5b9      	b.n	8008c5e <_strtod_l+0x76>
 80090ea:	2300      	movs	r3, #0
 80090ec:	0030      	movs	r0, r6
 80090ee:	0039      	movs	r1, r7
 80090f0:	4d35      	ldr	r5, [pc, #212]	; (80091c8 <_strtod_l+0x5e0>)
 80090f2:	1124      	asrs	r4, r4, #4
 80090f4:	9307      	str	r3, [sp, #28]
 80090f6:	2c01      	cmp	r4, #1
 80090f8:	dc1e      	bgt.n	8009138 <_strtod_l+0x550>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <_strtod_l+0x51a>
 80090fe:	0006      	movs	r6, r0
 8009100:	000f      	movs	r7, r1
 8009102:	4b32      	ldr	r3, [pc, #200]	; (80091cc <_strtod_l+0x5e4>)
 8009104:	9a07      	ldr	r2, [sp, #28]
 8009106:	18ff      	adds	r7, r7, r3
 8009108:	4b2f      	ldr	r3, [pc, #188]	; (80091c8 <_strtod_l+0x5e0>)
 800910a:	00d2      	lsls	r2, r2, #3
 800910c:	189d      	adds	r5, r3, r2
 800910e:	6828      	ldr	r0, [r5, #0]
 8009110:	6869      	ldr	r1, [r5, #4]
 8009112:	0032      	movs	r2, r6
 8009114:	003b      	movs	r3, r7
 8009116:	f7f8 faab 	bl	8001670 <__aeabi_dmul>
 800911a:	4b26      	ldr	r3, [pc, #152]	; (80091b4 <_strtod_l+0x5cc>)
 800911c:	4a2c      	ldr	r2, [pc, #176]	; (80091d0 <_strtod_l+0x5e8>)
 800911e:	0006      	movs	r6, r0
 8009120:	400b      	ands	r3, r1
 8009122:	4293      	cmp	r3, r2
 8009124:	d8be      	bhi.n	80090a4 <_strtod_l+0x4bc>
 8009126:	4a2b      	ldr	r2, [pc, #172]	; (80091d4 <_strtod_l+0x5ec>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d913      	bls.n	8009154 <_strtod_l+0x56c>
 800912c:	2601      	movs	r6, #1
 800912e:	4f2a      	ldr	r7, [pc, #168]	; (80091d8 <_strtod_l+0x5f0>)
 8009130:	4276      	negs	r6, r6
 8009132:	2300      	movs	r3, #0
 8009134:	9307      	str	r3, [sp, #28]
 8009136:	e088      	b.n	800924a <_strtod_l+0x662>
 8009138:	2201      	movs	r2, #1
 800913a:	4214      	tst	r4, r2
 800913c:	d004      	beq.n	8009148 <_strtod_l+0x560>
 800913e:	682a      	ldr	r2, [r5, #0]
 8009140:	686b      	ldr	r3, [r5, #4]
 8009142:	f7f8 fa95 	bl	8001670 <__aeabi_dmul>
 8009146:	2301      	movs	r3, #1
 8009148:	9a07      	ldr	r2, [sp, #28]
 800914a:	1064      	asrs	r4, r4, #1
 800914c:	3201      	adds	r2, #1
 800914e:	9207      	str	r2, [sp, #28]
 8009150:	3508      	adds	r5, #8
 8009152:	e7d0      	b.n	80090f6 <_strtod_l+0x50e>
 8009154:	23d4      	movs	r3, #212	; 0xd4
 8009156:	049b      	lsls	r3, r3, #18
 8009158:	18cf      	adds	r7, r1, r3
 800915a:	e7ea      	b.n	8009132 <_strtod_l+0x54a>
 800915c:	2c00      	cmp	r4, #0
 800915e:	d0e8      	beq.n	8009132 <_strtod_l+0x54a>
 8009160:	4264      	negs	r4, r4
 8009162:	230f      	movs	r3, #15
 8009164:	0022      	movs	r2, r4
 8009166:	401a      	ands	r2, r3
 8009168:	421c      	tst	r4, r3
 800916a:	d00a      	beq.n	8009182 <_strtod_l+0x59a>
 800916c:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <_strtod_l+0x5dc>)
 800916e:	00d2      	lsls	r2, r2, #3
 8009170:	189b      	adds	r3, r3, r2
 8009172:	0030      	movs	r0, r6
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	0039      	movs	r1, r7
 800917a:	f7f7 fe7f 	bl	8000e7c <__aeabi_ddiv>
 800917e:	0006      	movs	r6, r0
 8009180:	000f      	movs	r7, r1
 8009182:	1124      	asrs	r4, r4, #4
 8009184:	d0d5      	beq.n	8009132 <_strtod_l+0x54a>
 8009186:	2c1f      	cmp	r4, #31
 8009188:	dd28      	ble.n	80091dc <_strtod_l+0x5f4>
 800918a:	2300      	movs	r3, #0
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	9306      	str	r3, [sp, #24]
 8009190:	930d      	str	r3, [sp, #52]	; 0x34
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	2322      	movs	r3, #34	; 0x22
 8009196:	9a04      	ldr	r2, [sp, #16]
 8009198:	2600      	movs	r6, #0
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800919e:	2700      	movs	r7, #0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d18d      	bne.n	80090c0 <_strtod_l+0x4d8>
 80091a4:	e55b      	b.n	8008c5e <_strtod_l+0x76>
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	00004e1f 	.word	0x00004e1f
 80091ac:	0800ac09 	.word	0x0800ac09
 80091b0:	0800ae34 	.word	0x0800ae34
 80091b4:	7ff00000 	.word	0x7ff00000
 80091b8:	0800ac01 	.word	0x0800ac01
 80091bc:	0800ac38 	.word	0x0800ac38
 80091c0:	0800afc5 	.word	0x0800afc5
 80091c4:	0800ad48 	.word	0x0800ad48
 80091c8:	0800ad20 	.word	0x0800ad20
 80091cc:	fcb00000 	.word	0xfcb00000
 80091d0:	7ca00000 	.word	0x7ca00000
 80091d4:	7c900000 	.word	0x7c900000
 80091d8:	7fefffff 	.word	0x7fefffff
 80091dc:	2310      	movs	r3, #16
 80091de:	0022      	movs	r2, r4
 80091e0:	401a      	ands	r2, r3
 80091e2:	9207      	str	r2, [sp, #28]
 80091e4:	421c      	tst	r4, r3
 80091e6:	d001      	beq.n	80091ec <_strtod_l+0x604>
 80091e8:	335a      	adds	r3, #90	; 0x5a
 80091ea:	9307      	str	r3, [sp, #28]
 80091ec:	0030      	movs	r0, r6
 80091ee:	0039      	movs	r1, r7
 80091f0:	2300      	movs	r3, #0
 80091f2:	4dc4      	ldr	r5, [pc, #784]	; (8009504 <_strtod_l+0x91c>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	4214      	tst	r4, r2
 80091f8:	d004      	beq.n	8009204 <_strtod_l+0x61c>
 80091fa:	682a      	ldr	r2, [r5, #0]
 80091fc:	686b      	ldr	r3, [r5, #4]
 80091fe:	f7f8 fa37 	bl	8001670 <__aeabi_dmul>
 8009202:	2301      	movs	r3, #1
 8009204:	1064      	asrs	r4, r4, #1
 8009206:	3508      	adds	r5, #8
 8009208:	2c00      	cmp	r4, #0
 800920a:	d1f3      	bne.n	80091f4 <_strtod_l+0x60c>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <_strtod_l+0x62c>
 8009210:	0006      	movs	r6, r0
 8009212:	000f      	movs	r7, r1
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00f      	beq.n	800923a <_strtod_l+0x652>
 800921a:	236b      	movs	r3, #107	; 0x6b
 800921c:	007a      	lsls	r2, r7, #1
 800921e:	0d52      	lsrs	r2, r2, #21
 8009220:	0039      	movs	r1, r7
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	dd08      	ble.n	800923a <_strtod_l+0x652>
 8009228:	2b1f      	cmp	r3, #31
 800922a:	dc00      	bgt.n	800922e <_strtod_l+0x646>
 800922c:	e121      	b.n	8009472 <_strtod_l+0x88a>
 800922e:	2600      	movs	r6, #0
 8009230:	2b34      	cmp	r3, #52	; 0x34
 8009232:	dc00      	bgt.n	8009236 <_strtod_l+0x64e>
 8009234:	e116      	b.n	8009464 <_strtod_l+0x87c>
 8009236:	27dc      	movs	r7, #220	; 0xdc
 8009238:	04bf      	lsls	r7, r7, #18
 800923a:	2200      	movs	r2, #0
 800923c:	2300      	movs	r3, #0
 800923e:	0030      	movs	r0, r6
 8009240:	0039      	movs	r1, r7
 8009242:	f7f7 f903 	bl	800044c <__aeabi_dcmpeq>
 8009246:	2800      	cmp	r0, #0
 8009248:	d19f      	bne.n	800918a <_strtod_l+0x5a2>
 800924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	9804      	ldr	r0, [sp, #16]
 8009256:	f7ff f89f 	bl	8008398 <__s2b>
 800925a:	900d      	str	r0, [sp, #52]	; 0x34
 800925c:	2800      	cmp	r0, #0
 800925e:	d100      	bne.n	8009262 <_strtod_l+0x67a>
 8009260:	e720      	b.n	80090a4 <_strtod_l+0x4bc>
 8009262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009264:	9906      	ldr	r1, [sp, #24]
 8009266:	17da      	asrs	r2, r3, #31
 8009268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800926a:	1a5b      	subs	r3, r3, r1
 800926c:	401a      	ands	r2, r3
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	9215      	str	r2, [sp, #84]	; 0x54
 8009272:	43db      	mvns	r3, r3
 8009274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009276:	17db      	asrs	r3, r3, #31
 8009278:	401a      	ands	r2, r3
 800927a:	2300      	movs	r3, #0
 800927c:	9218      	str	r2, [sp, #96]	; 0x60
 800927e:	9305      	str	r3, [sp, #20]
 8009280:	9306      	str	r3, [sp, #24]
 8009282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009284:	9804      	ldr	r0, [sp, #16]
 8009286:	6859      	ldr	r1, [r3, #4]
 8009288:	f7fe ffda 	bl	8008240 <_Balloc>
 800928c:	9008      	str	r0, [sp, #32]
 800928e:	2800      	cmp	r0, #0
 8009290:	d100      	bne.n	8009294 <_strtod_l+0x6ac>
 8009292:	e70c      	b.n	80090ae <_strtod_l+0x4c6>
 8009294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009296:	300c      	adds	r0, #12
 8009298:	0019      	movs	r1, r3
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	310c      	adds	r1, #12
 800929e:	3202      	adds	r2, #2
 80092a0:	0092      	lsls	r2, r2, #2
 80092a2:	f000 fe4b 	bl	8009f3c <memcpy>
 80092a6:	ab1e      	add	r3, sp, #120	; 0x78
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	ab1d      	add	r3, sp, #116	; 0x74
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	0032      	movs	r2, r6
 80092b0:	003b      	movs	r3, r7
 80092b2:	9804      	ldr	r0, [sp, #16]
 80092b4:	9610      	str	r6, [sp, #64]	; 0x40
 80092b6:	9711      	str	r7, [sp, #68]	; 0x44
 80092b8:	f7ff fbb0 	bl	8008a1c <__d2b>
 80092bc:	901c      	str	r0, [sp, #112]	; 0x70
 80092be:	2800      	cmp	r0, #0
 80092c0:	d100      	bne.n	80092c4 <_strtod_l+0x6dc>
 80092c2:	e6f4      	b.n	80090ae <_strtod_l+0x4c6>
 80092c4:	2101      	movs	r1, #1
 80092c6:	9804      	ldr	r0, [sp, #16]
 80092c8:	f7ff f8fa 	bl	80084c0 <__i2b>
 80092cc:	9006      	str	r0, [sp, #24]
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d100      	bne.n	80092d4 <_strtod_l+0x6ec>
 80092d2:	e6ec      	b.n	80090ae <_strtod_l+0x4c6>
 80092d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80092da:	1ad4      	subs	r4, r2, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	db01      	blt.n	80092e4 <_strtod_l+0x6fc>
 80092e0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80092e2:	195d      	adds	r5, r3, r5
 80092e4:	9907      	ldr	r1, [sp, #28]
 80092e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80092e8:	1a5b      	subs	r3, r3, r1
 80092ea:	2136      	movs	r1, #54	; 0x36
 80092ec:	189b      	adds	r3, r3, r2
 80092ee:	1a8a      	subs	r2, r1, r2
 80092f0:	4985      	ldr	r1, [pc, #532]	; (8009508 <_strtod_l+0x920>)
 80092f2:	2001      	movs	r0, #1
 80092f4:	468c      	mov	ip, r1
 80092f6:	2100      	movs	r1, #0
 80092f8:	3b01      	subs	r3, #1
 80092fa:	9114      	str	r1, [sp, #80]	; 0x50
 80092fc:	9012      	str	r0, [sp, #72]	; 0x48
 80092fe:	4563      	cmp	r3, ip
 8009300:	da07      	bge.n	8009312 <_strtod_l+0x72a>
 8009302:	4661      	mov	r1, ip
 8009304:	1ac9      	subs	r1, r1, r3
 8009306:	1a52      	subs	r2, r2, r1
 8009308:	291f      	cmp	r1, #31
 800930a:	dd00      	ble.n	800930e <_strtod_l+0x726>
 800930c:	e0b6      	b.n	800947c <_strtod_l+0x894>
 800930e:	4088      	lsls	r0, r1
 8009310:	9012      	str	r0, [sp, #72]	; 0x48
 8009312:	18ab      	adds	r3, r5, r2
 8009314:	930c      	str	r3, [sp, #48]	; 0x30
 8009316:	18a4      	adds	r4, r4, r2
 8009318:	9b07      	ldr	r3, [sp, #28]
 800931a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800931c:	191c      	adds	r4, r3, r4
 800931e:	002b      	movs	r3, r5
 8009320:	4295      	cmp	r5, r2
 8009322:	dd00      	ble.n	8009326 <_strtod_l+0x73e>
 8009324:	0013      	movs	r3, r2
 8009326:	42a3      	cmp	r3, r4
 8009328:	dd00      	ble.n	800932c <_strtod_l+0x744>
 800932a:	0023      	movs	r3, r4
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd04      	ble.n	800933a <_strtod_l+0x752>
 8009330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009332:	1ae4      	subs	r4, r4, r3
 8009334:	1ad2      	subs	r2, r2, r3
 8009336:	920c      	str	r2, [sp, #48]	; 0x30
 8009338:	1aed      	subs	r5, r5, r3
 800933a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd17      	ble.n	8009370 <_strtod_l+0x788>
 8009340:	001a      	movs	r2, r3
 8009342:	9906      	ldr	r1, [sp, #24]
 8009344:	9804      	ldr	r0, [sp, #16]
 8009346:	f7ff f983 	bl	8008650 <__pow5mult>
 800934a:	9006      	str	r0, [sp, #24]
 800934c:	2800      	cmp	r0, #0
 800934e:	d100      	bne.n	8009352 <_strtod_l+0x76a>
 8009350:	e6ad      	b.n	80090ae <_strtod_l+0x4c6>
 8009352:	0001      	movs	r1, r0
 8009354:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009356:	9804      	ldr	r0, [sp, #16]
 8009358:	f7ff f8ca 	bl	80084f0 <__multiply>
 800935c:	900e      	str	r0, [sp, #56]	; 0x38
 800935e:	2800      	cmp	r0, #0
 8009360:	d100      	bne.n	8009364 <_strtod_l+0x77c>
 8009362:	e6a4      	b.n	80090ae <_strtod_l+0x4c6>
 8009364:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009366:	9804      	ldr	r0, [sp, #16]
 8009368:	f7fe ffae 	bl	80082c8 <_Bfree>
 800936c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800936e:	931c      	str	r3, [sp, #112]	; 0x70
 8009370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009372:	2b00      	cmp	r3, #0
 8009374:	dd00      	ble.n	8009378 <_strtod_l+0x790>
 8009376:	e087      	b.n	8009488 <_strtod_l+0x8a0>
 8009378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937a:	2b00      	cmp	r3, #0
 800937c:	dd08      	ble.n	8009390 <_strtod_l+0x7a8>
 800937e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009380:	9908      	ldr	r1, [sp, #32]
 8009382:	9804      	ldr	r0, [sp, #16]
 8009384:	f7ff f964 	bl	8008650 <__pow5mult>
 8009388:	9008      	str	r0, [sp, #32]
 800938a:	2800      	cmp	r0, #0
 800938c:	d100      	bne.n	8009390 <_strtod_l+0x7a8>
 800938e:	e68e      	b.n	80090ae <_strtod_l+0x4c6>
 8009390:	2c00      	cmp	r4, #0
 8009392:	dd08      	ble.n	80093a6 <_strtod_l+0x7be>
 8009394:	0022      	movs	r2, r4
 8009396:	9908      	ldr	r1, [sp, #32]
 8009398:	9804      	ldr	r0, [sp, #16]
 800939a:	f7ff f9b5 	bl	8008708 <__lshift>
 800939e:	9008      	str	r0, [sp, #32]
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d100      	bne.n	80093a6 <_strtod_l+0x7be>
 80093a4:	e683      	b.n	80090ae <_strtod_l+0x4c6>
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	dd08      	ble.n	80093bc <_strtod_l+0x7d4>
 80093aa:	002a      	movs	r2, r5
 80093ac:	9906      	ldr	r1, [sp, #24]
 80093ae:	9804      	ldr	r0, [sp, #16]
 80093b0:	f7ff f9aa 	bl	8008708 <__lshift>
 80093b4:	9006      	str	r0, [sp, #24]
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d100      	bne.n	80093bc <_strtod_l+0x7d4>
 80093ba:	e678      	b.n	80090ae <_strtod_l+0x4c6>
 80093bc:	9a08      	ldr	r2, [sp, #32]
 80093be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093c0:	9804      	ldr	r0, [sp, #16]
 80093c2:	f7ff fa2b 	bl	800881c <__mdiff>
 80093c6:	9005      	str	r0, [sp, #20]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d100      	bne.n	80093ce <_strtod_l+0x7e6>
 80093cc:	e66f      	b.n	80090ae <_strtod_l+0x4c6>
 80093ce:	2200      	movs	r2, #0
 80093d0:	68c3      	ldr	r3, [r0, #12]
 80093d2:	9906      	ldr	r1, [sp, #24]
 80093d4:	60c2      	str	r2, [r0, #12]
 80093d6:	930c      	str	r3, [sp, #48]	; 0x30
 80093d8:	f7ff fa04 	bl	80087e4 <__mcmp>
 80093dc:	2800      	cmp	r0, #0
 80093de:	da5d      	bge.n	800949c <_strtod_l+0x8b4>
 80093e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093e2:	4333      	orrs	r3, r6
 80093e4:	d000      	beq.n	80093e8 <_strtod_l+0x800>
 80093e6:	e088      	b.n	80094fa <_strtod_l+0x912>
 80093e8:	033b      	lsls	r3, r7, #12
 80093ea:	d000      	beq.n	80093ee <_strtod_l+0x806>
 80093ec:	e085      	b.n	80094fa <_strtod_l+0x912>
 80093ee:	22d6      	movs	r2, #214	; 0xd6
 80093f0:	4b46      	ldr	r3, [pc, #280]	; (800950c <_strtod_l+0x924>)
 80093f2:	04d2      	lsls	r2, r2, #19
 80093f4:	403b      	ands	r3, r7
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d97f      	bls.n	80094fa <_strtod_l+0x912>
 80093fa:	9b05      	ldr	r3, [sp, #20]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <_strtod_l+0x822>
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	2b01      	cmp	r3, #1
 8009408:	dd77      	ble.n	80094fa <_strtod_l+0x912>
 800940a:	9905      	ldr	r1, [sp, #20]
 800940c:	2201      	movs	r2, #1
 800940e:	9804      	ldr	r0, [sp, #16]
 8009410:	f7ff f97a 	bl	8008708 <__lshift>
 8009414:	9906      	ldr	r1, [sp, #24]
 8009416:	9005      	str	r0, [sp, #20]
 8009418:	f7ff f9e4 	bl	80087e4 <__mcmp>
 800941c:	2800      	cmp	r0, #0
 800941e:	dd6c      	ble.n	80094fa <_strtod_l+0x912>
 8009420:	9907      	ldr	r1, [sp, #28]
 8009422:	003b      	movs	r3, r7
 8009424:	4a39      	ldr	r2, [pc, #228]	; (800950c <_strtod_l+0x924>)
 8009426:	2900      	cmp	r1, #0
 8009428:	d100      	bne.n	800942c <_strtod_l+0x844>
 800942a:	e094      	b.n	8009556 <_strtod_l+0x96e>
 800942c:	0011      	movs	r1, r2
 800942e:	20d6      	movs	r0, #214	; 0xd6
 8009430:	4039      	ands	r1, r7
 8009432:	04c0      	lsls	r0, r0, #19
 8009434:	4281      	cmp	r1, r0
 8009436:	dd00      	ble.n	800943a <_strtod_l+0x852>
 8009438:	e08d      	b.n	8009556 <_strtod_l+0x96e>
 800943a:	23dc      	movs	r3, #220	; 0xdc
 800943c:	049b      	lsls	r3, r3, #18
 800943e:	4299      	cmp	r1, r3
 8009440:	dc00      	bgt.n	8009444 <_strtod_l+0x85c>
 8009442:	e6a7      	b.n	8009194 <_strtod_l+0x5ac>
 8009444:	0030      	movs	r0, r6
 8009446:	0039      	movs	r1, r7
 8009448:	4b31      	ldr	r3, [pc, #196]	; (8009510 <_strtod_l+0x928>)
 800944a:	2200      	movs	r2, #0
 800944c:	f7f8 f910 	bl	8001670 <__aeabi_dmul>
 8009450:	4b2e      	ldr	r3, [pc, #184]	; (800950c <_strtod_l+0x924>)
 8009452:	0006      	movs	r6, r0
 8009454:	000f      	movs	r7, r1
 8009456:	420b      	tst	r3, r1
 8009458:	d000      	beq.n	800945c <_strtod_l+0x874>
 800945a:	e631      	b.n	80090c0 <_strtod_l+0x4d8>
 800945c:	2322      	movs	r3, #34	; 0x22
 800945e:	9a04      	ldr	r2, [sp, #16]
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	e62d      	b.n	80090c0 <_strtod_l+0x4d8>
 8009464:	234b      	movs	r3, #75	; 0x4b
 8009466:	1a9a      	subs	r2, r3, r2
 8009468:	3b4c      	subs	r3, #76	; 0x4c
 800946a:	4093      	lsls	r3, r2
 800946c:	4019      	ands	r1, r3
 800946e:	000f      	movs	r7, r1
 8009470:	e6e3      	b.n	800923a <_strtod_l+0x652>
 8009472:	2201      	movs	r2, #1
 8009474:	4252      	negs	r2, r2
 8009476:	409a      	lsls	r2, r3
 8009478:	4016      	ands	r6, r2
 800947a:	e6de      	b.n	800923a <_strtod_l+0x652>
 800947c:	4925      	ldr	r1, [pc, #148]	; (8009514 <_strtod_l+0x92c>)
 800947e:	1acb      	subs	r3, r1, r3
 8009480:	0001      	movs	r1, r0
 8009482:	4099      	lsls	r1, r3
 8009484:	9114      	str	r1, [sp, #80]	; 0x50
 8009486:	e743      	b.n	8009310 <_strtod_l+0x728>
 8009488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800948a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800948c:	9804      	ldr	r0, [sp, #16]
 800948e:	f7ff f93b 	bl	8008708 <__lshift>
 8009492:	901c      	str	r0, [sp, #112]	; 0x70
 8009494:	2800      	cmp	r0, #0
 8009496:	d000      	beq.n	800949a <_strtod_l+0x8b2>
 8009498:	e76e      	b.n	8009378 <_strtod_l+0x790>
 800949a:	e608      	b.n	80090ae <_strtod_l+0x4c6>
 800949c:	970e      	str	r7, [sp, #56]	; 0x38
 800949e:	2800      	cmp	r0, #0
 80094a0:	d177      	bne.n	8009592 <_strtod_l+0x9aa>
 80094a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094a4:	033b      	lsls	r3, r7, #12
 80094a6:	0b1b      	lsrs	r3, r3, #12
 80094a8:	2a00      	cmp	r2, #0
 80094aa:	d039      	beq.n	8009520 <_strtod_l+0x938>
 80094ac:	4a1a      	ldr	r2, [pc, #104]	; (8009518 <_strtod_l+0x930>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d139      	bne.n	8009526 <_strtod_l+0x93e>
 80094b2:	2101      	movs	r1, #1
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	4249      	negs	r1, r1
 80094b8:	0032      	movs	r2, r6
 80094ba:	0008      	movs	r0, r1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <_strtod_l+0x8f0>
 80094c0:	24d4      	movs	r4, #212	; 0xd4
 80094c2:	4b12      	ldr	r3, [pc, #72]	; (800950c <_strtod_l+0x924>)
 80094c4:	0008      	movs	r0, r1
 80094c6:	403b      	ands	r3, r7
 80094c8:	04e4      	lsls	r4, r4, #19
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	d804      	bhi.n	80094d8 <_strtod_l+0x8f0>
 80094ce:	306c      	adds	r0, #108	; 0x6c
 80094d0:	0d1b      	lsrs	r3, r3, #20
 80094d2:	1ac3      	subs	r3, r0, r3
 80094d4:	4099      	lsls	r1, r3
 80094d6:	0008      	movs	r0, r1
 80094d8:	4282      	cmp	r2, r0
 80094da:	d124      	bne.n	8009526 <_strtod_l+0x93e>
 80094dc:	4b0f      	ldr	r3, [pc, #60]	; (800951c <_strtod_l+0x934>)
 80094de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80094e0:	4299      	cmp	r1, r3
 80094e2:	d102      	bne.n	80094ea <_strtod_l+0x902>
 80094e4:	3201      	adds	r2, #1
 80094e6:	d100      	bne.n	80094ea <_strtod_l+0x902>
 80094e8:	e5e1      	b.n	80090ae <_strtod_l+0x4c6>
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <_strtod_l+0x924>)
 80094ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ee:	2600      	movs	r6, #0
 80094f0:	401a      	ands	r2, r3
 80094f2:	0013      	movs	r3, r2
 80094f4:	2280      	movs	r2, #128	; 0x80
 80094f6:	0352      	lsls	r2, r2, #13
 80094f8:	189f      	adds	r7, r3, r2
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1a1      	bne.n	8009444 <_strtod_l+0x85c>
 8009500:	e5de      	b.n	80090c0 <_strtod_l+0x4d8>
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	0800ae48 	.word	0x0800ae48
 8009508:	fffffc02 	.word	0xfffffc02
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	39500000 	.word	0x39500000
 8009514:	fffffbe2 	.word	0xfffffbe2
 8009518:	000fffff 	.word	0x000fffff
 800951c:	7fefffff 	.word	0x7fefffff
 8009520:	4333      	orrs	r3, r6
 8009522:	d100      	bne.n	8009526 <_strtod_l+0x93e>
 8009524:	e77c      	b.n	8009420 <_strtod_l+0x838>
 8009526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01d      	beq.n	8009568 <_strtod_l+0x980>
 800952c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800952e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009530:	4213      	tst	r3, r2
 8009532:	d0e2      	beq.n	80094fa <_strtod_l+0x912>
 8009534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009536:	0030      	movs	r0, r6
 8009538:	0039      	movs	r1, r7
 800953a:	9a07      	ldr	r2, [sp, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d017      	beq.n	8009570 <_strtod_l+0x988>
 8009540:	f7ff fb3a 	bl	8008bb8 <sulp>
 8009544:	0002      	movs	r2, r0
 8009546:	000b      	movs	r3, r1
 8009548:	9810      	ldr	r0, [sp, #64]	; 0x40
 800954a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800954c:	f7f7 f936 	bl	80007bc <__aeabi_dadd>
 8009550:	0006      	movs	r6, r0
 8009552:	000f      	movs	r7, r1
 8009554:	e7d1      	b.n	80094fa <_strtod_l+0x912>
 8009556:	2601      	movs	r6, #1
 8009558:	4013      	ands	r3, r2
 800955a:	4a98      	ldr	r2, [pc, #608]	; (80097bc <_strtod_l+0xbd4>)
 800955c:	4276      	negs	r6, r6
 800955e:	189b      	adds	r3, r3, r2
 8009560:	4a97      	ldr	r2, [pc, #604]	; (80097c0 <_strtod_l+0xbd8>)
 8009562:	431a      	orrs	r2, r3
 8009564:	0017      	movs	r7, r2
 8009566:	e7c8      	b.n	80094fa <_strtod_l+0x912>
 8009568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800956a:	4233      	tst	r3, r6
 800956c:	d0c5      	beq.n	80094fa <_strtod_l+0x912>
 800956e:	e7e1      	b.n	8009534 <_strtod_l+0x94c>
 8009570:	f7ff fb22 	bl	8008bb8 <sulp>
 8009574:	0002      	movs	r2, r0
 8009576:	000b      	movs	r3, r1
 8009578:	9810      	ldr	r0, [sp, #64]	; 0x40
 800957a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800957c:	f7f8 fb3a 	bl	8001bf4 <__aeabi_dsub>
 8009580:	2200      	movs	r2, #0
 8009582:	2300      	movs	r3, #0
 8009584:	0006      	movs	r6, r0
 8009586:	000f      	movs	r7, r1
 8009588:	f7f6 ff60 	bl	800044c <__aeabi_dcmpeq>
 800958c:	2800      	cmp	r0, #0
 800958e:	d0b4      	beq.n	80094fa <_strtod_l+0x912>
 8009590:	e600      	b.n	8009194 <_strtod_l+0x5ac>
 8009592:	9906      	ldr	r1, [sp, #24]
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	f7ff faa1 	bl	8008adc <__ratio>
 800959a:	2380      	movs	r3, #128	; 0x80
 800959c:	2200      	movs	r2, #0
 800959e:	05db      	lsls	r3, r3, #23
 80095a0:	0004      	movs	r4, r0
 80095a2:	000d      	movs	r5, r1
 80095a4:	f7f6 ff62 	bl	800046c <__aeabi_dcmple>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d06d      	beq.n	8009688 <_strtod_l+0xaa0>
 80095ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d000      	beq.n	80095b4 <_strtod_l+0x9cc>
 80095b2:	e07e      	b.n	80096b2 <_strtod_l+0xaca>
 80095b4:	2e00      	cmp	r6, #0
 80095b6:	d158      	bne.n	800966a <_strtod_l+0xa82>
 80095b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ba:	031b      	lsls	r3, r3, #12
 80095bc:	d000      	beq.n	80095c0 <_strtod_l+0x9d8>
 80095be:	e07f      	b.n	80096c0 <_strtod_l+0xad8>
 80095c0:	2200      	movs	r2, #0
 80095c2:	0020      	movs	r0, r4
 80095c4:	0029      	movs	r1, r5
 80095c6:	4b7f      	ldr	r3, [pc, #508]	; (80097c4 <_strtod_l+0xbdc>)
 80095c8:	f7f6 ff46 	bl	8000458 <__aeabi_dcmplt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d158      	bne.n	8009682 <_strtod_l+0xa9a>
 80095d0:	0020      	movs	r0, r4
 80095d2:	0029      	movs	r1, r5
 80095d4:	2200      	movs	r2, #0
 80095d6:	4b7c      	ldr	r3, [pc, #496]	; (80097c8 <_strtod_l+0xbe0>)
 80095d8:	f7f8 f84a 	bl	8001670 <__aeabi_dmul>
 80095dc:	0004      	movs	r4, r0
 80095de:	000d      	movs	r5, r1
 80095e0:	2380      	movs	r3, #128	; 0x80
 80095e2:	061b      	lsls	r3, r3, #24
 80095e4:	940a      	str	r4, [sp, #40]	; 0x28
 80095e6:	18eb      	adds	r3, r5, r3
 80095e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ee:	9212      	str	r2, [sp, #72]	; 0x48
 80095f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80095f2:	4a76      	ldr	r2, [pc, #472]	; (80097cc <_strtod_l+0xbe4>)
 80095f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095f6:	4013      	ands	r3, r2
 80095f8:	9314      	str	r3, [sp, #80]	; 0x50
 80095fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095fc:	4b74      	ldr	r3, [pc, #464]	; (80097d0 <_strtod_l+0xbe8>)
 80095fe:	429a      	cmp	r2, r3
 8009600:	d000      	beq.n	8009604 <_strtod_l+0xa1c>
 8009602:	e091      	b.n	8009728 <_strtod_l+0xb40>
 8009604:	4a73      	ldr	r2, [pc, #460]	; (80097d4 <_strtod_l+0xbec>)
 8009606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009608:	4694      	mov	ip, r2
 800960a:	4463      	add	r3, ip
 800960c:	001f      	movs	r7, r3
 800960e:	0030      	movs	r0, r6
 8009610:	0019      	movs	r1, r3
 8009612:	f7ff f99b 	bl	800894c <__ulp>
 8009616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800961a:	f7f8 f829 	bl	8001670 <__aeabi_dmul>
 800961e:	0032      	movs	r2, r6
 8009620:	003b      	movs	r3, r7
 8009622:	f7f7 f8cb 	bl	80007bc <__aeabi_dadd>
 8009626:	4a69      	ldr	r2, [pc, #420]	; (80097cc <_strtod_l+0xbe4>)
 8009628:	4b6b      	ldr	r3, [pc, #428]	; (80097d8 <_strtod_l+0xbf0>)
 800962a:	0006      	movs	r6, r0
 800962c:	400a      	ands	r2, r1
 800962e:	429a      	cmp	r2, r3
 8009630:	d949      	bls.n	80096c6 <_strtod_l+0xade>
 8009632:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009634:	4b69      	ldr	r3, [pc, #420]	; (80097dc <_strtod_l+0xbf4>)
 8009636:	429a      	cmp	r2, r3
 8009638:	d103      	bne.n	8009642 <_strtod_l+0xa5a>
 800963a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963c:	3301      	adds	r3, #1
 800963e:	d100      	bne.n	8009642 <_strtod_l+0xa5a>
 8009640:	e535      	b.n	80090ae <_strtod_l+0x4c6>
 8009642:	2601      	movs	r6, #1
 8009644:	4f65      	ldr	r7, [pc, #404]	; (80097dc <_strtod_l+0xbf4>)
 8009646:	4276      	negs	r6, r6
 8009648:	991c      	ldr	r1, [sp, #112]	; 0x70
 800964a:	9804      	ldr	r0, [sp, #16]
 800964c:	f7fe fe3c 	bl	80082c8 <_Bfree>
 8009650:	9908      	ldr	r1, [sp, #32]
 8009652:	9804      	ldr	r0, [sp, #16]
 8009654:	f7fe fe38 	bl	80082c8 <_Bfree>
 8009658:	9906      	ldr	r1, [sp, #24]
 800965a:	9804      	ldr	r0, [sp, #16]
 800965c:	f7fe fe34 	bl	80082c8 <_Bfree>
 8009660:	9905      	ldr	r1, [sp, #20]
 8009662:	9804      	ldr	r0, [sp, #16]
 8009664:	f7fe fe30 	bl	80082c8 <_Bfree>
 8009668:	e60b      	b.n	8009282 <_strtod_l+0x69a>
 800966a:	2e01      	cmp	r6, #1
 800966c:	d103      	bne.n	8009676 <_strtod_l+0xa8e>
 800966e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d100      	bne.n	8009676 <_strtod_l+0xa8e>
 8009674:	e58e      	b.n	8009194 <_strtod_l+0x5ac>
 8009676:	2300      	movs	r3, #0
 8009678:	4c59      	ldr	r4, [pc, #356]	; (80097e0 <_strtod_l+0xbf8>)
 800967a:	930a      	str	r3, [sp, #40]	; 0x28
 800967c:	940b      	str	r4, [sp, #44]	; 0x2c
 800967e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009680:	e01c      	b.n	80096bc <_strtod_l+0xad4>
 8009682:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009684:	4d50      	ldr	r5, [pc, #320]	; (80097c8 <_strtod_l+0xbe0>)
 8009686:	e7ab      	b.n	80095e0 <_strtod_l+0x9f8>
 8009688:	2200      	movs	r2, #0
 800968a:	0020      	movs	r0, r4
 800968c:	0029      	movs	r1, r5
 800968e:	4b4e      	ldr	r3, [pc, #312]	; (80097c8 <_strtod_l+0xbe0>)
 8009690:	f7f7 ffee 	bl	8001670 <__aeabi_dmul>
 8009694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009696:	0004      	movs	r4, r0
 8009698:	000b      	movs	r3, r1
 800969a:	000d      	movs	r5, r1
 800969c:	2a00      	cmp	r2, #0
 800969e:	d104      	bne.n	80096aa <_strtod_l+0xac2>
 80096a0:	2280      	movs	r2, #128	; 0x80
 80096a2:	0612      	lsls	r2, r2, #24
 80096a4:	900a      	str	r0, [sp, #40]	; 0x28
 80096a6:	188b      	adds	r3, r1, r2
 80096a8:	e79e      	b.n	80095e8 <_strtod_l+0xa00>
 80096aa:	0002      	movs	r2, r0
 80096ac:	920a      	str	r2, [sp, #40]	; 0x28
 80096ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80096b0:	e79b      	b.n	80095ea <_strtod_l+0xa02>
 80096b2:	2300      	movs	r3, #0
 80096b4:	4c43      	ldr	r4, [pc, #268]	; (80097c4 <_strtod_l+0xbdc>)
 80096b6:	930a      	str	r3, [sp, #40]	; 0x28
 80096b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80096ba:	2400      	movs	r4, #0
 80096bc:	4d41      	ldr	r5, [pc, #260]	; (80097c4 <_strtod_l+0xbdc>)
 80096be:	e794      	b.n	80095ea <_strtod_l+0xa02>
 80096c0:	2300      	movs	r3, #0
 80096c2:	4c47      	ldr	r4, [pc, #284]	; (80097e0 <_strtod_l+0xbf8>)
 80096c4:	e7f7      	b.n	80096b6 <_strtod_l+0xace>
 80096c6:	23d4      	movs	r3, #212	; 0xd4
 80096c8:	049b      	lsls	r3, r3, #18
 80096ca:	18cf      	adds	r7, r1, r3
 80096cc:	9b07      	ldr	r3, [sp, #28]
 80096ce:	970e      	str	r7, [sp, #56]	; 0x38
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1b9      	bne.n	8009648 <_strtod_l+0xa60>
 80096d4:	4b3d      	ldr	r3, [pc, #244]	; (80097cc <_strtod_l+0xbe4>)
 80096d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096d8:	403b      	ands	r3, r7
 80096da:	429a      	cmp	r2, r3
 80096dc:	d1b4      	bne.n	8009648 <_strtod_l+0xa60>
 80096de:	0020      	movs	r0, r4
 80096e0:	0029      	movs	r1, r5
 80096e2:	f7f6 ff4d 	bl	8000580 <__aeabi_d2lz>
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_l2d>
 80096ea:	0002      	movs	r2, r0
 80096ec:	000b      	movs	r3, r1
 80096ee:	0020      	movs	r0, r4
 80096f0:	0029      	movs	r1, r5
 80096f2:	f7f8 fa7f 	bl	8001bf4 <__aeabi_dsub>
 80096f6:	033b      	lsls	r3, r7, #12
 80096f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096fa:	0b1b      	lsrs	r3, r3, #12
 80096fc:	4333      	orrs	r3, r6
 80096fe:	4313      	orrs	r3, r2
 8009700:	0004      	movs	r4, r0
 8009702:	000d      	movs	r5, r1
 8009704:	4a37      	ldr	r2, [pc, #220]	; (80097e4 <_strtod_l+0xbfc>)
 8009706:	2b00      	cmp	r3, #0
 8009708:	d054      	beq.n	80097b4 <_strtod_l+0xbcc>
 800970a:	4b37      	ldr	r3, [pc, #220]	; (80097e8 <_strtod_l+0xc00>)
 800970c:	f7f6 fea4 	bl	8000458 <__aeabi_dcmplt>
 8009710:	2800      	cmp	r0, #0
 8009712:	d000      	beq.n	8009716 <_strtod_l+0xb2e>
 8009714:	e4d4      	b.n	80090c0 <_strtod_l+0x4d8>
 8009716:	0020      	movs	r0, r4
 8009718:	0029      	movs	r1, r5
 800971a:	4a34      	ldr	r2, [pc, #208]	; (80097ec <_strtod_l+0xc04>)
 800971c:	4b2a      	ldr	r3, [pc, #168]	; (80097c8 <_strtod_l+0xbe0>)
 800971e:	f7f6 feaf 	bl	8000480 <__aeabi_dcmpgt>
 8009722:	2800      	cmp	r0, #0
 8009724:	d090      	beq.n	8009648 <_strtod_l+0xa60>
 8009726:	e4cb      	b.n	80090c0 <_strtod_l+0x4d8>
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d02b      	beq.n	8009786 <_strtod_l+0xb9e>
 800972e:	23d4      	movs	r3, #212	; 0xd4
 8009730:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009732:	04db      	lsls	r3, r3, #19
 8009734:	429a      	cmp	r2, r3
 8009736:	d826      	bhi.n	8009786 <_strtod_l+0xb9e>
 8009738:	0020      	movs	r0, r4
 800973a:	0029      	movs	r1, r5
 800973c:	4a2c      	ldr	r2, [pc, #176]	; (80097f0 <_strtod_l+0xc08>)
 800973e:	4b2d      	ldr	r3, [pc, #180]	; (80097f4 <_strtod_l+0xc0c>)
 8009740:	f7f6 fe94 	bl	800046c <__aeabi_dcmple>
 8009744:	2800      	cmp	r0, #0
 8009746:	d017      	beq.n	8009778 <_strtod_l+0xb90>
 8009748:	0020      	movs	r0, r4
 800974a:	0029      	movs	r1, r5
 800974c:	f7f6 fefa 	bl	8000544 <__aeabi_d2uiz>
 8009750:	2800      	cmp	r0, #0
 8009752:	d100      	bne.n	8009756 <_strtod_l+0xb6e>
 8009754:	3001      	adds	r0, #1
 8009756:	f7f8 fe53 	bl	8002400 <__aeabi_ui2d>
 800975a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800975c:	0004      	movs	r4, r0
 800975e:	000b      	movs	r3, r1
 8009760:	000d      	movs	r5, r1
 8009762:	2a00      	cmp	r2, #0
 8009764:	d122      	bne.n	80097ac <_strtod_l+0xbc4>
 8009766:	2280      	movs	r2, #128	; 0x80
 8009768:	0612      	lsls	r2, r2, #24
 800976a:	188b      	adds	r3, r1, r2
 800976c:	9016      	str	r0, [sp, #88]	; 0x58
 800976e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009770:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009774:	9212      	str	r2, [sp, #72]	; 0x48
 8009776:	9313      	str	r3, [sp, #76]	; 0x4c
 8009778:	22d6      	movs	r2, #214	; 0xd6
 800977a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800977c:	04d2      	lsls	r2, r2, #19
 800977e:	189b      	adds	r3, r3, r2
 8009780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	9313      	str	r3, [sp, #76]	; 0x4c
 8009786:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009788:	9911      	ldr	r1, [sp, #68]	; 0x44
 800978a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800978c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800978e:	f7ff f8dd 	bl	800894c <__ulp>
 8009792:	0002      	movs	r2, r0
 8009794:	000b      	movs	r3, r1
 8009796:	0030      	movs	r0, r6
 8009798:	0039      	movs	r1, r7
 800979a:	f7f7 ff69 	bl	8001670 <__aeabi_dmul>
 800979e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097a2:	f7f7 f80b 	bl	80007bc <__aeabi_dadd>
 80097a6:	0006      	movs	r6, r0
 80097a8:	000f      	movs	r7, r1
 80097aa:	e78f      	b.n	80096cc <_strtod_l+0xae4>
 80097ac:	0002      	movs	r2, r0
 80097ae:	9216      	str	r2, [sp, #88]	; 0x58
 80097b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80097b2:	e7dd      	b.n	8009770 <_strtod_l+0xb88>
 80097b4:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <_strtod_l+0xc10>)
 80097b6:	f7f6 fe4f 	bl	8000458 <__aeabi_dcmplt>
 80097ba:	e7b2      	b.n	8009722 <_strtod_l+0xb3a>
 80097bc:	fff00000 	.word	0xfff00000
 80097c0:	000fffff 	.word	0x000fffff
 80097c4:	3ff00000 	.word	0x3ff00000
 80097c8:	3fe00000 	.word	0x3fe00000
 80097cc:	7ff00000 	.word	0x7ff00000
 80097d0:	7fe00000 	.word	0x7fe00000
 80097d4:	fcb00000 	.word	0xfcb00000
 80097d8:	7c9fffff 	.word	0x7c9fffff
 80097dc:	7fefffff 	.word	0x7fefffff
 80097e0:	bff00000 	.word	0xbff00000
 80097e4:	94a03595 	.word	0x94a03595
 80097e8:	3fdfffff 	.word	0x3fdfffff
 80097ec:	35afe535 	.word	0x35afe535
 80097f0:	ffc00000 	.word	0xffc00000
 80097f4:	41dfffff 	.word	0x41dfffff
 80097f8:	3fcfffff 	.word	0x3fcfffff

080097fc <_strtod_r>:
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4b02      	ldr	r3, [pc, #8]	; (8009808 <_strtod_r+0xc>)
 8009800:	f7ff f9f2 	bl	8008be8 <_strtod_l>
 8009804:	bd10      	pop	{r4, pc}
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	20000068 	.word	0x20000068

0800980c <_strtol_l.constprop.0>:
 800980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980e:	b087      	sub	sp, #28
 8009810:	001e      	movs	r6, r3
 8009812:	9005      	str	r0, [sp, #20]
 8009814:	9101      	str	r1, [sp, #4]
 8009816:	9202      	str	r2, [sp, #8]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d048      	beq.n	80098ae <_strtol_l.constprop.0+0xa2>
 800981c:	000b      	movs	r3, r1
 800981e:	2e24      	cmp	r6, #36	; 0x24
 8009820:	d845      	bhi.n	80098ae <_strtol_l.constprop.0+0xa2>
 8009822:	4a3b      	ldr	r2, [pc, #236]	; (8009910 <_strtol_l.constprop.0+0x104>)
 8009824:	2108      	movs	r1, #8
 8009826:	4694      	mov	ip, r2
 8009828:	001a      	movs	r2, r3
 800982a:	4660      	mov	r0, ip
 800982c:	7814      	ldrb	r4, [r2, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	5d00      	ldrb	r0, [r0, r4]
 8009832:	001d      	movs	r5, r3
 8009834:	0007      	movs	r7, r0
 8009836:	400f      	ands	r7, r1
 8009838:	4208      	tst	r0, r1
 800983a:	d1f5      	bne.n	8009828 <_strtol_l.constprop.0+0x1c>
 800983c:	2c2d      	cmp	r4, #45	; 0x2d
 800983e:	d13d      	bne.n	80098bc <_strtol_l.constprop.0+0xb0>
 8009840:	2701      	movs	r7, #1
 8009842:	781c      	ldrb	r4, [r3, #0]
 8009844:	1c95      	adds	r5, r2, #2
 8009846:	2e00      	cmp	r6, #0
 8009848:	d05e      	beq.n	8009908 <_strtol_l.constprop.0+0xfc>
 800984a:	2e10      	cmp	r6, #16
 800984c:	d109      	bne.n	8009862 <_strtol_l.constprop.0+0x56>
 800984e:	2c30      	cmp	r4, #48	; 0x30
 8009850:	d107      	bne.n	8009862 <_strtol_l.constprop.0+0x56>
 8009852:	2220      	movs	r2, #32
 8009854:	782b      	ldrb	r3, [r5, #0]
 8009856:	4393      	bics	r3, r2
 8009858:	2b58      	cmp	r3, #88	; 0x58
 800985a:	d150      	bne.n	80098fe <_strtol_l.constprop.0+0xf2>
 800985c:	2610      	movs	r6, #16
 800985e:	786c      	ldrb	r4, [r5, #1]
 8009860:	3502      	adds	r5, #2
 8009862:	4b2c      	ldr	r3, [pc, #176]	; (8009914 <_strtol_l.constprop.0+0x108>)
 8009864:	0031      	movs	r1, r6
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	0018      	movs	r0, r3
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	f7f6 fcee 	bl	800024c <__aeabi_uidivmod>
 8009870:	2200      	movs	r2, #0
 8009872:	9104      	str	r1, [sp, #16]
 8009874:	2101      	movs	r1, #1
 8009876:	4684      	mov	ip, r0
 8009878:	0010      	movs	r0, r2
 800987a:	4249      	negs	r1, r1
 800987c:	0023      	movs	r3, r4
 800987e:	3b30      	subs	r3, #48	; 0x30
 8009880:	2b09      	cmp	r3, #9
 8009882:	d903      	bls.n	800988c <_strtol_l.constprop.0+0x80>
 8009884:	3b11      	subs	r3, #17
 8009886:	2b19      	cmp	r3, #25
 8009888:	d81d      	bhi.n	80098c6 <_strtol_l.constprop.0+0xba>
 800988a:	330a      	adds	r3, #10
 800988c:	429e      	cmp	r6, r3
 800988e:	dd1e      	ble.n	80098ce <_strtol_l.constprop.0+0xc2>
 8009890:	1c54      	adds	r4, r2, #1
 8009892:	d009      	beq.n	80098a8 <_strtol_l.constprop.0+0x9c>
 8009894:	000a      	movs	r2, r1
 8009896:	4584      	cmp	ip, r0
 8009898:	d306      	bcc.n	80098a8 <_strtol_l.constprop.0+0x9c>
 800989a:	d102      	bne.n	80098a2 <_strtol_l.constprop.0+0x96>
 800989c:	9c04      	ldr	r4, [sp, #16]
 800989e:	429c      	cmp	r4, r3
 80098a0:	db02      	blt.n	80098a8 <_strtol_l.constprop.0+0x9c>
 80098a2:	2201      	movs	r2, #1
 80098a4:	4370      	muls	r0, r6
 80098a6:	1818      	adds	r0, r3, r0
 80098a8:	782c      	ldrb	r4, [r5, #0]
 80098aa:	3501      	adds	r5, #1
 80098ac:	e7e6      	b.n	800987c <_strtol_l.constprop.0+0x70>
 80098ae:	f7fd fce5 	bl	800727c <__errno>
 80098b2:	2316      	movs	r3, #22
 80098b4:	6003      	str	r3, [r0, #0]
 80098b6:	2000      	movs	r0, #0
 80098b8:	b007      	add	sp, #28
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	2c2b      	cmp	r4, #43	; 0x2b
 80098be:	d1c2      	bne.n	8009846 <_strtol_l.constprop.0+0x3a>
 80098c0:	781c      	ldrb	r4, [r3, #0]
 80098c2:	1c95      	adds	r5, r2, #2
 80098c4:	e7bf      	b.n	8009846 <_strtol_l.constprop.0+0x3a>
 80098c6:	0023      	movs	r3, r4
 80098c8:	3b61      	subs	r3, #97	; 0x61
 80098ca:	2b19      	cmp	r3, #25
 80098cc:	d9dd      	bls.n	800988a <_strtol_l.constprop.0+0x7e>
 80098ce:	1c53      	adds	r3, r2, #1
 80098d0:	d109      	bne.n	80098e6 <_strtol_l.constprop.0+0xda>
 80098d2:	2322      	movs	r3, #34	; 0x22
 80098d4:	9a05      	ldr	r2, [sp, #20]
 80098d6:	9803      	ldr	r0, [sp, #12]
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	9b02      	ldr	r3, [sp, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0eb      	beq.n	80098b8 <_strtol_l.constprop.0+0xac>
 80098e0:	1e6b      	subs	r3, r5, #1
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	e007      	b.n	80098f6 <_strtol_l.constprop.0+0xea>
 80098e6:	2f00      	cmp	r7, #0
 80098e8:	d000      	beq.n	80098ec <_strtol_l.constprop.0+0xe0>
 80098ea:	4240      	negs	r0, r0
 80098ec:	9b02      	ldr	r3, [sp, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0e2      	beq.n	80098b8 <_strtol_l.constprop.0+0xac>
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	d1f4      	bne.n	80098e0 <_strtol_l.constprop.0+0xd4>
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	9a01      	ldr	r2, [sp, #4]
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e7dc      	b.n	80098b8 <_strtol_l.constprop.0+0xac>
 80098fe:	2430      	movs	r4, #48	; 0x30
 8009900:	2e00      	cmp	r6, #0
 8009902:	d1ae      	bne.n	8009862 <_strtol_l.constprop.0+0x56>
 8009904:	3608      	adds	r6, #8
 8009906:	e7ac      	b.n	8009862 <_strtol_l.constprop.0+0x56>
 8009908:	2c30      	cmp	r4, #48	; 0x30
 800990a:	d0a2      	beq.n	8009852 <_strtol_l.constprop.0+0x46>
 800990c:	260a      	movs	r6, #10
 800990e:	e7a8      	b.n	8009862 <_strtol_l.constprop.0+0x56>
 8009910:	0800ae71 	.word	0x0800ae71
 8009914:	7fffffff 	.word	0x7fffffff

08009918 <_strtol_r>:
 8009918:	b510      	push	{r4, lr}
 800991a:	f7ff ff77 	bl	800980c <_strtol_l.constprop.0>
 800991e:	bd10      	pop	{r4, pc}

08009920 <__ssputs_r>:
 8009920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009922:	b085      	sub	sp, #20
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	9203      	str	r2, [sp, #12]
 8009928:	688e      	ldr	r6, [r1, #8]
 800992a:	9a01      	ldr	r2, [sp, #4]
 800992c:	0007      	movs	r7, r0
 800992e:	000c      	movs	r4, r1
 8009930:	680b      	ldr	r3, [r1, #0]
 8009932:	4296      	cmp	r6, r2
 8009934:	d831      	bhi.n	800999a <__ssputs_r+0x7a>
 8009936:	898a      	ldrh	r2, [r1, #12]
 8009938:	2190      	movs	r1, #144	; 0x90
 800993a:	00c9      	lsls	r1, r1, #3
 800993c:	420a      	tst	r2, r1
 800993e:	d029      	beq.n	8009994 <__ssputs_r+0x74>
 8009940:	2003      	movs	r0, #3
 8009942:	6921      	ldr	r1, [r4, #16]
 8009944:	1a5b      	subs	r3, r3, r1
 8009946:	9302      	str	r3, [sp, #8]
 8009948:	6963      	ldr	r3, [r4, #20]
 800994a:	4343      	muls	r3, r0
 800994c:	0fdd      	lsrs	r5, r3, #31
 800994e:	18ed      	adds	r5, r5, r3
 8009950:	9b01      	ldr	r3, [sp, #4]
 8009952:	9802      	ldr	r0, [sp, #8]
 8009954:	3301      	adds	r3, #1
 8009956:	181b      	adds	r3, r3, r0
 8009958:	106d      	asrs	r5, r5, #1
 800995a:	42ab      	cmp	r3, r5
 800995c:	d900      	bls.n	8009960 <__ssputs_r+0x40>
 800995e:	001d      	movs	r5, r3
 8009960:	0552      	lsls	r2, r2, #21
 8009962:	d529      	bpl.n	80099b8 <__ssputs_r+0x98>
 8009964:	0029      	movs	r1, r5
 8009966:	0038      	movs	r0, r7
 8009968:	f7fe fbd8 	bl	800811c <_malloc_r>
 800996c:	1e06      	subs	r6, r0, #0
 800996e:	d02d      	beq.n	80099cc <__ssputs_r+0xac>
 8009970:	9a02      	ldr	r2, [sp, #8]
 8009972:	6921      	ldr	r1, [r4, #16]
 8009974:	f000 fae2 	bl	8009f3c <memcpy>
 8009978:	89a2      	ldrh	r2, [r4, #12]
 800997a:	4b19      	ldr	r3, [pc, #100]	; (80099e0 <__ssputs_r+0xc0>)
 800997c:	401a      	ands	r2, r3
 800997e:	2380      	movs	r3, #128	; 0x80
 8009980:	4313      	orrs	r3, r2
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	6126      	str	r6, [r4, #16]
 8009988:	18f6      	adds	r6, r6, r3
 800998a:	6026      	str	r6, [r4, #0]
 800998c:	6165      	str	r5, [r4, #20]
 800998e:	9e01      	ldr	r6, [sp, #4]
 8009990:	1aed      	subs	r5, r5, r3
 8009992:	60a5      	str	r5, [r4, #8]
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	429e      	cmp	r6, r3
 8009998:	d900      	bls.n	800999c <__ssputs_r+0x7c>
 800999a:	9e01      	ldr	r6, [sp, #4]
 800999c:	0032      	movs	r2, r6
 800999e:	9903      	ldr	r1, [sp, #12]
 80099a0:	6820      	ldr	r0, [r4, #0]
 80099a2:	f000 fa71 	bl	8009e88 <memmove>
 80099a6:	2000      	movs	r0, #0
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	1b9b      	subs	r3, r3, r6
 80099ac:	60a3      	str	r3, [r4, #8]
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	199b      	adds	r3, r3, r6
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	b005      	add	sp, #20
 80099b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b8:	002a      	movs	r2, r5
 80099ba:	0038      	movs	r0, r7
 80099bc:	f000 fe88 	bl	800a6d0 <_realloc_r>
 80099c0:	1e06      	subs	r6, r0, #0
 80099c2:	d1df      	bne.n	8009984 <__ssputs_r+0x64>
 80099c4:	0038      	movs	r0, r7
 80099c6:	6921      	ldr	r1, [r4, #16]
 80099c8:	f7fe fb32 	bl	8008030 <_free_r>
 80099cc:	230c      	movs	r3, #12
 80099ce:	2001      	movs	r0, #1
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	89a2      	ldrh	r2, [r4, #12]
 80099d4:	3334      	adds	r3, #52	; 0x34
 80099d6:	4313      	orrs	r3, r2
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	4240      	negs	r0, r0
 80099dc:	e7ea      	b.n	80099b4 <__ssputs_r+0x94>
 80099de:	46c0      	nop			; (mov r8, r8)
 80099e0:	fffffb7f 	.word	0xfffffb7f

080099e4 <_svfiprintf_r>:
 80099e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e6:	b0a1      	sub	sp, #132	; 0x84
 80099e8:	9003      	str	r0, [sp, #12]
 80099ea:	001d      	movs	r5, r3
 80099ec:	898b      	ldrh	r3, [r1, #12]
 80099ee:	000f      	movs	r7, r1
 80099f0:	0016      	movs	r6, r2
 80099f2:	061b      	lsls	r3, r3, #24
 80099f4:	d511      	bpl.n	8009a1a <_svfiprintf_r+0x36>
 80099f6:	690b      	ldr	r3, [r1, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10e      	bne.n	8009a1a <_svfiprintf_r+0x36>
 80099fc:	2140      	movs	r1, #64	; 0x40
 80099fe:	f7fe fb8d 	bl	800811c <_malloc_r>
 8009a02:	6038      	str	r0, [r7, #0]
 8009a04:	6138      	str	r0, [r7, #16]
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d105      	bne.n	8009a16 <_svfiprintf_r+0x32>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	9a03      	ldr	r2, [sp, #12]
 8009a0e:	3801      	subs	r0, #1
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	b021      	add	sp, #132	; 0x84
 8009a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a16:	2340      	movs	r3, #64	; 0x40
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	ac08      	add	r4, sp, #32
 8009a1e:	6163      	str	r3, [r4, #20]
 8009a20:	3320      	adds	r3, #32
 8009a22:	7663      	strb	r3, [r4, #25]
 8009a24:	3310      	adds	r3, #16
 8009a26:	76a3      	strb	r3, [r4, #26]
 8009a28:	9507      	str	r5, [sp, #28]
 8009a2a:	0035      	movs	r5, r6
 8009a2c:	782b      	ldrb	r3, [r5, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <_svfiprintf_r+0x52>
 8009a32:	2b25      	cmp	r3, #37	; 0x25
 8009a34:	d148      	bne.n	8009ac8 <_svfiprintf_r+0xe4>
 8009a36:	1bab      	subs	r3, r5, r6
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	42b5      	cmp	r5, r6
 8009a3c:	d00b      	beq.n	8009a56 <_svfiprintf_r+0x72>
 8009a3e:	0032      	movs	r2, r6
 8009a40:	0039      	movs	r1, r7
 8009a42:	9803      	ldr	r0, [sp, #12]
 8009a44:	f7ff ff6c 	bl	8009920 <__ssputs_r>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d100      	bne.n	8009a4e <_svfiprintf_r+0x6a>
 8009a4c:	e0af      	b.n	8009bae <_svfiprintf_r+0x1ca>
 8009a4e:	6963      	ldr	r3, [r4, #20]
 8009a50:	9a05      	ldr	r2, [sp, #20]
 8009a52:	189b      	adds	r3, r3, r2
 8009a54:	6163      	str	r3, [r4, #20]
 8009a56:	782b      	ldrb	r3, [r5, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d100      	bne.n	8009a5e <_svfiprintf_r+0x7a>
 8009a5c:	e0a7      	b.n	8009bae <_svfiprintf_r+0x1ca>
 8009a5e:	2201      	movs	r2, #1
 8009a60:	2300      	movs	r3, #0
 8009a62:	4252      	negs	r2, r2
 8009a64:	6062      	str	r2, [r4, #4]
 8009a66:	a904      	add	r1, sp, #16
 8009a68:	3254      	adds	r2, #84	; 0x54
 8009a6a:	1852      	adds	r2, r2, r1
 8009a6c:	1c6e      	adds	r6, r5, #1
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	60e3      	str	r3, [r4, #12]
 8009a72:	60a3      	str	r3, [r4, #8]
 8009a74:	7013      	strb	r3, [r2, #0]
 8009a76:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a78:	4b55      	ldr	r3, [pc, #340]	; (8009bd0 <_svfiprintf_r+0x1ec>)
 8009a7a:	2205      	movs	r2, #5
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	7831      	ldrb	r1, [r6, #0]
 8009a80:	9305      	str	r3, [sp, #20]
 8009a82:	f7fd fc28 	bl	80072d6 <memchr>
 8009a86:	1c75      	adds	r5, r6, #1
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d11f      	bne.n	8009acc <_svfiprintf_r+0xe8>
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	06d3      	lsls	r3, r2, #27
 8009a90:	d504      	bpl.n	8009a9c <_svfiprintf_r+0xb8>
 8009a92:	2353      	movs	r3, #83	; 0x53
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	185b      	adds	r3, r3, r1
 8009a98:	2120      	movs	r1, #32
 8009a9a:	7019      	strb	r1, [r3, #0]
 8009a9c:	0713      	lsls	r3, r2, #28
 8009a9e:	d504      	bpl.n	8009aaa <_svfiprintf_r+0xc6>
 8009aa0:	2353      	movs	r3, #83	; 0x53
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	185b      	adds	r3, r3, r1
 8009aa6:	212b      	movs	r1, #43	; 0x2b
 8009aa8:	7019      	strb	r1, [r3, #0]
 8009aaa:	7833      	ldrb	r3, [r6, #0]
 8009aac:	2b2a      	cmp	r3, #42	; 0x2a
 8009aae:	d016      	beq.n	8009ade <_svfiprintf_r+0xfa>
 8009ab0:	0035      	movs	r5, r6
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	200a      	movs	r0, #10
 8009ab6:	68e3      	ldr	r3, [r4, #12]
 8009ab8:	782a      	ldrb	r2, [r5, #0]
 8009aba:	1c6e      	adds	r6, r5, #1
 8009abc:	3a30      	subs	r2, #48	; 0x30
 8009abe:	2a09      	cmp	r2, #9
 8009ac0:	d94e      	bls.n	8009b60 <_svfiprintf_r+0x17c>
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	d111      	bne.n	8009aea <_svfiprintf_r+0x106>
 8009ac6:	e017      	b.n	8009af8 <_svfiprintf_r+0x114>
 8009ac8:	3501      	adds	r5, #1
 8009aca:	e7af      	b.n	8009a2c <_svfiprintf_r+0x48>
 8009acc:	9b05      	ldr	r3, [sp, #20]
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	1ac0      	subs	r0, r0, r3
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4083      	lsls	r3, r0
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	002e      	movs	r6, r5
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	e7cc      	b.n	8009a78 <_svfiprintf_r+0x94>
 8009ade:	9b07      	ldr	r3, [sp, #28]
 8009ae0:	1d19      	adds	r1, r3, #4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	9107      	str	r1, [sp, #28]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	db01      	blt.n	8009aee <_svfiprintf_r+0x10a>
 8009aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aec:	e004      	b.n	8009af8 <_svfiprintf_r+0x114>
 8009aee:	425b      	negs	r3, r3
 8009af0:	60e3      	str	r3, [r4, #12]
 8009af2:	2302      	movs	r3, #2
 8009af4:	4313      	orrs	r3, r2
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	782b      	ldrb	r3, [r5, #0]
 8009afa:	2b2e      	cmp	r3, #46	; 0x2e
 8009afc:	d10a      	bne.n	8009b14 <_svfiprintf_r+0x130>
 8009afe:	786b      	ldrb	r3, [r5, #1]
 8009b00:	2b2a      	cmp	r3, #42	; 0x2a
 8009b02:	d135      	bne.n	8009b70 <_svfiprintf_r+0x18c>
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	3502      	adds	r5, #2
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	9207      	str	r2, [sp, #28]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	db2b      	blt.n	8009b6a <_svfiprintf_r+0x186>
 8009b12:	9309      	str	r3, [sp, #36]	; 0x24
 8009b14:	4e2f      	ldr	r6, [pc, #188]	; (8009bd4 <_svfiprintf_r+0x1f0>)
 8009b16:	2203      	movs	r2, #3
 8009b18:	0030      	movs	r0, r6
 8009b1a:	7829      	ldrb	r1, [r5, #0]
 8009b1c:	f7fd fbdb 	bl	80072d6 <memchr>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d006      	beq.n	8009b32 <_svfiprintf_r+0x14e>
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	1b80      	subs	r0, r0, r6
 8009b28:	4083      	lsls	r3, r0
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	7829      	ldrb	r1, [r5, #0]
 8009b34:	2206      	movs	r2, #6
 8009b36:	4828      	ldr	r0, [pc, #160]	; (8009bd8 <_svfiprintf_r+0x1f4>)
 8009b38:	1c6e      	adds	r6, r5, #1
 8009b3a:	7621      	strb	r1, [r4, #24]
 8009b3c:	f7fd fbcb 	bl	80072d6 <memchr>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d03c      	beq.n	8009bbe <_svfiprintf_r+0x1da>
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <_svfiprintf_r+0x1f8>)
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d125      	bne.n	8009b96 <_svfiprintf_r+0x1b2>
 8009b4a:	2207      	movs	r2, #7
 8009b4c:	9b07      	ldr	r3, [sp, #28]
 8009b4e:	3307      	adds	r3, #7
 8009b50:	4393      	bics	r3, r2
 8009b52:	3308      	adds	r3, #8
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	6963      	ldr	r3, [r4, #20]
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	189b      	adds	r3, r3, r2
 8009b5c:	6163      	str	r3, [r4, #20]
 8009b5e:	e764      	b.n	8009a2a <_svfiprintf_r+0x46>
 8009b60:	4343      	muls	r3, r0
 8009b62:	0035      	movs	r5, r6
 8009b64:	2101      	movs	r1, #1
 8009b66:	189b      	adds	r3, r3, r2
 8009b68:	e7a6      	b.n	8009ab8 <_svfiprintf_r+0xd4>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	425b      	negs	r3, r3
 8009b6e:	e7d0      	b.n	8009b12 <_svfiprintf_r+0x12e>
 8009b70:	2300      	movs	r3, #0
 8009b72:	200a      	movs	r0, #10
 8009b74:	001a      	movs	r2, r3
 8009b76:	3501      	adds	r5, #1
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	7829      	ldrb	r1, [r5, #0]
 8009b7c:	1c6e      	adds	r6, r5, #1
 8009b7e:	3930      	subs	r1, #48	; 0x30
 8009b80:	2909      	cmp	r1, #9
 8009b82:	d903      	bls.n	8009b8c <_svfiprintf_r+0x1a8>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0c5      	beq.n	8009b14 <_svfiprintf_r+0x130>
 8009b88:	9209      	str	r2, [sp, #36]	; 0x24
 8009b8a:	e7c3      	b.n	8009b14 <_svfiprintf_r+0x130>
 8009b8c:	4342      	muls	r2, r0
 8009b8e:	0035      	movs	r5, r6
 8009b90:	2301      	movs	r3, #1
 8009b92:	1852      	adds	r2, r2, r1
 8009b94:	e7f1      	b.n	8009b7a <_svfiprintf_r+0x196>
 8009b96:	aa07      	add	r2, sp, #28
 8009b98:	9200      	str	r2, [sp, #0]
 8009b9a:	0021      	movs	r1, r4
 8009b9c:	003a      	movs	r2, r7
 8009b9e:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <_svfiprintf_r+0x1fc>)
 8009ba0:	9803      	ldr	r0, [sp, #12]
 8009ba2:	f7fc faf3 	bl	800618c <_printf_float>
 8009ba6:	9004      	str	r0, [sp, #16]
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	3301      	adds	r3, #1
 8009bac:	d1d3      	bne.n	8009b56 <_svfiprintf_r+0x172>
 8009bae:	89bb      	ldrh	r3, [r7, #12]
 8009bb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bb2:	065b      	lsls	r3, r3, #25
 8009bb4:	d400      	bmi.n	8009bb8 <_svfiprintf_r+0x1d4>
 8009bb6:	e72c      	b.n	8009a12 <_svfiprintf_r+0x2e>
 8009bb8:	2001      	movs	r0, #1
 8009bba:	4240      	negs	r0, r0
 8009bbc:	e729      	b.n	8009a12 <_svfiprintf_r+0x2e>
 8009bbe:	aa07      	add	r2, sp, #28
 8009bc0:	9200      	str	r2, [sp, #0]
 8009bc2:	0021      	movs	r1, r4
 8009bc4:	003a      	movs	r2, r7
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <_svfiprintf_r+0x1fc>)
 8009bc8:	9803      	ldr	r0, [sp, #12]
 8009bca:	f7fc fda5 	bl	8006718 <_printf_i>
 8009bce:	e7ea      	b.n	8009ba6 <_svfiprintf_r+0x1c2>
 8009bd0:	0800af71 	.word	0x0800af71
 8009bd4:	0800af77 	.word	0x0800af77
 8009bd8:	0800af7b 	.word	0x0800af7b
 8009bdc:	0800618d 	.word	0x0800618d
 8009be0:	08009921 	.word	0x08009921

08009be4 <__sflush_r>:
 8009be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009be6:	898b      	ldrh	r3, [r1, #12]
 8009be8:	0005      	movs	r5, r0
 8009bea:	000c      	movs	r4, r1
 8009bec:	071a      	lsls	r2, r3, #28
 8009bee:	d45c      	bmi.n	8009caa <__sflush_r+0xc6>
 8009bf0:	684a      	ldr	r2, [r1, #4]
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	dc04      	bgt.n	8009c00 <__sflush_r+0x1c>
 8009bf6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	dc01      	bgt.n	8009c00 <__sflush_r+0x1c>
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	d0fa      	beq.n	8009bfc <__sflush_r+0x18>
 8009c06:	2200      	movs	r2, #0
 8009c08:	2080      	movs	r0, #128	; 0x80
 8009c0a:	682e      	ldr	r6, [r5, #0]
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	001a      	movs	r2, r3
 8009c10:	0140      	lsls	r0, r0, #5
 8009c12:	6a21      	ldr	r1, [r4, #32]
 8009c14:	4002      	ands	r2, r0
 8009c16:	4203      	tst	r3, r0
 8009c18:	d034      	beq.n	8009c84 <__sflush_r+0xa0>
 8009c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	075b      	lsls	r3, r3, #29
 8009c20:	d506      	bpl.n	8009c30 <__sflush_r+0x4c>
 8009c22:	6863      	ldr	r3, [r4, #4]
 8009c24:	1ac0      	subs	r0, r0, r3
 8009c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <__sflush_r+0x4c>
 8009c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c2e:	1ac0      	subs	r0, r0, r3
 8009c30:	0002      	movs	r2, r0
 8009c32:	2300      	movs	r3, #0
 8009c34:	0028      	movs	r0, r5
 8009c36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009c38:	6a21      	ldr	r1, [r4, #32]
 8009c3a:	47b8      	blx	r7
 8009c3c:	89a2      	ldrh	r2, [r4, #12]
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d106      	bne.n	8009c50 <__sflush_r+0x6c>
 8009c42:	6829      	ldr	r1, [r5, #0]
 8009c44:	291d      	cmp	r1, #29
 8009c46:	d82c      	bhi.n	8009ca2 <__sflush_r+0xbe>
 8009c48:	4b2a      	ldr	r3, [pc, #168]	; (8009cf4 <__sflush_r+0x110>)
 8009c4a:	410b      	asrs	r3, r1
 8009c4c:	07db      	lsls	r3, r3, #31
 8009c4e:	d428      	bmi.n	8009ca2 <__sflush_r+0xbe>
 8009c50:	2300      	movs	r3, #0
 8009c52:	6063      	str	r3, [r4, #4]
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	04d2      	lsls	r2, r2, #19
 8009c5a:	d505      	bpl.n	8009c68 <__sflush_r+0x84>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <__sflush_r+0x82>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d100      	bne.n	8009c68 <__sflush_r+0x84>
 8009c66:	6560      	str	r0, [r4, #84]	; 0x54
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	602e      	str	r6, [r5, #0]
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d0c5      	beq.n	8009bfc <__sflush_r+0x18>
 8009c70:	0023      	movs	r3, r4
 8009c72:	3344      	adds	r3, #68	; 0x44
 8009c74:	4299      	cmp	r1, r3
 8009c76:	d002      	beq.n	8009c7e <__sflush_r+0x9a>
 8009c78:	0028      	movs	r0, r5
 8009c7a:	f7fe f9d9 	bl	8008030 <_free_r>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	6360      	str	r0, [r4, #52]	; 0x34
 8009c82:	e7bc      	b.n	8009bfe <__sflush_r+0x1a>
 8009c84:	2301      	movs	r3, #1
 8009c86:	0028      	movs	r0, r5
 8009c88:	47b8      	blx	r7
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	d1c6      	bne.n	8009c1c <__sflush_r+0x38>
 8009c8e:	682b      	ldr	r3, [r5, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0c3      	beq.n	8009c1c <__sflush_r+0x38>
 8009c94:	2b1d      	cmp	r3, #29
 8009c96:	d001      	beq.n	8009c9c <__sflush_r+0xb8>
 8009c98:	2b16      	cmp	r3, #22
 8009c9a:	d101      	bne.n	8009ca0 <__sflush_r+0xbc>
 8009c9c:	602e      	str	r6, [r5, #0]
 8009c9e:	e7ad      	b.n	8009bfc <__sflush_r+0x18>
 8009ca0:	89a2      	ldrh	r2, [r4, #12]
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	e7a9      	b.n	8009bfe <__sflush_r+0x1a>
 8009caa:	690e      	ldr	r6, [r1, #16]
 8009cac:	2e00      	cmp	r6, #0
 8009cae:	d0a5      	beq.n	8009bfc <__sflush_r+0x18>
 8009cb0:	680f      	ldr	r7, [r1, #0]
 8009cb2:	600e      	str	r6, [r1, #0]
 8009cb4:	1bba      	subs	r2, r7, r6
 8009cb6:	9201      	str	r2, [sp, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	079b      	lsls	r3, r3, #30
 8009cbc:	d100      	bne.n	8009cc0 <__sflush_r+0xdc>
 8009cbe:	694a      	ldr	r2, [r1, #20]
 8009cc0:	60a2      	str	r2, [r4, #8]
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd99      	ble.n	8009bfc <__sflush_r+0x18>
 8009cc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cca:	0032      	movs	r2, r6
 8009ccc:	001f      	movs	r7, r3
 8009cce:	0028      	movs	r0, r5
 8009cd0:	9b01      	ldr	r3, [sp, #4]
 8009cd2:	6a21      	ldr	r1, [r4, #32]
 8009cd4:	47b8      	blx	r7
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	dc06      	bgt.n	8009ce8 <__sflush_r+0x104>
 8009cda:	2340      	movs	r3, #64	; 0x40
 8009cdc:	2001      	movs	r0, #1
 8009cde:	89a2      	ldrh	r2, [r4, #12]
 8009ce0:	4240      	negs	r0, r0
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	e78a      	b.n	8009bfe <__sflush_r+0x1a>
 8009ce8:	9b01      	ldr	r3, [sp, #4]
 8009cea:	1836      	adds	r6, r6, r0
 8009cec:	1a1b      	subs	r3, r3, r0
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	e7e7      	b.n	8009cc2 <__sflush_r+0xde>
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	dfbffffe 	.word	0xdfbffffe

08009cf8 <_fflush_r>:
 8009cf8:	690b      	ldr	r3, [r1, #16]
 8009cfa:	b570      	push	{r4, r5, r6, lr}
 8009cfc:	0005      	movs	r5, r0
 8009cfe:	000c      	movs	r4, r1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <_fflush_r+0x12>
 8009d04:	2500      	movs	r5, #0
 8009d06:	0028      	movs	r0, r5
 8009d08:	bd70      	pop	{r4, r5, r6, pc}
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d004      	beq.n	8009d18 <_fflush_r+0x20>
 8009d0e:	6a03      	ldr	r3, [r0, #32]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <_fflush_r+0x20>
 8009d14:	f7fd f8a8 	bl	8006e68 <__sinit>
 8009d18:	220c      	movs	r2, #12
 8009d1a:	5ea3      	ldrsh	r3, [r4, r2]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0f1      	beq.n	8009d04 <_fflush_r+0xc>
 8009d20:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d22:	07d2      	lsls	r2, r2, #31
 8009d24:	d404      	bmi.n	8009d30 <_fflush_r+0x38>
 8009d26:	059b      	lsls	r3, r3, #22
 8009d28:	d402      	bmi.n	8009d30 <_fflush_r+0x38>
 8009d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d2c:	f7fd fad1 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8009d30:	0028      	movs	r0, r5
 8009d32:	0021      	movs	r1, r4
 8009d34:	f7ff ff56 	bl	8009be4 <__sflush_r>
 8009d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d3a:	0005      	movs	r5, r0
 8009d3c:	07db      	lsls	r3, r3, #31
 8009d3e:	d4e2      	bmi.n	8009d06 <_fflush_r+0xe>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	059b      	lsls	r3, r3, #22
 8009d44:	d4df      	bmi.n	8009d06 <_fflush_r+0xe>
 8009d46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d48:	f7fd fac4 	bl	80072d4 <__retarget_lock_release_recursive>
 8009d4c:	e7db      	b.n	8009d06 <_fflush_r+0xe>
	...

08009d50 <__swhatbuf_r>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	000e      	movs	r6, r1
 8009d54:	001d      	movs	r5, r3
 8009d56:	230e      	movs	r3, #14
 8009d58:	5ec9      	ldrsh	r1, [r1, r3]
 8009d5a:	0014      	movs	r4, r2
 8009d5c:	b096      	sub	sp, #88	; 0x58
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	da0c      	bge.n	8009d7c <__swhatbuf_r+0x2c>
 8009d62:	89b2      	ldrh	r2, [r6, #12]
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	0011      	movs	r1, r2
 8009d68:	4019      	ands	r1, r3
 8009d6a:	421a      	tst	r2, r3
 8009d6c:	d013      	beq.n	8009d96 <__swhatbuf_r+0x46>
 8009d6e:	2100      	movs	r1, #0
 8009d70:	3b40      	subs	r3, #64	; 0x40
 8009d72:	2000      	movs	r0, #0
 8009d74:	6029      	str	r1, [r5, #0]
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	b016      	add	sp, #88	; 0x58
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	466a      	mov	r2, sp
 8009d7e:	f000 f8a7 	bl	8009ed0 <_fstat_r>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	dbed      	blt.n	8009d62 <__swhatbuf_r+0x12>
 8009d86:	23f0      	movs	r3, #240	; 0xf0
 8009d88:	9901      	ldr	r1, [sp, #4]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	4019      	ands	r1, r3
 8009d8e:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <__swhatbuf_r+0x4c>)
 8009d90:	18c9      	adds	r1, r1, r3
 8009d92:	424b      	negs	r3, r1
 8009d94:	4159      	adcs	r1, r3
 8009d96:	2380      	movs	r3, #128	; 0x80
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	e7ea      	b.n	8009d72 <__swhatbuf_r+0x22>
 8009d9c:	ffffe000 	.word	0xffffe000

08009da0 <__smakebuf_r>:
 8009da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009da2:	2602      	movs	r6, #2
 8009da4:	898b      	ldrh	r3, [r1, #12]
 8009da6:	0005      	movs	r5, r0
 8009da8:	000c      	movs	r4, r1
 8009daa:	4233      	tst	r3, r6
 8009dac:	d006      	beq.n	8009dbc <__smakebuf_r+0x1c>
 8009dae:	0023      	movs	r3, r4
 8009db0:	3347      	adds	r3, #71	; 0x47
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	6123      	str	r3, [r4, #16]
 8009db6:	2301      	movs	r3, #1
 8009db8:	6163      	str	r3, [r4, #20]
 8009dba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009dbc:	466a      	mov	r2, sp
 8009dbe:	ab01      	add	r3, sp, #4
 8009dc0:	f7ff ffc6 	bl	8009d50 <__swhatbuf_r>
 8009dc4:	9900      	ldr	r1, [sp, #0]
 8009dc6:	0007      	movs	r7, r0
 8009dc8:	0028      	movs	r0, r5
 8009dca:	f7fe f9a7 	bl	800811c <_malloc_r>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d108      	bne.n	8009de4 <__smakebuf_r+0x44>
 8009dd2:	220c      	movs	r2, #12
 8009dd4:	5ea3      	ldrsh	r3, [r4, r2]
 8009dd6:	059a      	lsls	r2, r3, #22
 8009dd8:	d4ef      	bmi.n	8009dba <__smakebuf_r+0x1a>
 8009dda:	2203      	movs	r2, #3
 8009ddc:	4393      	bics	r3, r2
 8009dde:	431e      	orrs	r6, r3
 8009de0:	81a6      	strh	r6, [r4, #12]
 8009de2:	e7e4      	b.n	8009dae <__smakebuf_r+0xe>
 8009de4:	2380      	movs	r3, #128	; 0x80
 8009de6:	89a2      	ldrh	r2, [r4, #12]
 8009de8:	6020      	str	r0, [r4, #0]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	9b00      	ldr	r3, [sp, #0]
 8009df0:	6120      	str	r0, [r4, #16]
 8009df2:	6163      	str	r3, [r4, #20]
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00c      	beq.n	8009e14 <__smakebuf_r+0x74>
 8009dfa:	0028      	movs	r0, r5
 8009dfc:	230e      	movs	r3, #14
 8009dfe:	5ee1      	ldrsh	r1, [r4, r3]
 8009e00:	f000 f878 	bl	8009ef4 <_isatty_r>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d005      	beq.n	8009e14 <__smakebuf_r+0x74>
 8009e08:	2303      	movs	r3, #3
 8009e0a:	89a2      	ldrh	r2, [r4, #12]
 8009e0c:	439a      	bics	r2, r3
 8009e0e:	3b02      	subs	r3, #2
 8009e10:	4313      	orrs	r3, r2
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	433b      	orrs	r3, r7
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	e7ce      	b.n	8009dba <__smakebuf_r+0x1a>

08009e1c <_putc_r>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	0006      	movs	r6, r0
 8009e20:	000d      	movs	r5, r1
 8009e22:	0014      	movs	r4, r2
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d004      	beq.n	8009e32 <_putc_r+0x16>
 8009e28:	6a03      	ldr	r3, [r0, #32]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <_putc_r+0x16>
 8009e2e:	f7fd f81b 	bl	8006e68 <__sinit>
 8009e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e34:	07db      	lsls	r3, r3, #31
 8009e36:	d405      	bmi.n	8009e44 <_putc_r+0x28>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	059b      	lsls	r3, r3, #22
 8009e3c:	d402      	bmi.n	8009e44 <_putc_r+0x28>
 8009e3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e40:	f7fd fa47 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8009e44:	68a3      	ldr	r3, [r4, #8]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da05      	bge.n	8009e5a <_putc_r+0x3e>
 8009e4e:	69a2      	ldr	r2, [r4, #24]
 8009e50:	4293      	cmp	r3, r2
 8009e52:	db12      	blt.n	8009e7a <_putc_r+0x5e>
 8009e54:	b2eb      	uxtb	r3, r5
 8009e56:	2b0a      	cmp	r3, #10
 8009e58:	d00f      	beq.n	8009e7a <_putc_r+0x5e>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	6022      	str	r2, [r4, #0]
 8009e60:	701d      	strb	r5, [r3, #0]
 8009e62:	b2ed      	uxtb	r5, r5
 8009e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d405      	bmi.n	8009e76 <_putc_r+0x5a>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	059b      	lsls	r3, r3, #22
 8009e6e:	d402      	bmi.n	8009e76 <_putc_r+0x5a>
 8009e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e72:	f7fd fa2f 	bl	80072d4 <__retarget_lock_release_recursive>
 8009e76:	0028      	movs	r0, r5
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	0029      	movs	r1, r5
 8009e7c:	0022      	movs	r2, r4
 8009e7e:	0030      	movs	r0, r6
 8009e80:	f7fd f8fc 	bl	800707c <__swbuf_r>
 8009e84:	0005      	movs	r5, r0
 8009e86:	e7ed      	b.n	8009e64 <_putc_r+0x48>

08009e88 <memmove>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	4288      	cmp	r0, r1
 8009e8c:	d902      	bls.n	8009e94 <memmove+0xc>
 8009e8e:	188b      	adds	r3, r1, r2
 8009e90:	4298      	cmp	r0, r3
 8009e92:	d303      	bcc.n	8009e9c <memmove+0x14>
 8009e94:	2300      	movs	r3, #0
 8009e96:	e007      	b.n	8009ea8 <memmove+0x20>
 8009e98:	5c8b      	ldrb	r3, [r1, r2]
 8009e9a:	5483      	strb	r3, [r0, r2]
 8009e9c:	3a01      	subs	r2, #1
 8009e9e:	d2fb      	bcs.n	8009e98 <memmove+0x10>
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	5ccc      	ldrb	r4, [r1, r3]
 8009ea4:	54c4      	strb	r4, [r0, r3]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d1fa      	bne.n	8009ea2 <memmove+0x1a>
 8009eac:	e7f8      	b.n	8009ea0 <memmove+0x18>

08009eae <strncmp>:
 8009eae:	b530      	push	{r4, r5, lr}
 8009eb0:	0005      	movs	r5, r0
 8009eb2:	1e10      	subs	r0, r2, #0
 8009eb4:	d00b      	beq.n	8009ece <strncmp+0x20>
 8009eb6:	2400      	movs	r4, #0
 8009eb8:	3a01      	subs	r2, #1
 8009eba:	5d2b      	ldrb	r3, [r5, r4]
 8009ebc:	5d08      	ldrb	r0, [r1, r4]
 8009ebe:	4283      	cmp	r3, r0
 8009ec0:	d104      	bne.n	8009ecc <strncmp+0x1e>
 8009ec2:	42a2      	cmp	r2, r4
 8009ec4:	d002      	beq.n	8009ecc <strncmp+0x1e>
 8009ec6:	3401      	adds	r4, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f6      	bne.n	8009eba <strncmp+0xc>
 8009ecc:	1a18      	subs	r0, r3, r0
 8009ece:	bd30      	pop	{r4, r5, pc}

08009ed0 <_fstat_r>:
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	4d06      	ldr	r5, [pc, #24]	; (8009ef0 <_fstat_r+0x20>)
 8009ed6:	0004      	movs	r4, r0
 8009ed8:	0008      	movs	r0, r1
 8009eda:	0011      	movs	r1, r2
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	f7f9 f8ca 	bl	8003076 <_fstat>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d103      	bne.n	8009eee <_fstat_r+0x1e>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d000      	beq.n	8009eee <_fstat_r+0x1e>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	200004ec 	.word	0x200004ec

08009ef4 <_isatty_r>:
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	b570      	push	{r4, r5, r6, lr}
 8009ef8:	4d06      	ldr	r5, [pc, #24]	; (8009f14 <_isatty_r+0x20>)
 8009efa:	0004      	movs	r4, r0
 8009efc:	0008      	movs	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f9 f8c7 	bl	8003092 <_isatty>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d103      	bne.n	8009f10 <_isatty_r+0x1c>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d000      	beq.n	8009f10 <_isatty_r+0x1c>
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	200004ec 	.word	0x200004ec

08009f18 <_sbrk_r>:
 8009f18:	2300      	movs	r3, #0
 8009f1a:	b570      	push	{r4, r5, r6, lr}
 8009f1c:	4d06      	ldr	r5, [pc, #24]	; (8009f38 <_sbrk_r+0x20>)
 8009f1e:	0004      	movs	r4, r0
 8009f20:	0008      	movs	r0, r1
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	f7f9 f8ca 	bl	80030bc <_sbrk>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d103      	bne.n	8009f34 <_sbrk_r+0x1c>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d000      	beq.n	8009f34 <_sbrk_r+0x1c>
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	bd70      	pop	{r4, r5, r6, pc}
 8009f36:	46c0      	nop			; (mov r8, r8)
 8009f38:	200004ec 	.word	0x200004ec

08009f3c <memcpy>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d100      	bne.n	8009f46 <memcpy+0xa>
 8009f44:	bd10      	pop	{r4, pc}
 8009f46:	5ccc      	ldrb	r4, [r1, r3]
 8009f48:	54c4      	strb	r4, [r0, r3]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	e7f8      	b.n	8009f40 <memcpy+0x4>
	...

08009f50 <nan>:
 8009f50:	2000      	movs	r0, #0
 8009f52:	4901      	ldr	r1, [pc, #4]	; (8009f58 <nan+0x8>)
 8009f54:	4770      	bx	lr
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	7ff80000 	.word	0x7ff80000

08009f5c <__assert_func>:
 8009f5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f5e:	0014      	movs	r4, r2
 8009f60:	001a      	movs	r2, r3
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <__assert_func+0x2c>)
 8009f64:	0005      	movs	r5, r0
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	000e      	movs	r6, r1
 8009f6a:	68d8      	ldr	r0, [r3, #12]
 8009f6c:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <__assert_func+0x30>)
 8009f6e:	2c00      	cmp	r4, #0
 8009f70:	d101      	bne.n	8009f76 <__assert_func+0x1a>
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <__assert_func+0x34>)
 8009f74:	001c      	movs	r4, r3
 8009f76:	4907      	ldr	r1, [pc, #28]	; (8009f94 <__assert_func+0x38>)
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	9402      	str	r4, [sp, #8]
 8009f7c:	002b      	movs	r3, r5
 8009f7e:	9600      	str	r6, [sp, #0]
 8009f80:	f000 fbe2 	bl	800a748 <fiprintf>
 8009f84:	f000 fbf0 	bl	800a768 <abort>
 8009f88:	20000064 	.word	0x20000064
 8009f8c:	0800af8a 	.word	0x0800af8a
 8009f90:	0800afc5 	.word	0x0800afc5
 8009f94:	0800af97 	.word	0x0800af97

08009f98 <_calloc_r>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	0c0b      	lsrs	r3, r1, #16
 8009f9c:	0c15      	lsrs	r5, r2, #16
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d11e      	bne.n	8009fe0 <_calloc_r+0x48>
 8009fa2:	2d00      	cmp	r5, #0
 8009fa4:	d10c      	bne.n	8009fc0 <_calloc_r+0x28>
 8009fa6:	b289      	uxth	r1, r1
 8009fa8:	b294      	uxth	r4, r2
 8009faa:	434c      	muls	r4, r1
 8009fac:	0021      	movs	r1, r4
 8009fae:	f7fe f8b5 	bl	800811c <_malloc_r>
 8009fb2:	1e05      	subs	r5, r0, #0
 8009fb4:	d01b      	beq.n	8009fee <_calloc_r+0x56>
 8009fb6:	0022      	movs	r2, r4
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f7fd f905 	bl	80071c8 <memset>
 8009fbe:	e016      	b.n	8009fee <_calloc_r+0x56>
 8009fc0:	1c2b      	adds	r3, r5, #0
 8009fc2:	1c0c      	adds	r4, r1, #0
 8009fc4:	b289      	uxth	r1, r1
 8009fc6:	b292      	uxth	r2, r2
 8009fc8:	434a      	muls	r2, r1
 8009fca:	b2a1      	uxth	r1, r4
 8009fcc:	b29c      	uxth	r4, r3
 8009fce:	434c      	muls	r4, r1
 8009fd0:	0c13      	lsrs	r3, r2, #16
 8009fd2:	18e4      	adds	r4, r4, r3
 8009fd4:	0c23      	lsrs	r3, r4, #16
 8009fd6:	d107      	bne.n	8009fe8 <_calloc_r+0x50>
 8009fd8:	0424      	lsls	r4, r4, #16
 8009fda:	b292      	uxth	r2, r2
 8009fdc:	4314      	orrs	r4, r2
 8009fde:	e7e5      	b.n	8009fac <_calloc_r+0x14>
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	d101      	bne.n	8009fe8 <_calloc_r+0x50>
 8009fe4:	1c14      	adds	r4, r2, #0
 8009fe6:	e7ed      	b.n	8009fc4 <_calloc_r+0x2c>
 8009fe8:	230c      	movs	r3, #12
 8009fea:	2500      	movs	r5, #0
 8009fec:	6003      	str	r3, [r0, #0]
 8009fee:	0028      	movs	r0, r5
 8009ff0:	bd70      	pop	{r4, r5, r6, pc}

08009ff2 <rshift>:
 8009ff2:	0002      	movs	r2, r0
 8009ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ff6:	6904      	ldr	r4, [r0, #16]
 8009ff8:	114b      	asrs	r3, r1, #5
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	3214      	adds	r2, #20
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	114d      	asrs	r5, r1, #5
 800a002:	0013      	movs	r3, r2
 800a004:	42ac      	cmp	r4, r5
 800a006:	dd32      	ble.n	800a06e <rshift+0x7c>
 800a008:	261f      	movs	r6, #31
 800a00a:	000f      	movs	r7, r1
 800a00c:	114b      	asrs	r3, r1, #5
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	00a5      	lsls	r5, r4, #2
 800a012:	18d3      	adds	r3, r2, r3
 800a014:	4037      	ands	r7, r6
 800a016:	1955      	adds	r5, r2, r5
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	9701      	str	r7, [sp, #4]
 800a01c:	4231      	tst	r1, r6
 800a01e:	d10d      	bne.n	800a03c <rshift+0x4a>
 800a020:	0016      	movs	r6, r2
 800a022:	0019      	movs	r1, r3
 800a024:	428d      	cmp	r5, r1
 800a026:	d836      	bhi.n	800a096 <rshift+0xa4>
 800a028:	9900      	ldr	r1, [sp, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	3903      	subs	r1, #3
 800a02e:	428d      	cmp	r5, r1
 800a030:	d302      	bcc.n	800a038 <rshift+0x46>
 800a032:	9b02      	ldr	r3, [sp, #8]
 800a034:	1ae4      	subs	r4, r4, r3
 800a036:	00a3      	lsls	r3, r4, #2
 800a038:	18d3      	adds	r3, r2, r3
 800a03a:	e018      	b.n	800a06e <rshift+0x7c>
 800a03c:	2120      	movs	r1, #32
 800a03e:	9e01      	ldr	r6, [sp, #4]
 800a040:	9f01      	ldr	r7, [sp, #4]
 800a042:	1b89      	subs	r1, r1, r6
 800a044:	9e00      	ldr	r6, [sp, #0]
 800a046:	9103      	str	r1, [sp, #12]
 800a048:	ce02      	ldmia	r6!, {r1}
 800a04a:	4694      	mov	ip, r2
 800a04c:	40f9      	lsrs	r1, r7
 800a04e:	42b5      	cmp	r5, r6
 800a050:	d816      	bhi.n	800a080 <rshift+0x8e>
 800a052:	9e00      	ldr	r6, [sp, #0]
 800a054:	2300      	movs	r3, #0
 800a056:	3601      	adds	r6, #1
 800a058:	42b5      	cmp	r5, r6
 800a05a:	d303      	bcc.n	800a064 <rshift+0x72>
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	1ae3      	subs	r3, r4, r3
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	3b04      	subs	r3, #4
 800a064:	18d3      	adds	r3, r2, r3
 800a066:	6019      	str	r1, [r3, #0]
 800a068:	2900      	cmp	r1, #0
 800a06a:	d000      	beq.n	800a06e <rshift+0x7c>
 800a06c:	3304      	adds	r3, #4
 800a06e:	1a99      	subs	r1, r3, r2
 800a070:	1089      	asrs	r1, r1, #2
 800a072:	6101      	str	r1, [r0, #16]
 800a074:	4293      	cmp	r3, r2
 800a076:	d101      	bne.n	800a07c <rshift+0x8a>
 800a078:	2300      	movs	r3, #0
 800a07a:	6143      	str	r3, [r0, #20]
 800a07c:	b005      	add	sp, #20
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a080:	6837      	ldr	r7, [r6, #0]
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	409f      	lsls	r7, r3
 800a086:	430f      	orrs	r7, r1
 800a088:	4661      	mov	r1, ip
 800a08a:	c180      	stmia	r1!, {r7}
 800a08c:	468c      	mov	ip, r1
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	ce02      	ldmia	r6!, {r1}
 800a092:	40d9      	lsrs	r1, r3
 800a094:	e7db      	b.n	800a04e <rshift+0x5c>
 800a096:	c980      	ldmia	r1!, {r7}
 800a098:	c680      	stmia	r6!, {r7}
 800a09a:	e7c3      	b.n	800a024 <rshift+0x32>

0800a09c <__hexdig_fun>:
 800a09c:	0002      	movs	r2, r0
 800a09e:	3a30      	subs	r2, #48	; 0x30
 800a0a0:	0003      	movs	r3, r0
 800a0a2:	2a09      	cmp	r2, #9
 800a0a4:	d802      	bhi.n	800a0ac <__hexdig_fun+0x10>
 800a0a6:	3b20      	subs	r3, #32
 800a0a8:	b2d8      	uxtb	r0, r3
 800a0aa:	4770      	bx	lr
 800a0ac:	0002      	movs	r2, r0
 800a0ae:	3a61      	subs	r2, #97	; 0x61
 800a0b0:	2a05      	cmp	r2, #5
 800a0b2:	d801      	bhi.n	800a0b8 <__hexdig_fun+0x1c>
 800a0b4:	3b47      	subs	r3, #71	; 0x47
 800a0b6:	e7f7      	b.n	800a0a8 <__hexdig_fun+0xc>
 800a0b8:	001a      	movs	r2, r3
 800a0ba:	3a41      	subs	r2, #65	; 0x41
 800a0bc:	2000      	movs	r0, #0
 800a0be:	2a05      	cmp	r2, #5
 800a0c0:	d8f3      	bhi.n	800a0aa <__hexdig_fun+0xe>
 800a0c2:	3b27      	subs	r3, #39	; 0x27
 800a0c4:	e7f0      	b.n	800a0a8 <__hexdig_fun+0xc>
	...

0800a0c8 <__gethex>:
 800a0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ca:	b089      	sub	sp, #36	; 0x24
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	9201      	str	r2, [sp, #4]
 800a0d2:	680a      	ldr	r2, [r1, #0]
 800a0d4:	425b      	negs	r3, r3
 800a0d6:	9003      	str	r0, [sp, #12]
 800a0d8:	9106      	str	r1, [sp, #24]
 800a0da:	1c96      	adds	r6, r2, #2
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	199a      	adds	r2, r3, r6
 800a0e0:	9600      	str	r6, [sp, #0]
 800a0e2:	9205      	str	r2, [sp, #20]
 800a0e4:	9a00      	ldr	r2, [sp, #0]
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	7810      	ldrb	r0, [r2, #0]
 800a0ea:	2830      	cmp	r0, #48	; 0x30
 800a0ec:	d0f7      	beq.n	800a0de <__gethex+0x16>
 800a0ee:	f7ff ffd5 	bl	800a09c <__hexdig_fun>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	001d      	movs	r5, r3
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	4298      	cmp	r0, r3
 800a0fa:	d11d      	bne.n	800a138 <__gethex+0x70>
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	49a6      	ldr	r1, [pc, #664]	; (800a398 <__gethex+0x2d0>)
 800a100:	9800      	ldr	r0, [sp, #0]
 800a102:	f7ff fed4 	bl	8009eae <strncmp>
 800a106:	0007      	movs	r7, r0
 800a108:	42a8      	cmp	r0, r5
 800a10a:	d169      	bne.n	800a1e0 <__gethex+0x118>
 800a10c:	9b00      	ldr	r3, [sp, #0]
 800a10e:	0034      	movs	r4, r6
 800a110:	7858      	ldrb	r0, [r3, #1]
 800a112:	f7ff ffc3 	bl	800a09c <__hexdig_fun>
 800a116:	2301      	movs	r3, #1
 800a118:	9302      	str	r3, [sp, #8]
 800a11a:	42a8      	cmp	r0, r5
 800a11c:	d02f      	beq.n	800a17e <__gethex+0xb6>
 800a11e:	9600      	str	r6, [sp, #0]
 800a120:	9b00      	ldr	r3, [sp, #0]
 800a122:	7818      	ldrb	r0, [r3, #0]
 800a124:	2830      	cmp	r0, #48	; 0x30
 800a126:	d009      	beq.n	800a13c <__gethex+0x74>
 800a128:	f7ff ffb8 	bl	800a09c <__hexdig_fun>
 800a12c:	4242      	negs	r2, r0
 800a12e:	4142      	adcs	r2, r0
 800a130:	2301      	movs	r3, #1
 800a132:	0035      	movs	r5, r6
 800a134:	9202      	str	r2, [sp, #8]
 800a136:	9305      	str	r3, [sp, #20]
 800a138:	9c00      	ldr	r4, [sp, #0]
 800a13a:	e004      	b.n	800a146 <__gethex+0x7e>
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	3301      	adds	r3, #1
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	e7ed      	b.n	800a120 <__gethex+0x58>
 800a144:	3401      	adds	r4, #1
 800a146:	7820      	ldrb	r0, [r4, #0]
 800a148:	f7ff ffa8 	bl	800a09c <__hexdig_fun>
 800a14c:	1e07      	subs	r7, r0, #0
 800a14e:	d1f9      	bne.n	800a144 <__gethex+0x7c>
 800a150:	2201      	movs	r2, #1
 800a152:	0020      	movs	r0, r4
 800a154:	4990      	ldr	r1, [pc, #576]	; (800a398 <__gethex+0x2d0>)
 800a156:	f7ff feaa 	bl	8009eae <strncmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d10d      	bne.n	800a17a <__gethex+0xb2>
 800a15e:	2d00      	cmp	r5, #0
 800a160:	d106      	bne.n	800a170 <__gethex+0xa8>
 800a162:	3401      	adds	r4, #1
 800a164:	0025      	movs	r5, r4
 800a166:	7820      	ldrb	r0, [r4, #0]
 800a168:	f7ff ff98 	bl	800a09c <__hexdig_fun>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d102      	bne.n	800a176 <__gethex+0xae>
 800a170:	1b2d      	subs	r5, r5, r4
 800a172:	00af      	lsls	r7, r5, #2
 800a174:	e003      	b.n	800a17e <__gethex+0xb6>
 800a176:	3401      	adds	r4, #1
 800a178:	e7f5      	b.n	800a166 <__gethex+0x9e>
 800a17a:	2d00      	cmp	r5, #0
 800a17c:	d1f8      	bne.n	800a170 <__gethex+0xa8>
 800a17e:	2220      	movs	r2, #32
 800a180:	7823      	ldrb	r3, [r4, #0]
 800a182:	0026      	movs	r6, r4
 800a184:	4393      	bics	r3, r2
 800a186:	2b50      	cmp	r3, #80	; 0x50
 800a188:	d11d      	bne.n	800a1c6 <__gethex+0xfe>
 800a18a:	7863      	ldrb	r3, [r4, #1]
 800a18c:	2b2b      	cmp	r3, #43	; 0x2b
 800a18e:	d02c      	beq.n	800a1ea <__gethex+0x122>
 800a190:	2b2d      	cmp	r3, #45	; 0x2d
 800a192:	d02e      	beq.n	800a1f2 <__gethex+0x12a>
 800a194:	2300      	movs	r3, #0
 800a196:	1c66      	adds	r6, r4, #1
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	7830      	ldrb	r0, [r6, #0]
 800a19c:	f7ff ff7e 	bl	800a09c <__hexdig_fun>
 800a1a0:	1e43      	subs	r3, r0, #1
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b18      	cmp	r3, #24
 800a1a6:	d82b      	bhi.n	800a200 <__gethex+0x138>
 800a1a8:	3810      	subs	r0, #16
 800a1aa:	0005      	movs	r5, r0
 800a1ac:	7870      	ldrb	r0, [r6, #1]
 800a1ae:	f7ff ff75 	bl	800a09c <__hexdig_fun>
 800a1b2:	1e43      	subs	r3, r0, #1
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	3601      	adds	r6, #1
 800a1b8:	2b18      	cmp	r3, #24
 800a1ba:	d91c      	bls.n	800a1f6 <__gethex+0x12e>
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d000      	beq.n	800a1c4 <__gethex+0xfc>
 800a1c2:	426d      	negs	r5, r5
 800a1c4:	197f      	adds	r7, r7, r5
 800a1c6:	9b06      	ldr	r3, [sp, #24]
 800a1c8:	601e      	str	r6, [r3, #0]
 800a1ca:	9b02      	ldr	r3, [sp, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d019      	beq.n	800a204 <__gethex+0x13c>
 800a1d0:	2600      	movs	r6, #0
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	42b3      	cmp	r3, r6
 800a1d6:	d100      	bne.n	800a1da <__gethex+0x112>
 800a1d8:	3606      	adds	r6, #6
 800a1da:	0030      	movs	r0, r6
 800a1dc:	b009      	add	sp, #36	; 0x24
 800a1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	2700      	movs	r7, #0
 800a1e4:	9c00      	ldr	r4, [sp, #0]
 800a1e6:	9302      	str	r3, [sp, #8]
 800a1e8:	e7c9      	b.n	800a17e <__gethex+0xb6>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	1ca6      	adds	r6, r4, #2
 800a1f0:	e7d3      	b.n	800a19a <__gethex+0xd2>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7fa      	b.n	800a1ec <__gethex+0x124>
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	435d      	muls	r5, r3
 800a1fa:	182d      	adds	r5, r5, r0
 800a1fc:	3d10      	subs	r5, #16
 800a1fe:	e7d5      	b.n	800a1ac <__gethex+0xe4>
 800a200:	0026      	movs	r6, r4
 800a202:	e7e0      	b.n	800a1c6 <__gethex+0xfe>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	9902      	ldr	r1, [sp, #8]
 800a208:	1ae3      	subs	r3, r4, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b07      	cmp	r3, #7
 800a20e:	dc0a      	bgt.n	800a226 <__gethex+0x15e>
 800a210:	9803      	ldr	r0, [sp, #12]
 800a212:	f7fe f815 	bl	8008240 <_Balloc>
 800a216:	1e05      	subs	r5, r0, #0
 800a218:	d108      	bne.n	800a22c <__gethex+0x164>
 800a21a:	002a      	movs	r2, r5
 800a21c:	21e4      	movs	r1, #228	; 0xe4
 800a21e:	4b5f      	ldr	r3, [pc, #380]	; (800a39c <__gethex+0x2d4>)
 800a220:	485f      	ldr	r0, [pc, #380]	; (800a3a0 <__gethex+0x2d8>)
 800a222:	f7ff fe9b 	bl	8009f5c <__assert_func>
 800a226:	3101      	adds	r1, #1
 800a228:	105b      	asrs	r3, r3, #1
 800a22a:	e7ef      	b.n	800a20c <__gethex+0x144>
 800a22c:	0003      	movs	r3, r0
 800a22e:	3314      	adds	r3, #20
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	9305      	str	r3, [sp, #20]
 800a234:	2300      	movs	r3, #0
 800a236:	001e      	movs	r6, r3
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d33f      	bcc.n	800a2c0 <__gethex+0x1f8>
 800a240:	9c05      	ldr	r4, [sp, #20]
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	c440      	stmia	r4!, {r6}
 800a246:	1ae4      	subs	r4, r4, r3
 800a248:	10a4      	asrs	r4, r4, #2
 800a24a:	0030      	movs	r0, r6
 800a24c:	612c      	str	r4, [r5, #16]
 800a24e:	f7fe f8ef 	bl	8008430 <__hi0bits>
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	0164      	lsls	r4, r4, #5
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	1a26      	subs	r6, r4, r0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	429e      	cmp	r6, r3
 800a25e:	dd51      	ble.n	800a304 <__gethex+0x23c>
 800a260:	1af6      	subs	r6, r6, r3
 800a262:	0031      	movs	r1, r6
 800a264:	0028      	movs	r0, r5
 800a266:	f7fe fc83 	bl	8008b70 <__any_on>
 800a26a:	1e04      	subs	r4, r0, #0
 800a26c:	d016      	beq.n	800a29c <__gethex+0x1d4>
 800a26e:	2401      	movs	r4, #1
 800a270:	231f      	movs	r3, #31
 800a272:	0020      	movs	r0, r4
 800a274:	1e72      	subs	r2, r6, #1
 800a276:	4013      	ands	r3, r2
 800a278:	4098      	lsls	r0, r3
 800a27a:	0003      	movs	r3, r0
 800a27c:	1151      	asrs	r1, r2, #5
 800a27e:	9802      	ldr	r0, [sp, #8]
 800a280:	0089      	lsls	r1, r1, #2
 800a282:	5809      	ldr	r1, [r1, r0]
 800a284:	4219      	tst	r1, r3
 800a286:	d009      	beq.n	800a29c <__gethex+0x1d4>
 800a288:	42a2      	cmp	r2, r4
 800a28a:	dd06      	ble.n	800a29a <__gethex+0x1d2>
 800a28c:	0028      	movs	r0, r5
 800a28e:	1eb1      	subs	r1, r6, #2
 800a290:	f7fe fc6e 	bl	8008b70 <__any_on>
 800a294:	3402      	adds	r4, #2
 800a296:	2800      	cmp	r0, #0
 800a298:	d100      	bne.n	800a29c <__gethex+0x1d4>
 800a29a:	2402      	movs	r4, #2
 800a29c:	0031      	movs	r1, r6
 800a29e:	0028      	movs	r0, r5
 800a2a0:	f7ff fea7 	bl	8009ff2 <rshift>
 800a2a4:	19bf      	adds	r7, r7, r6
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	42bb      	cmp	r3, r7
 800a2ac:	da3a      	bge.n	800a324 <__gethex+0x25c>
 800a2ae:	0029      	movs	r1, r5
 800a2b0:	9803      	ldr	r0, [sp, #12]
 800a2b2:	f7fe f809 	bl	80082c8 <_Bfree>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ba:	26a3      	movs	r6, #163	; 0xa3
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	e78c      	b.n	800a1da <__gethex+0x112>
 800a2c0:	3c01      	subs	r4, #1
 800a2c2:	7823      	ldrb	r3, [r4, #0]
 800a2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c6:	d012      	beq.n	800a2ee <__gethex+0x226>
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d104      	bne.n	800a2d8 <__gethex+0x210>
 800a2ce:	9b05      	ldr	r3, [sp, #20]
 800a2d0:	c340      	stmia	r3!, {r6}
 800a2d2:	2600      	movs	r6, #0
 800a2d4:	9305      	str	r3, [sp, #20]
 800a2d6:	9604      	str	r6, [sp, #16]
 800a2d8:	7820      	ldrb	r0, [r4, #0]
 800a2da:	f7ff fedf 	bl	800a09c <__hexdig_fun>
 800a2de:	230f      	movs	r3, #15
 800a2e0:	4018      	ands	r0, r3
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	4098      	lsls	r0, r3
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4306      	orrs	r6, r0
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	e7a5      	b.n	800a23a <__gethex+0x172>
 800a2ee:	9b00      	ldr	r3, [sp, #0]
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d8e9      	bhi.n	800a2c8 <__gethex+0x200>
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	0020      	movs	r0, r4
 800a2f8:	4927      	ldr	r1, [pc, #156]	; (800a398 <__gethex+0x2d0>)
 800a2fa:	f7ff fdd8 	bl	8009eae <strncmp>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d1e2      	bne.n	800a2c8 <__gethex+0x200>
 800a302:	e79a      	b.n	800a23a <__gethex+0x172>
 800a304:	9b00      	ldr	r3, [sp, #0]
 800a306:	2400      	movs	r4, #0
 800a308:	429e      	cmp	r6, r3
 800a30a:	dacc      	bge.n	800a2a6 <__gethex+0x1de>
 800a30c:	1b9e      	subs	r6, r3, r6
 800a30e:	0029      	movs	r1, r5
 800a310:	0032      	movs	r2, r6
 800a312:	9803      	ldr	r0, [sp, #12]
 800a314:	f7fe f9f8 	bl	8008708 <__lshift>
 800a318:	0003      	movs	r3, r0
 800a31a:	3314      	adds	r3, #20
 800a31c:	0005      	movs	r5, r0
 800a31e:	1bbf      	subs	r7, r7, r6
 800a320:	9302      	str	r3, [sp, #8]
 800a322:	e7c0      	b.n	800a2a6 <__gethex+0x1de>
 800a324:	9b01      	ldr	r3, [sp, #4]
 800a326:	685e      	ldr	r6, [r3, #4]
 800a328:	42be      	cmp	r6, r7
 800a32a:	dd70      	ble.n	800a40e <__gethex+0x346>
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	1bf6      	subs	r6, r6, r7
 800a330:	42b3      	cmp	r3, r6
 800a332:	dc37      	bgt.n	800a3a4 <__gethex+0x2dc>
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d024      	beq.n	800a386 <__gethex+0x2be>
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d026      	beq.n	800a38e <__gethex+0x2c6>
 800a340:	2b01      	cmp	r3, #1
 800a342:	d117      	bne.n	800a374 <__gethex+0x2ac>
 800a344:	9b00      	ldr	r3, [sp, #0]
 800a346:	42b3      	cmp	r3, r6
 800a348:	d114      	bne.n	800a374 <__gethex+0x2ac>
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d10b      	bne.n	800a366 <__gethex+0x29e>
 800a34e:	9b01      	ldr	r3, [sp, #4]
 800a350:	9a07      	ldr	r2, [sp, #28]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2662      	movs	r6, #98	; 0x62
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	2301      	movs	r3, #1
 800a35a:	9a02      	ldr	r2, [sp, #8]
 800a35c:	612b      	str	r3, [r5, #16]
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a362:	601d      	str	r5, [r3, #0]
 800a364:	e739      	b.n	800a1da <__gethex+0x112>
 800a366:	9900      	ldr	r1, [sp, #0]
 800a368:	0028      	movs	r0, r5
 800a36a:	3901      	subs	r1, #1
 800a36c:	f7fe fc00 	bl	8008b70 <__any_on>
 800a370:	2800      	cmp	r0, #0
 800a372:	d1ec      	bne.n	800a34e <__gethex+0x286>
 800a374:	0029      	movs	r1, r5
 800a376:	9803      	ldr	r0, [sp, #12]
 800a378:	f7fd ffa6 	bl	80082c8 <_Bfree>
 800a37c:	2300      	movs	r3, #0
 800a37e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a380:	2650      	movs	r6, #80	; 0x50
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	e729      	b.n	800a1da <__gethex+0x112>
 800a386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1f3      	bne.n	800a374 <__gethex+0x2ac>
 800a38c:	e7df      	b.n	800a34e <__gethex+0x286>
 800a38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1dc      	bne.n	800a34e <__gethex+0x286>
 800a394:	e7ee      	b.n	800a374 <__gethex+0x2ac>
 800a396:	46c0      	nop			; (mov r8, r8)
 800a398:	0800ae1c 	.word	0x0800ae1c
 800a39c:	0800acb1 	.word	0x0800acb1
 800a3a0:	0800afc6 	.word	0x0800afc6
 800a3a4:	1e77      	subs	r7, r6, #1
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	d12f      	bne.n	800a40a <__gethex+0x342>
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	d004      	beq.n	800a3b8 <__gethex+0x2f0>
 800a3ae:	0039      	movs	r1, r7
 800a3b0:	0028      	movs	r0, r5
 800a3b2:	f7fe fbdd 	bl	8008b70 <__any_on>
 800a3b6:	0004      	movs	r4, r0
 800a3b8:	231f      	movs	r3, #31
 800a3ba:	117a      	asrs	r2, r7, #5
 800a3bc:	401f      	ands	r7, r3
 800a3be:	3b1e      	subs	r3, #30
 800a3c0:	40bb      	lsls	r3, r7
 800a3c2:	9902      	ldr	r1, [sp, #8]
 800a3c4:	0092      	lsls	r2, r2, #2
 800a3c6:	5852      	ldr	r2, [r2, r1]
 800a3c8:	421a      	tst	r2, r3
 800a3ca:	d001      	beq.n	800a3d0 <__gethex+0x308>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	431c      	orrs	r4, r3
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	0031      	movs	r1, r6
 800a3d4:	1b9b      	subs	r3, r3, r6
 800a3d6:	2602      	movs	r6, #2
 800a3d8:	0028      	movs	r0, r5
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	f7ff fe09 	bl	8009ff2 <rshift>
 800a3e0:	9b01      	ldr	r3, [sp, #4]
 800a3e2:	685f      	ldr	r7, [r3, #4]
 800a3e4:	2c00      	cmp	r4, #0
 800a3e6:	d041      	beq.n	800a46c <__gethex+0x3a4>
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d010      	beq.n	800a412 <__gethex+0x34a>
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d012      	beq.n	800a41a <__gethex+0x352>
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d106      	bne.n	800a406 <__gethex+0x33e>
 800a3f8:	07a2      	lsls	r2, r4, #30
 800a3fa:	d504      	bpl.n	800a406 <__gethex+0x33e>
 800a3fc:	9a02      	ldr	r2, [sp, #8]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	4314      	orrs	r4, r2
 800a402:	421c      	tst	r4, r3
 800a404:	d10c      	bne.n	800a420 <__gethex+0x358>
 800a406:	2310      	movs	r3, #16
 800a408:	e02f      	b.n	800a46a <__gethex+0x3a2>
 800a40a:	2401      	movs	r4, #1
 800a40c:	e7d4      	b.n	800a3b8 <__gethex+0x2f0>
 800a40e:	2601      	movs	r6, #1
 800a410:	e7e8      	b.n	800a3e4 <__gethex+0x31c>
 800a412:	2301      	movs	r3, #1
 800a414:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a416:	1a9b      	subs	r3, r3, r2
 800a418:	930f      	str	r3, [sp, #60]	; 0x3c
 800a41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0f2      	beq.n	800a406 <__gethex+0x33e>
 800a420:	692b      	ldr	r3, [r5, #16]
 800a422:	2000      	movs	r0, #0
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	002b      	movs	r3, r5
 800a42c:	9a04      	ldr	r2, [sp, #16]
 800a42e:	3314      	adds	r3, #20
 800a430:	1899      	adds	r1, r3, r2
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	1c54      	adds	r4, r2, #1
 800a436:	d01e      	beq.n	800a476 <__gethex+0x3ae>
 800a438:	3201      	adds	r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	002b      	movs	r3, r5
 800a43e:	3314      	adds	r3, #20
 800a440:	2e02      	cmp	r6, #2
 800a442:	d141      	bne.n	800a4c8 <__gethex+0x400>
 800a444:	9a01      	ldr	r2, [sp, #4]
 800a446:	9900      	ldr	r1, [sp, #0]
 800a448:	6812      	ldr	r2, [r2, #0]
 800a44a:	3a01      	subs	r2, #1
 800a44c:	428a      	cmp	r2, r1
 800a44e:	d10b      	bne.n	800a468 <__gethex+0x3a0>
 800a450:	221f      	movs	r2, #31
 800a452:	9800      	ldr	r0, [sp, #0]
 800a454:	1149      	asrs	r1, r1, #5
 800a456:	4002      	ands	r2, r0
 800a458:	2001      	movs	r0, #1
 800a45a:	0004      	movs	r4, r0
 800a45c:	4094      	lsls	r4, r2
 800a45e:	0089      	lsls	r1, r1, #2
 800a460:	58cb      	ldr	r3, [r1, r3]
 800a462:	4223      	tst	r3, r4
 800a464:	d000      	beq.n	800a468 <__gethex+0x3a0>
 800a466:	2601      	movs	r6, #1
 800a468:	2320      	movs	r3, #32
 800a46a:	431e      	orrs	r6, r3
 800a46c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a46e:	601d      	str	r5, [r3, #0]
 800a470:	9b07      	ldr	r3, [sp, #28]
 800a472:	601f      	str	r7, [r3, #0]
 800a474:	e6b1      	b.n	800a1da <__gethex+0x112>
 800a476:	c301      	stmia	r3!, {r0}
 800a478:	4299      	cmp	r1, r3
 800a47a:	d8da      	bhi.n	800a432 <__gethex+0x36a>
 800a47c:	68ab      	ldr	r3, [r5, #8]
 800a47e:	9a02      	ldr	r2, [sp, #8]
 800a480:	429a      	cmp	r2, r3
 800a482:	db18      	blt.n	800a4b6 <__gethex+0x3ee>
 800a484:	6869      	ldr	r1, [r5, #4]
 800a486:	9803      	ldr	r0, [sp, #12]
 800a488:	3101      	adds	r1, #1
 800a48a:	f7fd fed9 	bl	8008240 <_Balloc>
 800a48e:	1e04      	subs	r4, r0, #0
 800a490:	d104      	bne.n	800a49c <__gethex+0x3d4>
 800a492:	0022      	movs	r2, r4
 800a494:	2184      	movs	r1, #132	; 0x84
 800a496:	4b1c      	ldr	r3, [pc, #112]	; (800a508 <__gethex+0x440>)
 800a498:	481c      	ldr	r0, [pc, #112]	; (800a50c <__gethex+0x444>)
 800a49a:	e6c2      	b.n	800a222 <__gethex+0x15a>
 800a49c:	0029      	movs	r1, r5
 800a49e:	692a      	ldr	r2, [r5, #16]
 800a4a0:	310c      	adds	r1, #12
 800a4a2:	3202      	adds	r2, #2
 800a4a4:	0092      	lsls	r2, r2, #2
 800a4a6:	300c      	adds	r0, #12
 800a4a8:	f7ff fd48 	bl	8009f3c <memcpy>
 800a4ac:	0029      	movs	r1, r5
 800a4ae:	9803      	ldr	r0, [sp, #12]
 800a4b0:	f7fd ff0a 	bl	80082c8 <_Bfree>
 800a4b4:	0025      	movs	r5, r4
 800a4b6:	692b      	ldr	r3, [r5, #16]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	612a      	str	r2, [r5, #16]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	3304      	adds	r3, #4
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	18eb      	adds	r3, r5, r3
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	e7b9      	b.n	800a43c <__gethex+0x374>
 800a4c8:	692a      	ldr	r2, [r5, #16]
 800a4ca:	9902      	ldr	r1, [sp, #8]
 800a4cc:	428a      	cmp	r2, r1
 800a4ce:	dd09      	ble.n	800a4e4 <__gethex+0x41c>
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	0028      	movs	r0, r5
 800a4d4:	f7ff fd8d 	bl	8009ff2 <rshift>
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	3701      	adds	r7, #1
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	42bb      	cmp	r3, r7
 800a4e0:	dac1      	bge.n	800a466 <__gethex+0x39e>
 800a4e2:	e6e4      	b.n	800a2ae <__gethex+0x1e6>
 800a4e4:	221f      	movs	r2, #31
 800a4e6:	9c00      	ldr	r4, [sp, #0]
 800a4e8:	9900      	ldr	r1, [sp, #0]
 800a4ea:	2601      	movs	r6, #1
 800a4ec:	4014      	ands	r4, r2
 800a4ee:	4211      	tst	r1, r2
 800a4f0:	d0ba      	beq.n	800a468 <__gethex+0x3a0>
 800a4f2:	9a04      	ldr	r2, [sp, #16]
 800a4f4:	189b      	adds	r3, r3, r2
 800a4f6:	3b04      	subs	r3, #4
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	f7fd ff99 	bl	8008430 <__hi0bits>
 800a4fe:	2320      	movs	r3, #32
 800a500:	1b1b      	subs	r3, r3, r4
 800a502:	4298      	cmp	r0, r3
 800a504:	dbe4      	blt.n	800a4d0 <__gethex+0x408>
 800a506:	e7af      	b.n	800a468 <__gethex+0x3a0>
 800a508:	0800acb1 	.word	0x0800acb1
 800a50c:	0800afc6 	.word	0x0800afc6

0800a510 <L_shift>:
 800a510:	2308      	movs	r3, #8
 800a512:	b570      	push	{r4, r5, r6, lr}
 800a514:	2520      	movs	r5, #32
 800a516:	1a9a      	subs	r2, r3, r2
 800a518:	0092      	lsls	r2, r2, #2
 800a51a:	1aad      	subs	r5, r5, r2
 800a51c:	6843      	ldr	r3, [r0, #4]
 800a51e:	6804      	ldr	r4, [r0, #0]
 800a520:	001e      	movs	r6, r3
 800a522:	40ae      	lsls	r6, r5
 800a524:	40d3      	lsrs	r3, r2
 800a526:	4334      	orrs	r4, r6
 800a528:	6004      	str	r4, [r0, #0]
 800a52a:	6043      	str	r3, [r0, #4]
 800a52c:	3004      	adds	r0, #4
 800a52e:	4288      	cmp	r0, r1
 800a530:	d3f4      	bcc.n	800a51c <L_shift+0xc>
 800a532:	bd70      	pop	{r4, r5, r6, pc}

0800a534 <__match>:
 800a534:	b530      	push	{r4, r5, lr}
 800a536:	6803      	ldr	r3, [r0, #0]
 800a538:	780c      	ldrb	r4, [r1, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	2c00      	cmp	r4, #0
 800a53e:	d102      	bne.n	800a546 <__match+0x12>
 800a540:	6003      	str	r3, [r0, #0]
 800a542:	2001      	movs	r0, #1
 800a544:	bd30      	pop	{r4, r5, pc}
 800a546:	781a      	ldrb	r2, [r3, #0]
 800a548:	0015      	movs	r5, r2
 800a54a:	3d41      	subs	r5, #65	; 0x41
 800a54c:	2d19      	cmp	r5, #25
 800a54e:	d800      	bhi.n	800a552 <__match+0x1e>
 800a550:	3220      	adds	r2, #32
 800a552:	3101      	adds	r1, #1
 800a554:	42a2      	cmp	r2, r4
 800a556:	d0ef      	beq.n	800a538 <__match+0x4>
 800a558:	2000      	movs	r0, #0
 800a55a:	e7f3      	b.n	800a544 <__match+0x10>

0800a55c <__hexnan>:
 800a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55e:	680b      	ldr	r3, [r1, #0]
 800a560:	b08b      	sub	sp, #44	; 0x2c
 800a562:	9201      	str	r2, [sp, #4]
 800a564:	9901      	ldr	r1, [sp, #4]
 800a566:	115a      	asrs	r2, r3, #5
 800a568:	0092      	lsls	r2, r2, #2
 800a56a:	188a      	adds	r2, r1, r2
 800a56c:	9202      	str	r2, [sp, #8]
 800a56e:	0019      	movs	r1, r3
 800a570:	221f      	movs	r2, #31
 800a572:	4011      	ands	r1, r2
 800a574:	9008      	str	r0, [sp, #32]
 800a576:	9106      	str	r1, [sp, #24]
 800a578:	4213      	tst	r3, r2
 800a57a:	d002      	beq.n	800a582 <__hexnan+0x26>
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	3304      	adds	r3, #4
 800a580:	9302      	str	r3, [sp, #8]
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	2500      	movs	r5, #0
 800a586:	1f1f      	subs	r7, r3, #4
 800a588:	003e      	movs	r6, r7
 800a58a:	003c      	movs	r4, r7
 800a58c:	9b08      	ldr	r3, [sp, #32]
 800a58e:	603d      	str	r5, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	9507      	str	r5, [sp, #28]
 800a594:	9305      	str	r3, [sp, #20]
 800a596:	9503      	str	r5, [sp, #12]
 800a598:	9b05      	ldr	r3, [sp, #20]
 800a59a:	3301      	adds	r3, #1
 800a59c:	9309      	str	r3, [sp, #36]	; 0x24
 800a59e:	9b05      	ldr	r3, [sp, #20]
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d028      	beq.n	800a5fa <__hexnan+0x9e>
 800a5a8:	9804      	ldr	r0, [sp, #16]
 800a5aa:	f7ff fd77 	bl	800a09c <__hexdig_fun>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d154      	bne.n	800a65c <__hexnan+0x100>
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d819      	bhi.n	800a5ec <__hexnan+0x90>
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	9a07      	ldr	r2, [sp, #28]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	dd12      	ble.n	800a5e6 <__hexnan+0x8a>
 800a5c0:	42b4      	cmp	r4, r6
 800a5c2:	d206      	bcs.n	800a5d2 <__hexnan+0x76>
 800a5c4:	2d07      	cmp	r5, #7
 800a5c6:	dc04      	bgt.n	800a5d2 <__hexnan+0x76>
 800a5c8:	002a      	movs	r2, r5
 800a5ca:	0031      	movs	r1, r6
 800a5cc:	0020      	movs	r0, r4
 800a5ce:	f7ff ff9f 	bl	800a510 <L_shift>
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	2508      	movs	r5, #8
 800a5d6:	429c      	cmp	r4, r3
 800a5d8:	d905      	bls.n	800a5e6 <__hexnan+0x8a>
 800a5da:	1f26      	subs	r6, r4, #4
 800a5dc:	2500      	movs	r5, #0
 800a5de:	0034      	movs	r4, r6
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	6035      	str	r5, [r6, #0]
 800a5e4:	9307      	str	r3, [sp, #28]
 800a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e8:	9305      	str	r3, [sp, #20]
 800a5ea:	e7d5      	b.n	800a598 <__hexnan+0x3c>
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	2b29      	cmp	r3, #41	; 0x29
 800a5f0:	d159      	bne.n	800a6a6 <__hexnan+0x14a>
 800a5f2:	9b05      	ldr	r3, [sp, #20]
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	3302      	adds	r3, #2
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d052      	beq.n	800a6a6 <__hexnan+0x14a>
 800a600:	42b4      	cmp	r4, r6
 800a602:	d206      	bcs.n	800a612 <__hexnan+0xb6>
 800a604:	2d07      	cmp	r5, #7
 800a606:	dc04      	bgt.n	800a612 <__hexnan+0xb6>
 800a608:	002a      	movs	r2, r5
 800a60a:	0031      	movs	r1, r6
 800a60c:	0020      	movs	r0, r4
 800a60e:	f7ff ff7f 	bl	800a510 <L_shift>
 800a612:	9b01      	ldr	r3, [sp, #4]
 800a614:	429c      	cmp	r4, r3
 800a616:	d935      	bls.n	800a684 <__hexnan+0x128>
 800a618:	001a      	movs	r2, r3
 800a61a:	0023      	movs	r3, r4
 800a61c:	cb02      	ldmia	r3!, {r1}
 800a61e:	c202      	stmia	r2!, {r1}
 800a620:	429f      	cmp	r7, r3
 800a622:	d2fb      	bcs.n	800a61c <__hexnan+0xc0>
 800a624:	9b02      	ldr	r3, [sp, #8]
 800a626:	1c62      	adds	r2, r4, #1
 800a628:	1ed9      	subs	r1, r3, #3
 800a62a:	2304      	movs	r3, #4
 800a62c:	4291      	cmp	r1, r2
 800a62e:	d305      	bcc.n	800a63c <__hexnan+0xe0>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	3b04      	subs	r3, #4
 800a634:	1b1b      	subs	r3, r3, r4
 800a636:	089b      	lsrs	r3, r3, #2
 800a638:	3301      	adds	r3, #1
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	9a01      	ldr	r2, [sp, #4]
 800a63e:	18d3      	adds	r3, r2, r3
 800a640:	2200      	movs	r2, #0
 800a642:	c304      	stmia	r3!, {r2}
 800a644:	429f      	cmp	r7, r3
 800a646:	d2fc      	bcs.n	800a642 <__hexnan+0xe6>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d104      	bne.n	800a658 <__hexnan+0xfc>
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	429f      	cmp	r7, r3
 800a652:	d126      	bne.n	800a6a2 <__hexnan+0x146>
 800a654:	2301      	movs	r3, #1
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	2005      	movs	r0, #5
 800a65a:	e025      	b.n	800a6a8 <__hexnan+0x14c>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	3501      	adds	r5, #1
 800a660:	3301      	adds	r3, #1
 800a662:	9303      	str	r3, [sp, #12]
 800a664:	2d08      	cmp	r5, #8
 800a666:	dd06      	ble.n	800a676 <__hexnan+0x11a>
 800a668:	9b01      	ldr	r3, [sp, #4]
 800a66a:	429c      	cmp	r4, r3
 800a66c:	d9bb      	bls.n	800a5e6 <__hexnan+0x8a>
 800a66e:	2300      	movs	r3, #0
 800a670:	2501      	movs	r5, #1
 800a672:	3c04      	subs	r4, #4
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	220f      	movs	r2, #15
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	4010      	ands	r0, r2
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	4303      	orrs	r3, r0
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	e7b0      	b.n	800a5e6 <__hexnan+0x8a>
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0de      	beq.n	800a648 <__hexnan+0xec>
 800a68a:	2320      	movs	r3, #32
 800a68c:	9a06      	ldr	r2, [sp, #24]
 800a68e:	9902      	ldr	r1, [sp, #8]
 800a690:	1a9b      	subs	r3, r3, r2
 800a692:	2201      	movs	r2, #1
 800a694:	4252      	negs	r2, r2
 800a696:	40da      	lsrs	r2, r3
 800a698:	3904      	subs	r1, #4
 800a69a:	680b      	ldr	r3, [r1, #0]
 800a69c:	4013      	ands	r3, r2
 800a69e:	600b      	str	r3, [r1, #0]
 800a6a0:	e7d2      	b.n	800a648 <__hexnan+0xec>
 800a6a2:	3f04      	subs	r7, #4
 800a6a4:	e7d0      	b.n	800a648 <__hexnan+0xec>
 800a6a6:	2004      	movs	r0, #4
 800a6a8:	b00b      	add	sp, #44	; 0x2c
 800a6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6ac <__ascii_mbtowc>:
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d100      	bne.n	800a6b4 <__ascii_mbtowc+0x8>
 800a6b2:	a901      	add	r1, sp, #4
 800a6b4:	1e10      	subs	r0, r2, #0
 800a6b6:	d006      	beq.n	800a6c6 <__ascii_mbtowc+0x1a>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d006      	beq.n	800a6ca <__ascii_mbtowc+0x1e>
 800a6bc:	7813      	ldrb	r3, [r2, #0]
 800a6be:	600b      	str	r3, [r1, #0]
 800a6c0:	7810      	ldrb	r0, [r2, #0]
 800a6c2:	1e43      	subs	r3, r0, #1
 800a6c4:	4198      	sbcs	r0, r3
 800a6c6:	b002      	add	sp, #8
 800a6c8:	4770      	bx	lr
 800a6ca:	2002      	movs	r0, #2
 800a6cc:	4240      	negs	r0, r0
 800a6ce:	e7fa      	b.n	800a6c6 <__ascii_mbtowc+0x1a>

0800a6d0 <_realloc_r>:
 800a6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d2:	0007      	movs	r7, r0
 800a6d4:	000e      	movs	r6, r1
 800a6d6:	0014      	movs	r4, r2
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d105      	bne.n	800a6e8 <_realloc_r+0x18>
 800a6dc:	0011      	movs	r1, r2
 800a6de:	f7fd fd1d 	bl	800811c <_malloc_r>
 800a6e2:	0005      	movs	r5, r0
 800a6e4:	0028      	movs	r0, r5
 800a6e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	d103      	bne.n	800a6f4 <_realloc_r+0x24>
 800a6ec:	f7fd fca0 	bl	8008030 <_free_r>
 800a6f0:	0025      	movs	r5, r4
 800a6f2:	e7f7      	b.n	800a6e4 <_realloc_r+0x14>
 800a6f4:	f000 f83f 	bl	800a776 <_malloc_usable_size_r>
 800a6f8:	9001      	str	r0, [sp, #4]
 800a6fa:	4284      	cmp	r4, r0
 800a6fc:	d803      	bhi.n	800a706 <_realloc_r+0x36>
 800a6fe:	0035      	movs	r5, r6
 800a700:	0843      	lsrs	r3, r0, #1
 800a702:	42a3      	cmp	r3, r4
 800a704:	d3ee      	bcc.n	800a6e4 <_realloc_r+0x14>
 800a706:	0021      	movs	r1, r4
 800a708:	0038      	movs	r0, r7
 800a70a:	f7fd fd07 	bl	800811c <_malloc_r>
 800a70e:	1e05      	subs	r5, r0, #0
 800a710:	d0e8      	beq.n	800a6e4 <_realloc_r+0x14>
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	0022      	movs	r2, r4
 800a716:	429c      	cmp	r4, r3
 800a718:	d900      	bls.n	800a71c <_realloc_r+0x4c>
 800a71a:	001a      	movs	r2, r3
 800a71c:	0031      	movs	r1, r6
 800a71e:	0028      	movs	r0, r5
 800a720:	f7ff fc0c 	bl	8009f3c <memcpy>
 800a724:	0031      	movs	r1, r6
 800a726:	0038      	movs	r0, r7
 800a728:	f7fd fc82 	bl	8008030 <_free_r>
 800a72c:	e7da      	b.n	800a6e4 <_realloc_r+0x14>

0800a72e <__ascii_wctomb>:
 800a72e:	0003      	movs	r3, r0
 800a730:	1e08      	subs	r0, r1, #0
 800a732:	d005      	beq.n	800a740 <__ascii_wctomb+0x12>
 800a734:	2aff      	cmp	r2, #255	; 0xff
 800a736:	d904      	bls.n	800a742 <__ascii_wctomb+0x14>
 800a738:	228a      	movs	r2, #138	; 0x8a
 800a73a:	2001      	movs	r0, #1
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	4240      	negs	r0, r0
 800a740:	4770      	bx	lr
 800a742:	2001      	movs	r0, #1
 800a744:	700a      	strb	r2, [r1, #0]
 800a746:	e7fb      	b.n	800a740 <__ascii_wctomb+0x12>

0800a748 <fiprintf>:
 800a748:	b40e      	push	{r1, r2, r3}
 800a74a:	b517      	push	{r0, r1, r2, r4, lr}
 800a74c:	4c05      	ldr	r4, [pc, #20]	; (800a764 <fiprintf+0x1c>)
 800a74e:	ab05      	add	r3, sp, #20
 800a750:	cb04      	ldmia	r3!, {r2}
 800a752:	0001      	movs	r1, r0
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	f000 f83c 	bl	800a7d4 <_vfiprintf_r>
 800a75c:	bc1e      	pop	{r1, r2, r3, r4}
 800a75e:	bc08      	pop	{r3}
 800a760:	b003      	add	sp, #12
 800a762:	4718      	bx	r3
 800a764:	20000064 	.word	0x20000064

0800a768 <abort>:
 800a768:	2006      	movs	r0, #6
 800a76a:	b510      	push	{r4, lr}
 800a76c:	f000 f978 	bl	800aa60 <raise>
 800a770:	2001      	movs	r0, #1
 800a772:	f7f8 fc4d 	bl	8003010 <_exit>

0800a776 <_malloc_usable_size_r>:
 800a776:	1f0b      	subs	r3, r1, #4
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	1f18      	subs	r0, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	da01      	bge.n	800a784 <_malloc_usable_size_r+0xe>
 800a780:	580b      	ldr	r3, [r1, r0]
 800a782:	18c0      	adds	r0, r0, r3
 800a784:	4770      	bx	lr

0800a786 <__sfputc_r>:
 800a786:	6893      	ldr	r3, [r2, #8]
 800a788:	b510      	push	{r4, lr}
 800a78a:	3b01      	subs	r3, #1
 800a78c:	6093      	str	r3, [r2, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da04      	bge.n	800a79c <__sfputc_r+0x16>
 800a792:	6994      	ldr	r4, [r2, #24]
 800a794:	42a3      	cmp	r3, r4
 800a796:	db07      	blt.n	800a7a8 <__sfputc_r+0x22>
 800a798:	290a      	cmp	r1, #10
 800a79a:	d005      	beq.n	800a7a8 <__sfputc_r+0x22>
 800a79c:	6813      	ldr	r3, [r2, #0]
 800a79e:	1c58      	adds	r0, r3, #1
 800a7a0:	6010      	str	r0, [r2, #0]
 800a7a2:	7019      	strb	r1, [r3, #0]
 800a7a4:	0008      	movs	r0, r1
 800a7a6:	bd10      	pop	{r4, pc}
 800a7a8:	f7fc fc68 	bl	800707c <__swbuf_r>
 800a7ac:	0001      	movs	r1, r0
 800a7ae:	e7f9      	b.n	800a7a4 <__sfputc_r+0x1e>

0800a7b0 <__sfputs_r>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	0006      	movs	r6, r0
 800a7b4:	000f      	movs	r7, r1
 800a7b6:	0014      	movs	r4, r2
 800a7b8:	18d5      	adds	r5, r2, r3
 800a7ba:	42ac      	cmp	r4, r5
 800a7bc:	d101      	bne.n	800a7c2 <__sfputs_r+0x12>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	e007      	b.n	800a7d2 <__sfputs_r+0x22>
 800a7c2:	7821      	ldrb	r1, [r4, #0]
 800a7c4:	003a      	movs	r2, r7
 800a7c6:	0030      	movs	r0, r6
 800a7c8:	f7ff ffdd 	bl	800a786 <__sfputc_r>
 800a7cc:	3401      	adds	r4, #1
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	d1f3      	bne.n	800a7ba <__sfputs_r+0xa>
 800a7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7d4 <_vfiprintf_r>:
 800a7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d6:	b0a1      	sub	sp, #132	; 0x84
 800a7d8:	000f      	movs	r7, r1
 800a7da:	0015      	movs	r5, r2
 800a7dc:	001e      	movs	r6, r3
 800a7de:	9003      	str	r0, [sp, #12]
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d004      	beq.n	800a7ee <_vfiprintf_r+0x1a>
 800a7e4:	6a03      	ldr	r3, [r0, #32]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <_vfiprintf_r+0x1a>
 800a7ea:	f7fc fb3d 	bl	8006e68 <__sinit>
 800a7ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7f0:	07db      	lsls	r3, r3, #31
 800a7f2:	d405      	bmi.n	800a800 <_vfiprintf_r+0x2c>
 800a7f4:	89bb      	ldrh	r3, [r7, #12]
 800a7f6:	059b      	lsls	r3, r3, #22
 800a7f8:	d402      	bmi.n	800a800 <_vfiprintf_r+0x2c>
 800a7fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7fc:	f7fc fd69 	bl	80072d2 <__retarget_lock_acquire_recursive>
 800a800:	89bb      	ldrh	r3, [r7, #12]
 800a802:	071b      	lsls	r3, r3, #28
 800a804:	d502      	bpl.n	800a80c <_vfiprintf_r+0x38>
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d113      	bne.n	800a834 <_vfiprintf_r+0x60>
 800a80c:	0039      	movs	r1, r7
 800a80e:	9803      	ldr	r0, [sp, #12]
 800a810:	f7fc fc76 	bl	8007100 <__swsetup_r>
 800a814:	2800      	cmp	r0, #0
 800a816:	d00d      	beq.n	800a834 <_vfiprintf_r+0x60>
 800a818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a81a:	07db      	lsls	r3, r3, #31
 800a81c:	d503      	bpl.n	800a826 <_vfiprintf_r+0x52>
 800a81e:	2001      	movs	r0, #1
 800a820:	4240      	negs	r0, r0
 800a822:	b021      	add	sp, #132	; 0x84
 800a824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a826:	89bb      	ldrh	r3, [r7, #12]
 800a828:	059b      	lsls	r3, r3, #22
 800a82a:	d4f8      	bmi.n	800a81e <_vfiprintf_r+0x4a>
 800a82c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a82e:	f7fc fd51 	bl	80072d4 <__retarget_lock_release_recursive>
 800a832:	e7f4      	b.n	800a81e <_vfiprintf_r+0x4a>
 800a834:	2300      	movs	r3, #0
 800a836:	ac08      	add	r4, sp, #32
 800a838:	6163      	str	r3, [r4, #20]
 800a83a:	3320      	adds	r3, #32
 800a83c:	7663      	strb	r3, [r4, #25]
 800a83e:	3310      	adds	r3, #16
 800a840:	76a3      	strb	r3, [r4, #26]
 800a842:	9607      	str	r6, [sp, #28]
 800a844:	002e      	movs	r6, r5
 800a846:	7833      	ldrb	r3, [r6, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <_vfiprintf_r+0x7c>
 800a84c:	2b25      	cmp	r3, #37	; 0x25
 800a84e:	d148      	bne.n	800a8e2 <_vfiprintf_r+0x10e>
 800a850:	1b73      	subs	r3, r6, r5
 800a852:	9305      	str	r3, [sp, #20]
 800a854:	42ae      	cmp	r6, r5
 800a856:	d00b      	beq.n	800a870 <_vfiprintf_r+0x9c>
 800a858:	002a      	movs	r2, r5
 800a85a:	0039      	movs	r1, r7
 800a85c:	9803      	ldr	r0, [sp, #12]
 800a85e:	f7ff ffa7 	bl	800a7b0 <__sfputs_r>
 800a862:	3001      	adds	r0, #1
 800a864:	d100      	bne.n	800a868 <_vfiprintf_r+0x94>
 800a866:	e0af      	b.n	800a9c8 <_vfiprintf_r+0x1f4>
 800a868:	6963      	ldr	r3, [r4, #20]
 800a86a:	9a05      	ldr	r2, [sp, #20]
 800a86c:	189b      	adds	r3, r3, r2
 800a86e:	6163      	str	r3, [r4, #20]
 800a870:	7833      	ldrb	r3, [r6, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d100      	bne.n	800a878 <_vfiprintf_r+0xa4>
 800a876:	e0a7      	b.n	800a9c8 <_vfiprintf_r+0x1f4>
 800a878:	2201      	movs	r2, #1
 800a87a:	2300      	movs	r3, #0
 800a87c:	4252      	negs	r2, r2
 800a87e:	6062      	str	r2, [r4, #4]
 800a880:	a904      	add	r1, sp, #16
 800a882:	3254      	adds	r2, #84	; 0x54
 800a884:	1852      	adds	r2, r2, r1
 800a886:	1c75      	adds	r5, r6, #1
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	60e3      	str	r3, [r4, #12]
 800a88c:	60a3      	str	r3, [r4, #8]
 800a88e:	7013      	strb	r3, [r2, #0]
 800a890:	65a3      	str	r3, [r4, #88]	; 0x58
 800a892:	4b59      	ldr	r3, [pc, #356]	; (800a9f8 <_vfiprintf_r+0x224>)
 800a894:	2205      	movs	r2, #5
 800a896:	0018      	movs	r0, r3
 800a898:	7829      	ldrb	r1, [r5, #0]
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	f7fc fd1b 	bl	80072d6 <memchr>
 800a8a0:	1c6e      	adds	r6, r5, #1
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d11f      	bne.n	800a8e6 <_vfiprintf_r+0x112>
 800a8a6:	6822      	ldr	r2, [r4, #0]
 800a8a8:	06d3      	lsls	r3, r2, #27
 800a8aa:	d504      	bpl.n	800a8b6 <_vfiprintf_r+0xe2>
 800a8ac:	2353      	movs	r3, #83	; 0x53
 800a8ae:	a904      	add	r1, sp, #16
 800a8b0:	185b      	adds	r3, r3, r1
 800a8b2:	2120      	movs	r1, #32
 800a8b4:	7019      	strb	r1, [r3, #0]
 800a8b6:	0713      	lsls	r3, r2, #28
 800a8b8:	d504      	bpl.n	800a8c4 <_vfiprintf_r+0xf0>
 800a8ba:	2353      	movs	r3, #83	; 0x53
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	185b      	adds	r3, r3, r1
 800a8c0:	212b      	movs	r1, #43	; 0x2b
 800a8c2:	7019      	strb	r1, [r3, #0]
 800a8c4:	782b      	ldrb	r3, [r5, #0]
 800a8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c8:	d016      	beq.n	800a8f8 <_vfiprintf_r+0x124>
 800a8ca:	002e      	movs	r6, r5
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	200a      	movs	r0, #10
 800a8d0:	68e3      	ldr	r3, [r4, #12]
 800a8d2:	7832      	ldrb	r2, [r6, #0]
 800a8d4:	1c75      	adds	r5, r6, #1
 800a8d6:	3a30      	subs	r2, #48	; 0x30
 800a8d8:	2a09      	cmp	r2, #9
 800a8da:	d94e      	bls.n	800a97a <_vfiprintf_r+0x1a6>
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d111      	bne.n	800a904 <_vfiprintf_r+0x130>
 800a8e0:	e017      	b.n	800a912 <_vfiprintf_r+0x13e>
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	e7af      	b.n	800a846 <_vfiprintf_r+0x72>
 800a8e6:	9b05      	ldr	r3, [sp, #20]
 800a8e8:	6822      	ldr	r2, [r4, #0]
 800a8ea:	1ac0      	subs	r0, r0, r3
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	4083      	lsls	r3, r0
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	0035      	movs	r5, r6
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	e7cc      	b.n	800a892 <_vfiprintf_r+0xbe>
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	1d19      	adds	r1, r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	9107      	str	r1, [sp, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	db01      	blt.n	800a908 <_vfiprintf_r+0x134>
 800a904:	930b      	str	r3, [sp, #44]	; 0x2c
 800a906:	e004      	b.n	800a912 <_vfiprintf_r+0x13e>
 800a908:	425b      	negs	r3, r3
 800a90a:	60e3      	str	r3, [r4, #12]
 800a90c:	2302      	movs	r3, #2
 800a90e:	4313      	orrs	r3, r2
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	7833      	ldrb	r3, [r6, #0]
 800a914:	2b2e      	cmp	r3, #46	; 0x2e
 800a916:	d10a      	bne.n	800a92e <_vfiprintf_r+0x15a>
 800a918:	7873      	ldrb	r3, [r6, #1]
 800a91a:	2b2a      	cmp	r3, #42	; 0x2a
 800a91c:	d135      	bne.n	800a98a <_vfiprintf_r+0x1b6>
 800a91e:	9b07      	ldr	r3, [sp, #28]
 800a920:	3602      	adds	r6, #2
 800a922:	1d1a      	adds	r2, r3, #4
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	9207      	str	r2, [sp, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db2b      	blt.n	800a984 <_vfiprintf_r+0x1b0>
 800a92c:	9309      	str	r3, [sp, #36]	; 0x24
 800a92e:	4d33      	ldr	r5, [pc, #204]	; (800a9fc <_vfiprintf_r+0x228>)
 800a930:	2203      	movs	r2, #3
 800a932:	0028      	movs	r0, r5
 800a934:	7831      	ldrb	r1, [r6, #0]
 800a936:	f7fc fcce 	bl	80072d6 <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d006      	beq.n	800a94c <_vfiprintf_r+0x178>
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	1b40      	subs	r0, r0, r5
 800a942:	4083      	lsls	r3, r0
 800a944:	6822      	ldr	r2, [r4, #0]
 800a946:	3601      	adds	r6, #1
 800a948:	4313      	orrs	r3, r2
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	7831      	ldrb	r1, [r6, #0]
 800a94e:	2206      	movs	r2, #6
 800a950:	482b      	ldr	r0, [pc, #172]	; (800aa00 <_vfiprintf_r+0x22c>)
 800a952:	1c75      	adds	r5, r6, #1
 800a954:	7621      	strb	r1, [r4, #24]
 800a956:	f7fc fcbe 	bl	80072d6 <memchr>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d043      	beq.n	800a9e6 <_vfiprintf_r+0x212>
 800a95e:	4b29      	ldr	r3, [pc, #164]	; (800aa04 <_vfiprintf_r+0x230>)
 800a960:	2b00      	cmp	r3, #0
 800a962:	d125      	bne.n	800a9b0 <_vfiprintf_r+0x1dc>
 800a964:	2207      	movs	r2, #7
 800a966:	9b07      	ldr	r3, [sp, #28]
 800a968:	3307      	adds	r3, #7
 800a96a:	4393      	bics	r3, r2
 800a96c:	3308      	adds	r3, #8
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	6963      	ldr	r3, [r4, #20]
 800a972:	9a04      	ldr	r2, [sp, #16]
 800a974:	189b      	adds	r3, r3, r2
 800a976:	6163      	str	r3, [r4, #20]
 800a978:	e764      	b.n	800a844 <_vfiprintf_r+0x70>
 800a97a:	4343      	muls	r3, r0
 800a97c:	002e      	movs	r6, r5
 800a97e:	2101      	movs	r1, #1
 800a980:	189b      	adds	r3, r3, r2
 800a982:	e7a6      	b.n	800a8d2 <_vfiprintf_r+0xfe>
 800a984:	2301      	movs	r3, #1
 800a986:	425b      	negs	r3, r3
 800a988:	e7d0      	b.n	800a92c <_vfiprintf_r+0x158>
 800a98a:	2300      	movs	r3, #0
 800a98c:	200a      	movs	r0, #10
 800a98e:	001a      	movs	r2, r3
 800a990:	3601      	adds	r6, #1
 800a992:	6063      	str	r3, [r4, #4]
 800a994:	7831      	ldrb	r1, [r6, #0]
 800a996:	1c75      	adds	r5, r6, #1
 800a998:	3930      	subs	r1, #48	; 0x30
 800a99a:	2909      	cmp	r1, #9
 800a99c:	d903      	bls.n	800a9a6 <_vfiprintf_r+0x1d2>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0c5      	beq.n	800a92e <_vfiprintf_r+0x15a>
 800a9a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9a4:	e7c3      	b.n	800a92e <_vfiprintf_r+0x15a>
 800a9a6:	4342      	muls	r2, r0
 800a9a8:	002e      	movs	r6, r5
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	1852      	adds	r2, r2, r1
 800a9ae:	e7f1      	b.n	800a994 <_vfiprintf_r+0x1c0>
 800a9b0:	aa07      	add	r2, sp, #28
 800a9b2:	9200      	str	r2, [sp, #0]
 800a9b4:	0021      	movs	r1, r4
 800a9b6:	003a      	movs	r2, r7
 800a9b8:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <_vfiprintf_r+0x234>)
 800a9ba:	9803      	ldr	r0, [sp, #12]
 800a9bc:	f7fb fbe6 	bl	800618c <_printf_float>
 800a9c0:	9004      	str	r0, [sp, #16]
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	d1d3      	bne.n	800a970 <_vfiprintf_r+0x19c>
 800a9c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ca:	07db      	lsls	r3, r3, #31
 800a9cc:	d405      	bmi.n	800a9da <_vfiprintf_r+0x206>
 800a9ce:	89bb      	ldrh	r3, [r7, #12]
 800a9d0:	059b      	lsls	r3, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_vfiprintf_r+0x206>
 800a9d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a9d6:	f7fc fc7d 	bl	80072d4 <__retarget_lock_release_recursive>
 800a9da:	89bb      	ldrh	r3, [r7, #12]
 800a9dc:	065b      	lsls	r3, r3, #25
 800a9de:	d500      	bpl.n	800a9e2 <_vfiprintf_r+0x20e>
 800a9e0:	e71d      	b.n	800a81e <_vfiprintf_r+0x4a>
 800a9e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a9e4:	e71d      	b.n	800a822 <_vfiprintf_r+0x4e>
 800a9e6:	aa07      	add	r2, sp, #28
 800a9e8:	9200      	str	r2, [sp, #0]
 800a9ea:	0021      	movs	r1, r4
 800a9ec:	003a      	movs	r2, r7
 800a9ee:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <_vfiprintf_r+0x234>)
 800a9f0:	9803      	ldr	r0, [sp, #12]
 800a9f2:	f7fb fe91 	bl	8006718 <_printf_i>
 800a9f6:	e7e3      	b.n	800a9c0 <_vfiprintf_r+0x1ec>
 800a9f8:	0800af71 	.word	0x0800af71
 800a9fc:	0800af77 	.word	0x0800af77
 800aa00:	0800af7b 	.word	0x0800af7b
 800aa04:	0800618d 	.word	0x0800618d
 800aa08:	0800a7b1 	.word	0x0800a7b1

0800aa0c <_raise_r>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	0004      	movs	r4, r0
 800aa10:	000d      	movs	r5, r1
 800aa12:	291f      	cmp	r1, #31
 800aa14:	d904      	bls.n	800aa20 <_raise_r+0x14>
 800aa16:	2316      	movs	r3, #22
 800aa18:	6003      	str	r3, [r0, #0]
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	4240      	negs	r0, r0
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
 800aa20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d004      	beq.n	800aa30 <_raise_r+0x24>
 800aa26:	008a      	lsls	r2, r1, #2
 800aa28:	189b      	adds	r3, r3, r2
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	d108      	bne.n	800aa42 <_raise_r+0x36>
 800aa30:	0020      	movs	r0, r4
 800aa32:	f000 f831 	bl	800aa98 <_getpid_r>
 800aa36:	002a      	movs	r2, r5
 800aa38:	0001      	movs	r1, r0
 800aa3a:	0020      	movs	r0, r4
 800aa3c:	f000 f81a 	bl	800aa74 <_kill_r>
 800aa40:	e7ed      	b.n	800aa1e <_raise_r+0x12>
 800aa42:	2000      	movs	r0, #0
 800aa44:	2a01      	cmp	r2, #1
 800aa46:	d0ea      	beq.n	800aa1e <_raise_r+0x12>
 800aa48:	1c51      	adds	r1, r2, #1
 800aa4a:	d103      	bne.n	800aa54 <_raise_r+0x48>
 800aa4c:	2316      	movs	r3, #22
 800aa4e:	3001      	adds	r0, #1
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	e7e4      	b.n	800aa1e <_raise_r+0x12>
 800aa54:	2400      	movs	r4, #0
 800aa56:	0028      	movs	r0, r5
 800aa58:	601c      	str	r4, [r3, #0]
 800aa5a:	4790      	blx	r2
 800aa5c:	0020      	movs	r0, r4
 800aa5e:	e7de      	b.n	800aa1e <_raise_r+0x12>

0800aa60 <raise>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <raise+0x10>)
 800aa64:	0001      	movs	r1, r0
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	f7ff ffd0 	bl	800aa0c <_raise_r>
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	20000064 	.word	0x20000064

0800aa74 <_kill_r>:
 800aa74:	2300      	movs	r3, #0
 800aa76:	b570      	push	{r4, r5, r6, lr}
 800aa78:	4d06      	ldr	r5, [pc, #24]	; (800aa94 <_kill_r+0x20>)
 800aa7a:	0004      	movs	r4, r0
 800aa7c:	0008      	movs	r0, r1
 800aa7e:	0011      	movs	r1, r2
 800aa80:	602b      	str	r3, [r5, #0]
 800aa82:	f7f8 fab5 	bl	8002ff0 <_kill>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d103      	bne.n	800aa92 <_kill_r+0x1e>
 800aa8a:	682b      	ldr	r3, [r5, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d000      	beq.n	800aa92 <_kill_r+0x1e>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	200004ec 	.word	0x200004ec

0800aa98 <_getpid_r>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	f7f8 faa3 	bl	8002fe4 <_getpid>
 800aa9e:	bd10      	pop	{r4, pc}

0800aaa0 <_init>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa6:	bc08      	pop	{r3}
 800aaa8:	469e      	mov	lr, r3
 800aaaa:	4770      	bx	lr

0800aaac <_fini>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr
